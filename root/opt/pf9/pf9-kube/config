#!/opt/pf9/hostagent/bin/python

# Copyright (c) 2015 Platform9 Systems Inc.
# All Rights Reserved.

import optparse
import sys
import json
import os
import re
import subprocess
import yaml

# Rather than managing the kube.env directly through hostagent, we store it in
# kube_resmgr.env and let Nodelet create kube.env as a symlink. This is done
# because it allows nodelet to change the destination of the symlink to a
# kube.env-implementation that was generated with the Sunpike configuration.
CFG_FILE='/etc/pf9/kube_resmgr.env'
NODELET_CONFIG = '/etc/pf9/nodelet/config_resmgr.yaml'
LEGACY_CONFIG_TO_DELETE = '/etc/pf9/nodelet/config.yaml'
CONFIG_PATTERN = re.compile(r'export (.+)="(.*)"')
if 'PF9_KUBE_CONFIG_FILE' in os.environ:
    CFG_FILE = os.environ['PF9_KUBE_CONFIG_FILE']
SERVICES = ["pf9-nodeletd"]


def _get_config(option, opt_str, value, parser):
    """
    Callback method invoked when get-config is called. Returns the configuration
    that needs to be managed for this app. Writes a JSON string to stdout
    :param option: Option object
    :param str opt_str: Name of the option
    :param str value: Value of the option
    :param Parser parser: The optparse parser object
    """
    d = {}
    with open(CFG_FILE, 'r') as f:
        for line in f.readlines():
            item = CONFIG_PATTERN.match(line)

            if(sys.version_info > (3,0)):
                d[item.group(1)] = item.group(2).encode().decode('unicode_escape')
            else:
                d[item.group(1)] = item.group(2).decode('unicode_escape')

    return d

def _run_process(cmd, env=None, exit=True):
    proc = subprocess.Popen(cmd, shell=True,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            env=env)
    out, err = proc.communicate()
    code = proc.returncode

    if code and exit:
        # Consider any non zero code as error
        sys.stdout.write(out)
        sys.stderr.write("Command: %s failed. {%d}:%s" % (cmd, code, err))
        sys.exit(1)

    return code


def get_config(option, opt_str, value, parser):
    print(json.dumps(_get_config(option, opt_str, value, parser)))

def get_export_strings_from_dict(d):
    if (sys.version_info > (3,0)):
        # For python3 we require special decode() function
        # as otherwise it is bytes and printing it would print an extra 'b'
        lines = ['export %s="%s"\n' % (key, val.encode('unicode_escape').decode()) for key, val in d.items()]
    else:
        lines = ['export %s="%s"\n' % (key, val.encode('unicode_escape')) for key, val in d.items()]

    return lines

def set_config(option, opt_str, value, parser):
    # Temporary 5.0 upgrade fix: delete the old config.yaml, because starting
    # from 5.0 hostagent will now write to config_resmgr.yaml instead.
    if os.path.exists(LEGACY_CONFIG_TO_DELETE):
        os.remove(LEGACY_CONFIG_TO_DELETE)

    d = json.loads(value)
    if type(d) is dict:
        with open(CFG_FILE, 'w') as f:
            lines = get_export_strings_from_dict(d)
            f.writelines(lines)
    if not os.path.exists(os.path.dirname(NODELET_CONFIG)):
        os.mkdir(os.path.dirname(NODELET_CONFIG))
    with open(NODELET_CONFIG, 'w') as fptr:
        fptr.truncate()
        yaml.safe_dump(d, fptr, allow_unicode=True)
    sys.exit(0)


def get_services(option, opt_str, value, parser):
    """
    Callback method invoked when get-services is called. Returns
    the names of the services this app can manage.
    :param option: Option object
    :param str opt_str: Name of the option
    :param str value: Value of the option
    :param Parser parser: The optparse parser object
    """
    sys.stdout.write('pf9-nodeletd')
    sys.exit(0)


def parse_args():
    """
    Build a parser with callbacks for the different options
    """
    parser = optparse.OptionParser()
    parser.add_option("--get-config",
                      action="callback",
                      callback=get_config,
                      help="Get the configuration of the pf9-support application"
                      )

    parser.add_option("--set-config",
                      type='string',
                      action="callback",
                      callback=set_config,
                      help="Set the configuration of the pf9-support application"
                      )

    parser.add_option("--get-services",
                      action="callback",
                      callback=get_services,
                      help="Get the names of the services managed by pf9-support"
                      )

    parser.parse_args()


def main():
    parse_args()


if __name__ == "__main__":
    main()
