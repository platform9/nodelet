#!/usr/bin/env bash
# Usage: runtests.sh [itestrun.py options]
#
# By default, runs integration test suites. To run other suites, pass
# --suite-dirs dir1,dir2,... (a comma-separated list of dir paths,
# absolute or relative to pf9-main/testing)
#
# - Known issue that affects local builds only:
# There may be more than one qbert/kube package in the build dir, and
# all will be copied to the yum-repo by this script. In addition, there
# may be multiple qbert/kube packages in the yum-repo before this script
# is run.  The packages installed on the DU may turn out to be of a
# different version than expected by the user who starts the build.
# Teamcity builds are not affected because they start with empty build
# and yum-repo dirs.
# - Suggested workaround:
# Prior to building, run `make clean && rm -rf ../yum-repo`

set -euo pipefail

PF9_KUBE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PF9_QBERT_DIR=${PF9_KUBE_DIR}/../pf9-qbert
PF9_MAIN_DIR=${PF9_KUBE_DIR}/../pf9-main
PF9_MAIN_TESTING_DIR=${PF9_MAIN_DIR}/testing
YUM_REPO_DIR=${PF9_KUBE_DIR}/../yum-repo
TEST_SETUP_HOOK=${PF9_QBERT_DIR}/tests/setup.sh
DEFAULT_SUITE_DIRS=${PF9_KUBE_DIR}/e2etests/suites/integration
SDIRS=${SUITE_DIRS:-${DEFAULT_SUITE_DIRS}}
DEFAULT_ITESTRUN_OPTIONS=" \
    --suite-dirs ${SDIRS} \
    --suite-delay 1"
export PYTHON_BIN=python3

function main()
{
    make kubernetes-test

    # If there exists a qbert branch with same name as teamcity build branch
    # use that to run e2e tests
    pushd "${PF9_QBERT_DIR}"
    qbertBranch=$(git rev-parse --abbrev-ref HEAD | tr -d '\n')
    if [[ "$qbertBranch" == "$TEAMCITY_BUILD_BRANCH" ]]; then
        echo "Using checked out pf9-qbert for running e2e tests"
    else
        echo "Using ${AMI_BRANCH} from pf9-qbert for running e2e tests"
        git checkout ${AMI_BRANCH}
    fi
    popd
    # Ensure server/agent rpms are updated on DU
    export UPDATE_PF9_RPMS=1

    # Will be required when there are changes in qbert repo as well
    #
    # Prepare artifacts and yum-repo
    copy_to_yum_repo
    link_yum_repo
    update_pf9_rpms_hack

    # Build testbed and run tests
    pushd "${PF9_MAIN_TESTING_DIR}"
    export TEST_SETUP_HOOK

    # override build number env variable if we are promoting already existing
    # pf9-kube build
    if [[ "$PROMOTE_BUILD" != "False" ]] && [[ "$PROMOTE_BUILD" != "false" ]]; then
        export BUILD_NUMBER="$PROMOTE_BUILD_NUMBER"
    fi
    ./use-ami-and-test.sh "${@:-${DEFAULT_ITESTRUN_OPTIONS}}"
    popd
}

# Ensure the packages generated by this build appear in yum-repo and are
# updated during DU configure phase
function copy_to_yum_repo()
{
    runtests::log "Copying rpm artifacts to yum-repo.  YUM_REPO_DIR=`${YUM_REPO_DIR}`."
    runtests::log "BEFORE: `ls -altrh ./`."
    #find ../  | grep pf9-kube-wrapper
    runtests::log "yum repo contents ~ `ls -altrh ../yum-repo`."

    mkdir -p "${YUM_REPO_DIR}"
    #cp -f ${PF9_KUBE_DIR}/build/pf9-kube/RPMS/x86_64/pf9-kube-wrapper-*.x86_64.rpm "${YUM_REPO_DIR}"
    cp -f ${PF9_QBERT_DIR}/build/pf9-qbert/rpmbuild/RPMS/x86_64/pf9-qbert-*.x86_64.rpm "${YUM_REPO_DIR}"
    runtests::log "AFTER: `ls -altrh ./`."
}

# Ensure backward compatibility with past build configs that assume
# yum-repo in pf9-main root
function link_yum_repo()
{
    runtests::log "Linking yum-repo (for backward compatibility with build configs)"
    pushd "${PF9_MAIN_DIR}"
    ln -fs ../yum-repo
    popd
}

# FIXME remove when IAAS-5010 is resolved
# rsync: don't delete destination files (temporary hack, talk to @leb)
function update_pf9_rpms_hack()
{
    runtests::log "Applying update-pf9-rpms ansible role hack"
    local tasks_dir=${PF9_MAIN_DIR}/ansible-stack/roles/update-pf9-rpms/tasks
    sed -i.orig 's/delete: yes/delete: no/g' "${tasks_dir}"/main.yml
    # Restore main.yml upon exit.
    trap "mv -f ${tasks_dir}/main.yml.orig ${tasks_dir}/main.yml" EXIT
}

# Prefixes this script's log output to make it easier to find, e.g., in
# a long build log
function runtests::log()
{
    local msg="$1"
    echo "runtests.sh: ${msg}"
}

main "$@"
