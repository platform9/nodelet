// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/utils/kubeletutils/kubelet_utils.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/platform9/nodelet/nodelet/pkg/utils/config"
)

// MockKubeletUtilsInterface is a mock of KubeletUtilsInterface interface.
type MockKubeletUtilsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKubeletUtilsInterfaceMockRecorder
}

// MockKubeletUtilsInterfaceMockRecorder is the mock recorder for MockKubeletUtilsInterface.
type MockKubeletUtilsInterfaceMockRecorder struct {
	mock *MockKubeletUtilsInterface
}

// NewMockKubeletUtilsInterface creates a new mock instance.
func NewMockKubeletUtilsInterface(ctrl *gomock.Controller) *MockKubeletUtilsInterface {
	mock := &MockKubeletUtilsInterface{ctrl: ctrl}
	mock.recorder = &MockKubeletUtilsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeletUtilsInterface) EXPECT() *MockKubeletUtilsInterfaceMockRecorder {
	return m.recorder
}

// ConfigureKubeletHttpProxy mocks base method.
func (m *MockKubeletUtilsInterface) ConfigureKubeletHttpProxy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConfigureKubeletHttpProxy")
}

// ConfigureKubeletHttpProxy indicates an expected call of ConfigureKubeletHttpProxy.
func (mr *MockKubeletUtilsInterfaceMockRecorder) ConfigureKubeletHttpProxy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureKubeletHttpProxy", reflect.TypeOf((*MockKubeletUtilsInterface)(nil).ConfigureKubeletHttpProxy))
}

// EnsureDirReadableByPf9 mocks base method.
func (m *MockKubeletUtilsInterface) EnsureDirReadableByPf9(dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDirReadableByPf9", dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDirReadableByPf9 indicates an expected call of EnsureDirReadableByPf9.
func (mr *MockKubeletUtilsInterfaceMockRecorder) EnsureDirReadableByPf9(dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDirReadableByPf9", reflect.TypeOf((*MockKubeletUtilsInterface)(nil).EnsureDirReadableByPf9), dir)
}

// EnsureKubeletRunning mocks base method.
func (m *MockKubeletUtilsInterface) EnsureKubeletRunning(arg0 config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureKubeletRunning", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureKubeletRunning indicates an expected call of EnsureKubeletRunning.
func (mr *MockKubeletUtilsInterfaceMockRecorder) EnsureKubeletRunning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureKubeletRunning", reflect.TypeOf((*MockKubeletUtilsInterface)(nil).EnsureKubeletRunning), arg0)
}

// EnsureKubeletStopped mocks base method.
func (m *MockKubeletUtilsInterface) EnsureKubeletStopped() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureKubeletStopped")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureKubeletStopped indicates an expected call of EnsureKubeletStopped.
func (mr *MockKubeletUtilsInterfaceMockRecorder) EnsureKubeletStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureKubeletStopped", reflect.TypeOf((*MockKubeletUtilsInterface)(nil).EnsureKubeletStopped))
}

// FetchAwsAz mocks base method.
func (m *MockKubeletUtilsInterface) FetchAwsAz() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAwsAz")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAwsAz indicates an expected call of FetchAwsAz.
func (mr *MockKubeletUtilsInterfaceMockRecorder) FetchAwsAz() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAwsAz", reflect.TypeOf((*MockKubeletUtilsInterface)(nil).FetchAwsAz))
}

// FetchAwsInstanceId mocks base method.
func (m *MockKubeletUtilsInterface) FetchAwsInstanceId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAwsInstanceId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAwsInstanceId indicates an expected call of FetchAwsInstanceId.
func (mr *MockKubeletUtilsInterfaceMockRecorder) FetchAwsInstanceId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAwsInstanceId", reflect.TypeOf((*MockKubeletUtilsInterface)(nil).FetchAwsInstanceId))
}

// GenerateKubeletSystemdUnit mocks base method.
func (m *MockKubeletUtilsInterface) GenerateKubeletSystemdUnit(kubeletArgs string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKubeletSystemdUnit", kubeletArgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateKubeletSystemdUnit indicates an expected call of GenerateKubeletSystemdUnit.
func (mr *MockKubeletUtilsInterfaceMockRecorder) GenerateKubeletSystemdUnit(kubeletArgs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKubeletSystemdUnit", reflect.TypeOf((*MockKubeletUtilsInterface)(nil).GenerateKubeletSystemdUnit), kubeletArgs)
}

// IsKubeletRunning mocks base method.
func (m *MockKubeletUtilsInterface) IsKubeletRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKubeletRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKubeletRunning indicates an expected call of IsKubeletRunning.
func (mr *MockKubeletUtilsInterfaceMockRecorder) IsKubeletRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKubeletRunning", reflect.TypeOf((*MockKubeletUtilsInterface)(nil).IsKubeletRunning))
}

// KubeletSetup mocks base method.
func (m *MockKubeletUtilsInterface) KubeletSetup(kubeletArgs string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeletSetup", kubeletArgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// KubeletSetup indicates an expected call of KubeletSetup.
func (mr *MockKubeletUtilsInterfaceMockRecorder) KubeletSetup(kubeletArgs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeletSetup", reflect.TypeOf((*MockKubeletUtilsInterface)(nil).KubeletSetup), kubeletArgs)
}

// KubeletStart mocks base method.
func (m *MockKubeletUtilsInterface) KubeletStart() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeletStart")
	ret0, _ := ret[0].(error)
	return ret0
}

// KubeletStart indicates an expected call of KubeletStart.
func (mr *MockKubeletUtilsInterfaceMockRecorder) KubeletStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeletStart", reflect.TypeOf((*MockKubeletUtilsInterface)(nil).KubeletStart))
}

// KubeletStop mocks base method.
func (m *MockKubeletUtilsInterface) KubeletStop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeletStop")
	ret0, _ := ret[0].(error)
	return ret0
}

// KubeletStop indicates an expected call of KubeletStop.
func (mr *MockKubeletUtilsInterfaceMockRecorder) KubeletStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeletStop", reflect.TypeOf((*MockKubeletUtilsInterface)(nil).KubeletStop))
}

// PrepareKubeletBootstrapConfig mocks base method.
func (m *MockKubeletUtilsInterface) PrepareKubeletBootstrapConfig(cfg config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareKubeletBootstrapConfig", cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareKubeletBootstrapConfig indicates an expected call of PrepareKubeletBootstrapConfig.
func (mr *MockKubeletUtilsInterfaceMockRecorder) PrepareKubeletBootstrapConfig(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareKubeletBootstrapConfig", reflect.TypeOf((*MockKubeletUtilsInterface)(nil).PrepareKubeletBootstrapConfig), cfg)
}

// TrimSans mocks base method.
func (m *MockKubeletUtilsInterface) TrimSans(str string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrimSans", str)
	ret0, _ := ret[0].(string)
	return ret0
}

// TrimSans indicates an expected call of TrimSans.
func (mr *MockKubeletUtilsInterfaceMockRecorder) TrimSans(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrimSans", reflect.TypeOf((*MockKubeletUtilsInterface)(nil).TrimSans), str)
}
