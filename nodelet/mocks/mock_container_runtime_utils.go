// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/utils/container_runtime_utils/container_runtime_utils.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRuntime is a mock of Runtime interface.
type MockRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeMockRecorder
}

// MockRuntimeMockRecorder is the mock recorder for MockRuntime.
type MockRuntimeMockRecorder struct {
	mock *MockRuntime
}

// NewMockRuntime creates a new mock instance.
func NewMockRuntime(ctrl *gomock.Controller) *MockRuntime {
	mock := &MockRuntime{ctrl: ctrl}
	mock.recorder = &MockRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntime) EXPECT() *MockRuntimeMockRecorder {
	return m.recorder
}

// GenerateChecksum mocks base method.
func (m *MockRuntime) GenerateChecksum(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChecksum", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateChecksum indicates an expected call of GenerateChecksum.
func (mr *MockRuntimeMockRecorder) GenerateChecksum(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChecksum", reflect.TypeOf((*MockRuntime)(nil).GenerateChecksum), arg0)
}

// GenerateHashForDir mocks base method.
func (m *MockRuntime) GenerateHashForDir(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHashForDir", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHashForDir indicates an expected call of GenerateHashForDir.
func (mr *MockRuntimeMockRecorder) GenerateHashForDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHashForDir", reflect.TypeOf((*MockRuntime)(nil).GenerateHashForDir), arg0)
}

// LoadImagesFromDir mocks base method.
func (m *MockRuntime) LoadImagesFromDir(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadImagesFromDir", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadImagesFromDir indicates an expected call of LoadImagesFromDir.
func (mr *MockRuntimeMockRecorder) LoadImagesFromDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImagesFromDir", reflect.TypeOf((*MockRuntime)(nil).LoadImagesFromDir), arg0, arg1, arg2)
}

// LoadImagesFromFile mocks base method.
func (m *MockRuntime) LoadImagesFromFile(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadImagesFromFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadImagesFromFile indicates an expected call of LoadImagesFromFile.
func (mr *MockRuntimeMockRecorder) LoadImagesFromFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImagesFromFile", reflect.TypeOf((*MockRuntime)(nil).LoadImagesFromFile), arg0, arg1)
}

// VerifyChecksum mocks base method.
func (m *MockRuntime) VerifyChecksum(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyChecksum", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyChecksum indicates an expected call of VerifyChecksum.
func (mr *MockRuntimeMockRecorder) VerifyChecksum(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyChecksum", reflect.TypeOf((*MockRuntime)(nil).VerifyChecksum), arg0)
}
