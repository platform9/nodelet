// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/utils/netutils/net_utils.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/platform9/nodelet/nodelet/pkg/utils/config"
)

// MockNetInterface is a mock of NetInterface interface.
type MockNetInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetInterfaceMockRecorder
}

// MockNetInterfaceMockRecorder is the mock recorder for MockNetInterface.
type MockNetInterfaceMockRecorder struct {
	mock *MockNetInterface
}

// NewMockNetInterface creates a new mock instance.
func NewMockNetInterface(ctrl *gomock.Controller) *MockNetInterface {
	mock := &MockNetInterface{ctrl: ctrl}
	mock.recorder = &MockNetInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetInterface) EXPECT() *MockNetInterfaceMockRecorder {
	return m.recorder
}

// AddrConv mocks base method.
func (m *MockNetInterface) AddrConv(arg0 string, arg1 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddrConv", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddrConv indicates an expected call of AddrConv.
func (mr *MockNetInterfaceMockRecorder) AddrConv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddrConv", reflect.TypeOf((*MockNetInterface)(nil).AddrConv), arg0, arg1)
}

// GetIPv4ForInterfaceName mocks base method.
func (m *MockNetInterface) GetIPv4ForInterfaceName(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPv4ForInterfaceName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPv4ForInterfaceName indicates an expected call of GetIPv4ForInterfaceName.
func (mr *MockNetInterfaceMockRecorder) GetIPv4ForInterfaceName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPv4ForInterfaceName", reflect.TypeOf((*MockNetInterface)(nil).GetIPv4ForInterfaceName), arg0)
}

// GetNodeIP mocks base method.
func (m *MockNetInterface) GetNodeIP() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeIP")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeIP indicates an expected call of GetNodeIP.
func (mr *MockNetInterfaceMockRecorder) GetNodeIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeIP", reflect.TypeOf((*MockNetInterface)(nil).GetNodeIP))
}

// GetNodeIdentifier mocks base method.
func (m *MockNetInterface) GetNodeIdentifier(arg0 config.Config) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeIdentifier", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeIdentifier indicates an expected call of GetNodeIdentifier.
func (mr *MockNetInterfaceMockRecorder) GetNodeIdentifier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeIdentifier", reflect.TypeOf((*MockNetInterface)(nil).GetNodeIdentifier), arg0)
}

// GetRoutedNetworkInterFace mocks base method.
func (m *MockNetInterface) GetRoutedNetworkInterFace() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutedNetworkInterFace")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutedNetworkInterFace indicates an expected call of GetRoutedNetworkInterFace.
func (mr *MockNetInterfaceMockRecorder) GetRoutedNetworkInterFace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutedNetworkInterFace", reflect.TypeOf((*MockNetInterface)(nil).GetRoutedNetworkInterFace))
}

// IpForHttp mocks base method.
func (m *MockNetInterface) IpForHttp(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IpForHttp", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpForHttp indicates an expected call of IpForHttp.
func (mr *MockNetInterfaceMockRecorder) IpForHttp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpForHttp", reflect.TypeOf((*MockNetInterface)(nil).IpForHttp), arg0)
}

// SetUpVeth mocks base method.
func (m *MockNetInterface) SetUpVeth(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpVeth", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUpVeth indicates an expected call of SetUpVeth.
func (mr *MockNetInterfaceMockRecorder) SetUpVeth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpVeth", reflect.TypeOf((*MockNetInterface)(nil).SetUpVeth), arg0, arg1, arg2)
}

// TearDownVeth mocks base method.
func (m *MockNetInterface) TearDownVeth(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TearDownVeth", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TearDownVeth indicates an expected call of TearDownVeth.
func (mr *MockNetInterfaceMockRecorder) TearDownVeth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TearDownVeth", reflect.TypeOf((*MockNetInterface)(nil).TearDownVeth), arg0)
}
