// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/utils/command/check_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceUtil is a mock of ServiceUtil interface.
type MockServiceUtil struct {
	ctrl     *gomock.Controller
	recorder *MockServiceUtilMockRecorder
}

// MockServiceUtilMockRecorder is the mock recorder for MockServiceUtil.
type MockServiceUtilMockRecorder struct {
	mock *MockServiceUtil
}

// NewMockServiceUtil creates a new mock instance.
func NewMockServiceUtil(ctrl *gomock.Controller) *MockServiceUtil {
	mock := &MockServiceUtil{ctrl: ctrl}
	mock.recorder = &MockServiceUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceUtil) EXPECT() *MockServiceUtilMockRecorder {
	return m.recorder
}

// RunAction mocks base method.
func (m *MockServiceUtil) RunAction(ctx context.Context, action string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAction", ctx, action)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAction indicates an expected call of RunAction.
func (mr *MockServiceUtilMockRecorder) RunAction(ctx, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAction", reflect.TypeOf((*MockServiceUtil)(nil).RunAction), ctx, action)
}
