/*
Copyright (C) 2015-2020 Platform9 Systems, Inc.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/platform9/pf9-qbert/sunpike/apiserver/pkg/apis/sunpike/v1alpha2/generated.proto

package v1alpha2

import (
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	k8s_io_api_core_v1 "k8s.io/api/core/v1"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *AKSAgentPool) Reset()      { *m = AKSAgentPool{} }
func (*AKSAgentPool) ProtoMessage() {}
func (*AKSAgentPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{0}
}
func (m *AKSAgentPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AKSAgentPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AKSAgentPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AKSAgentPool.Merge(m, src)
}
func (m *AKSAgentPool) XXX_Size() int {
	return m.Size()
}
func (m *AKSAgentPool) XXX_DiscardUnknown() {
	xxx_messageInfo_AKSAgentPool.DiscardUnknown(m)
}

var xxx_messageInfo_AKSAgentPool proto.InternalMessageInfo

func (m *AKSCluster) Reset()      { *m = AKSCluster{} }
func (*AKSCluster) ProtoMessage() {}
func (*AKSCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{1}
}
func (m *AKSCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AKSCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AKSCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AKSCluster.Merge(m, src)
}
func (m *AKSCluster) XXX_Size() int {
	return m.Size()
}
func (m *AKSCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_AKSCluster.DiscardUnknown(m)
}

var xxx_messageInfo_AKSCluster proto.InternalMessageInfo

func (m *AKSInstance) Reset()      { *m = AKSInstance{} }
func (*AKSInstance) ProtoMessage() {}
func (*AKSInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{2}
}
func (m *AKSInstance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AKSInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AKSInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AKSInstance.Merge(m, src)
}
func (m *AKSInstance) XXX_Size() int {
	return m.Size()
}
func (m *AKSInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_AKSInstance.DiscardUnknown(m)
}

var xxx_messageInfo_AKSInstance proto.InternalMessageInfo

func (m *AKSInstanceLinuxConfiguration) Reset()      { *m = AKSInstanceLinuxConfiguration{} }
func (*AKSInstanceLinuxConfiguration) ProtoMessage() {}
func (*AKSInstanceLinuxConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{3}
}
func (m *AKSInstanceLinuxConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AKSInstanceLinuxConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AKSInstanceLinuxConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AKSInstanceLinuxConfiguration.Merge(m, src)
}
func (m *AKSInstanceLinuxConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *AKSInstanceLinuxConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_AKSInstanceLinuxConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_AKSInstanceLinuxConfiguration proto.InternalMessageInfo

func (m *AKSInstanceOSProfile) Reset()      { *m = AKSInstanceOSProfile{} }
func (*AKSInstanceOSProfile) ProtoMessage() {}
func (*AKSInstanceOSProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{4}
}
func (m *AKSInstanceOSProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AKSInstanceOSProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AKSInstanceOSProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AKSInstanceOSProfile.Merge(m, src)
}
func (m *AKSInstanceOSProfile) XXX_Size() int {
	return m.Size()
}
func (m *AKSInstanceOSProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_AKSInstanceOSProfile.DiscardUnknown(m)
}

var xxx_messageInfo_AKSInstanceOSProfile proto.InternalMessageInfo

func (m *AKSInstanceSKU) Reset()      { *m = AKSInstanceSKU{} }
func (*AKSInstanceSKU) ProtoMessage() {}
func (*AKSInstanceSKU) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{5}
}
func (m *AKSInstanceSKU) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AKSInstanceSKU) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AKSInstanceSKU) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AKSInstanceSKU.Merge(m, src)
}
func (m *AKSInstanceSKU) XXX_Size() int {
	return m.Size()
}
func (m *AKSInstanceSKU) XXX_DiscardUnknown() {
	xxx_messageInfo_AKSInstanceSKU.DiscardUnknown(m)
}

var xxx_messageInfo_AKSInstanceSKU proto.InternalMessageInfo

func (m *AKSInstanceWindowsConfiguration) Reset()      { *m = AKSInstanceWindowsConfiguration{} }
func (*AKSInstanceWindowsConfiguration) ProtoMessage() {}
func (*AKSInstanceWindowsConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{6}
}
func (m *AKSInstanceWindowsConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AKSInstanceWindowsConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AKSInstanceWindowsConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AKSInstanceWindowsConfiguration.Merge(m, src)
}
func (m *AKSInstanceWindowsConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *AKSInstanceWindowsConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_AKSInstanceWindowsConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_AKSInstanceWindowsConfiguration proto.InternalMessageInfo

func (m *AKSLinuxInstanceSSHKey) Reset()      { *m = AKSLinuxInstanceSSHKey{} }
func (*AKSLinuxInstanceSSHKey) ProtoMessage() {}
func (*AKSLinuxInstanceSSHKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{7}
}
func (m *AKSLinuxInstanceSSHKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AKSLinuxInstanceSSHKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AKSLinuxInstanceSSHKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AKSLinuxInstanceSSHKey.Merge(m, src)
}
func (m *AKSLinuxInstanceSSHKey) XXX_Size() int {
	return m.Size()
}
func (m *AKSLinuxInstanceSSHKey) XXX_DiscardUnknown() {
	xxx_messageInfo_AKSLinuxInstanceSSHKey.DiscardUnknown(m)
}

var xxx_messageInfo_AKSLinuxInstanceSSHKey proto.InternalMessageInfo

func (m *AKSLoadBalancerProfile) Reset()      { *m = AKSLoadBalancerProfile{} }
func (*AKSLoadBalancerProfile) ProtoMessage() {}
func (*AKSLoadBalancerProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{8}
}
func (m *AKSLoadBalancerProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AKSLoadBalancerProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AKSLoadBalancerProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AKSLoadBalancerProfile.Merge(m, src)
}
func (m *AKSLoadBalancerProfile) XXX_Size() int {
	return m.Size()
}
func (m *AKSLoadBalancerProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_AKSLoadBalancerProfile.DiscardUnknown(m)
}

var xxx_messageInfo_AKSLoadBalancerProfile proto.InternalMessageInfo

func (m *AKSNetwork) Reset()      { *m = AKSNetwork{} }
func (*AKSNetwork) ProtoMessage() {}
func (*AKSNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{9}
}
func (m *AKSNetwork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AKSNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AKSNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AKSNetwork.Merge(m, src)
}
func (m *AKSNetwork) XXX_Size() int {
	return m.Size()
}
func (m *AKSNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_AKSNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_AKSNetwork proto.InternalMessageInfo

func (m *AKSWindowsInstanceWinRMListener) Reset()      { *m = AKSWindowsInstanceWinRMListener{} }
func (*AKSWindowsInstanceWinRMListener) ProtoMessage() {}
func (*AKSWindowsInstanceWinRMListener) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{10}
}
func (m *AKSWindowsInstanceWinRMListener) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AKSWindowsInstanceWinRMListener) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AKSWindowsInstanceWinRMListener) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AKSWindowsInstanceWinRMListener.Merge(m, src)
}
func (m *AKSWindowsInstanceWinRMListener) XXX_Size() int {
	return m.Size()
}
func (m *AKSWindowsInstanceWinRMListener) XXX_DiscardUnknown() {
	xxx_messageInfo_AKSWindowsInstanceWinRMListener.DiscardUnknown(m)
}

var xxx_messageInfo_AKSWindowsInstanceWinRMListener proto.InternalMessageInfo

func (m *APIEndpoint) Reset()      { *m = APIEndpoint{} }
func (*APIEndpoint) ProtoMessage() {}
func (*APIEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{11}
}
func (m *APIEndpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEndpoint.Merge(m, src)
}
func (m *APIEndpoint) XXX_Size() int {
	return m.Size()
}
func (m *APIEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_APIEndpoint proto.InternalMessageInfo

func (m *AWSCloudProviderCredentials) Reset()      { *m = AWSCloudProviderCredentials{} }
func (*AWSCloudProviderCredentials) ProtoMessage() {}
func (*AWSCloudProviderCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{12}
}
func (m *AWSCloudProviderCredentials) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSCloudProviderCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSCloudProviderCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSCloudProviderCredentials.Merge(m, src)
}
func (m *AWSCloudProviderCredentials) XXX_Size() int {
	return m.Size()
}
func (m *AWSCloudProviderCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSCloudProviderCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_AWSCloudProviderCredentials proto.InternalMessageInfo

func (m *AWSCloudProviderSpec) Reset()      { *m = AWSCloudProviderSpec{} }
func (*AWSCloudProviderSpec) ProtoMessage() {}
func (*AWSCloudProviderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{13}
}
func (m *AWSCloudProviderSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSCloudProviderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSCloudProviderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSCloudProviderSpec.Merge(m, src)
}
func (m *AWSCloudProviderSpec) XXX_Size() int {
	return m.Size()
}
func (m *AWSCloudProviderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSCloudProviderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AWSCloudProviderSpec proto.InternalMessageInfo

func (m *AWSCluster) Reset()      { *m = AWSCluster{} }
func (*AWSCluster) ProtoMessage() {}
func (*AWSCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{14}
}
func (m *AWSCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSCluster.Merge(m, src)
}
func (m *AWSCluster) XXX_Size() int {
	return m.Size()
}
func (m *AWSCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSCluster.DiscardUnknown(m)
}

var xxx_messageInfo_AWSCluster proto.InternalMessageInfo

func (m *AWSScalingConfig) Reset()      { *m = AWSScalingConfig{} }
func (*AWSScalingConfig) ProtoMessage() {}
func (*AWSScalingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{15}
}
func (m *AWSScalingConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSScalingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSScalingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSScalingConfig.Merge(m, src)
}
func (m *AWSScalingConfig) XXX_Size() int {
	return m.Size()
}
func (m *AWSScalingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSScalingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AWSScalingConfig proto.InternalMessageInfo

func (m *AWSVPC) Reset()      { *m = AWSVPC{} }
func (*AWSVPC) ProtoMessage() {}
func (*AWSVPC) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{16}
}
func (m *AWSVPC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSVPC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSVPC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSVPC.Merge(m, src)
}
func (m *AWSVPC) XXX_Size() int {
	return m.Size()
}
func (m *AWSVPC) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSVPC.DiscardUnknown(m)
}

var xxx_messageInfo_AWSVPC proto.InternalMessageInfo

func (m *AddonsOpts) Reset()      { *m = AddonsOpts{} }
func (*AddonsOpts) ProtoMessage() {}
func (*AddonsOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{17}
}
func (m *AddonsOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddonsOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AddonsOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddonsOpts.Merge(m, src)
}
func (m *AddonsOpts) XXX_Size() int {
	return m.Size()
}
func (m *AddonsOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_AddonsOpts.DiscardUnknown(m)
}

var xxx_messageInfo_AddonsOpts proto.InternalMessageInfo

func (m *AppCatalogOpts) Reset()      { *m = AppCatalogOpts{} }
func (*AppCatalogOpts) ProtoMessage() {}
func (*AppCatalogOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{18}
}
func (m *AppCatalogOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppCatalogOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppCatalogOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppCatalogOpts.Merge(m, src)
}
func (m *AppCatalogOpts) XXX_Size() int {
	return m.Size()
}
func (m *AppCatalogOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_AppCatalogOpts.DiscardUnknown(m)
}

var xxx_messageInfo_AppCatalogOpts proto.InternalMessageInfo

func (m *Auth) Reset()      { *m = Auth{} }
func (*Auth) ProtoMessage() {}
func (*Auth) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{19}
}
func (m *Auth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Auth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auth.Merge(m, src)
}
func (m *Auth) XXX_Size() int {
	return m.Size()
}
func (m *Auth) XXX_DiscardUnknown() {
	xxx_messageInfo_Auth.DiscardUnknown(m)
}

var xxx_messageInfo_Auth proto.InternalMessageInfo

func (m *AzureCloudProviderCredentials) Reset()      { *m = AzureCloudProviderCredentials{} }
func (*AzureCloudProviderCredentials) ProtoMessage() {}
func (*AzureCloudProviderCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{20}
}
func (m *AzureCloudProviderCredentials) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureCloudProviderCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureCloudProviderCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureCloudProviderCredentials.Merge(m, src)
}
func (m *AzureCloudProviderCredentials) XXX_Size() int {
	return m.Size()
}
func (m *AzureCloudProviderCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureCloudProviderCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_AzureCloudProviderCredentials proto.InternalMessageInfo

func (m *AzureCloudProviderSpec) Reset()      { *m = AzureCloudProviderSpec{} }
func (*AzureCloudProviderSpec) ProtoMessage() {}
func (*AzureCloudProviderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{21}
}
func (m *AzureCloudProviderSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureCloudProviderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureCloudProviderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureCloudProviderSpec.Merge(m, src)
}
func (m *AzureCloudProviderSpec) XXX_Size() int {
	return m.Size()
}
func (m *AzureCloudProviderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureCloudProviderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AzureCloudProviderSpec proto.InternalMessageInfo

func (m *CNIOpts) Reset()      { *m = CNIOpts{} }
func (*CNIOpts) ProtoMessage() {}
func (*CNIOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{22}
}
func (m *CNIOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CNIOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CNIOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNIOpts.Merge(m, src)
}
func (m *CNIOpts) XXX_Size() int {
	return m.Size()
}
func (m *CNIOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CNIOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CNIOpts proto.InternalMessageInfo

func (m *CPUManagerOpts) Reset()      { *m = CPUManagerOpts{} }
func (*CPUManagerOpts) ProtoMessage() {}
func (*CPUManagerOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{23}
}
func (m *CPUManagerOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPUManagerOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CPUManagerOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPUManagerOpts.Merge(m, src)
}
func (m *CPUManagerOpts) XXX_Size() int {
	return m.Size()
}
func (m *CPUManagerOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CPUManagerOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CPUManagerOpts proto.InternalMessageInfo

func (m *CalicoOpts) Reset()      { *m = CalicoOpts{} }
func (*CalicoOpts) ProtoMessage() {}
func (*CalicoOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{24}
}
func (m *CalicoOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalicoOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CalicoOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalicoOpts.Merge(m, src)
}
func (m *CalicoOpts) XXX_Size() int {
	return m.Size()
}
func (m *CalicoOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CalicoOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CalicoOpts proto.InternalMessageInfo

func (m *CloudProvider) Reset()      { *m = CloudProvider{} }
func (*CloudProvider) ProtoMessage() {}
func (*CloudProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{25}
}
func (m *CloudProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CloudProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudProvider.Merge(m, src)
}
func (m *CloudProvider) XXX_Size() int {
	return m.Size()
}
func (m *CloudProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudProvider.DiscardUnknown(m)
}

var xxx_messageInfo_CloudProvider proto.InternalMessageInfo

func (m *CloudProviderList) Reset()      { *m = CloudProviderList{} }
func (*CloudProviderList) ProtoMessage() {}
func (*CloudProviderList) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{26}
}
func (m *CloudProviderList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudProviderList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CloudProviderList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudProviderList.Merge(m, src)
}
func (m *CloudProviderList) XXX_Size() int {
	return m.Size()
}
func (m *CloudProviderList) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudProviderList.DiscardUnknown(m)
}

var xxx_messageInfo_CloudProviderList proto.InternalMessageInfo

func (m *CloudProviderSpec) Reset()      { *m = CloudProviderSpec{} }
func (*CloudProviderSpec) ProtoMessage() {}
func (*CloudProviderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{27}
}
func (m *CloudProviderSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudProviderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CloudProviderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudProviderSpec.Merge(m, src)
}
func (m *CloudProviderSpec) XXX_Size() int {
	return m.Size()
}
func (m *CloudProviderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudProviderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CloudProviderSpec proto.InternalMessageInfo

func (m *CloudProviderStatus) Reset()      { *m = CloudProviderStatus{} }
func (*CloudProviderStatus) ProtoMessage() {}
func (*CloudProviderStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{28}
}
func (m *CloudProviderStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudProviderStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CloudProviderStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudProviderStatus.Merge(m, src)
}
func (m *CloudProviderStatus) XXX_Size() int {
	return m.Size()
}
func (m *CloudProviderStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudProviderStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CloudProviderStatus proto.InternalMessageInfo

func (m *Cluster) Reset()      { *m = Cluster{} }
func (*Cluster) ProtoMessage() {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{29}
}
func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(m, src)
}
func (m *Cluster) XXX_Size() int {
	return m.Size()
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *ClusterAddon) Reset()      { *m = ClusterAddon{} }
func (*ClusterAddon) ProtoMessage() {}
func (*ClusterAddon) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{30}
}
func (m *ClusterAddon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterAddon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterAddon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterAddon.Merge(m, src)
}
func (m *ClusterAddon) XXX_Size() int {
	return m.Size()
}
func (m *ClusterAddon) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterAddon.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterAddon proto.InternalMessageInfo

func (m *ClusterAddonList) Reset()      { *m = ClusterAddonList{} }
func (*ClusterAddonList) ProtoMessage() {}
func (*ClusterAddonList) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{31}
}
func (m *ClusterAddonList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterAddonList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterAddonList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterAddonList.Merge(m, src)
}
func (m *ClusterAddonList) XXX_Size() int {
	return m.Size()
}
func (m *ClusterAddonList) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterAddonList.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterAddonList proto.InternalMessageInfo

func (m *ClusterAddonSpec) Reset()      { *m = ClusterAddonSpec{} }
func (*ClusterAddonSpec) ProtoMessage() {}
func (*ClusterAddonSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{32}
}
func (m *ClusterAddonSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterAddonSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterAddonSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterAddonSpec.Merge(m, src)
}
func (m *ClusterAddonSpec) XXX_Size() int {
	return m.Size()
}
func (m *ClusterAddonSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterAddonSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterAddonSpec proto.InternalMessageInfo

func (m *ClusterAddonStatus) Reset()      { *m = ClusterAddonStatus{} }
func (*ClusterAddonStatus) ProtoMessage() {}
func (*ClusterAddonStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{33}
}
func (m *ClusterAddonStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterAddonStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterAddonStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterAddonStatus.Merge(m, src)
}
func (m *ClusterAddonStatus) XXX_Size() int {
	return m.Size()
}
func (m *ClusterAddonStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterAddonStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterAddonStatus proto.InternalMessageInfo

func (m *ClusterAutoScalerOpts) Reset()      { *m = ClusterAutoScalerOpts{} }
func (*ClusterAutoScalerOpts) ProtoMessage() {}
func (*ClusterAutoScalerOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{34}
}
func (m *ClusterAutoScalerOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterAutoScalerOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterAutoScalerOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterAutoScalerOpts.Merge(m, src)
}
func (m *ClusterAutoScalerOpts) XXX_Size() int {
	return m.Size()
}
func (m *ClusterAutoScalerOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterAutoScalerOpts.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterAutoScalerOpts proto.InternalMessageInfo

func (m *ClusterList) Reset()      { *m = ClusterList{} }
func (*ClusterList) ProtoMessage() {}
func (*ClusterList) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{35}
}
func (m *ClusterList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterList.Merge(m, src)
}
func (m *ClusterList) XXX_Size() int {
	return m.Size()
}
func (m *ClusterList) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterList.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterList proto.InternalMessageInfo

func (m *ClusterNetwork) Reset()      { *m = ClusterNetwork{} }
func (*ClusterNetwork) ProtoMessage() {}
func (*ClusterNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{36}
}
func (m *ClusterNetwork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterNetwork.Merge(m, src)
}
func (m *ClusterNetwork) XXX_Size() int {
	return m.Size()
}
func (m *ClusterNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterNetwork proto.InternalMessageInfo

func (m *ClusterProfile) Reset()      { *m = ClusterProfile{} }
func (*ClusterProfile) ProtoMessage() {}
func (*ClusterProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{37}
}
func (m *ClusterProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterProfile.Merge(m, src)
}
func (m *ClusterProfile) XXX_Size() int {
	return m.Size()
}
func (m *ClusterProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterProfile.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterProfile proto.InternalMessageInfo

func (m *ClusterProfileBinding) Reset()      { *m = ClusterProfileBinding{} }
func (*ClusterProfileBinding) ProtoMessage() {}
func (*ClusterProfileBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{38}
}
func (m *ClusterProfileBinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterProfileBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterProfileBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterProfileBinding.Merge(m, src)
}
func (m *ClusterProfileBinding) XXX_Size() int {
	return m.Size()
}
func (m *ClusterProfileBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterProfileBinding.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterProfileBinding proto.InternalMessageInfo

func (m *ClusterProfileBindingDetail) Reset()      { *m = ClusterProfileBindingDetail{} }
func (*ClusterProfileBindingDetail) ProtoMessage() {}
func (*ClusterProfileBindingDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{39}
}
func (m *ClusterProfileBindingDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterProfileBindingDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterProfileBindingDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterProfileBindingDetail.Merge(m, src)
}
func (m *ClusterProfileBindingDetail) XXX_Size() int {
	return m.Size()
}
func (m *ClusterProfileBindingDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterProfileBindingDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterProfileBindingDetail proto.InternalMessageInfo

func (m *ClusterProfileBindingList) Reset()      { *m = ClusterProfileBindingList{} }
func (*ClusterProfileBindingList) ProtoMessage() {}
func (*ClusterProfileBindingList) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{40}
}
func (m *ClusterProfileBindingList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterProfileBindingList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterProfileBindingList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterProfileBindingList.Merge(m, src)
}
func (m *ClusterProfileBindingList) XXX_Size() int {
	return m.Size()
}
func (m *ClusterProfileBindingList) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterProfileBindingList.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterProfileBindingList proto.InternalMessageInfo

func (m *ClusterProfileBindingSpec) Reset()      { *m = ClusterProfileBindingSpec{} }
func (*ClusterProfileBindingSpec) ProtoMessage() {}
func (*ClusterProfileBindingSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{41}
}
func (m *ClusterProfileBindingSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterProfileBindingSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterProfileBindingSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterProfileBindingSpec.Merge(m, src)
}
func (m *ClusterProfileBindingSpec) XXX_Size() int {
	return m.Size()
}
func (m *ClusterProfileBindingSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterProfileBindingSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterProfileBindingSpec proto.InternalMessageInfo

func (m *ClusterProfileBindingStatus) Reset()      { *m = ClusterProfileBindingStatus{} }
func (*ClusterProfileBindingStatus) ProtoMessage() {}
func (*ClusterProfileBindingStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{42}
}
func (m *ClusterProfileBindingStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterProfileBindingStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterProfileBindingStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterProfileBindingStatus.Merge(m, src)
}
func (m *ClusterProfileBindingStatus) XXX_Size() int {
	return m.Size()
}
func (m *ClusterProfileBindingStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterProfileBindingStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterProfileBindingStatus proto.InternalMessageInfo

func (m *ClusterProfileDetail) Reset()      { *m = ClusterProfileDetail{} }
func (*ClusterProfileDetail) ProtoMessage() {}
func (*ClusterProfileDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{43}
}
func (m *ClusterProfileDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterProfileDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterProfileDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterProfileDetail.Merge(m, src)
}
func (m *ClusterProfileDetail) XXX_Size() int {
	return m.Size()
}
func (m *ClusterProfileDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterProfileDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterProfileDetail proto.InternalMessageInfo

func (m *ClusterProfileList) Reset()      { *m = ClusterProfileList{} }
func (*ClusterProfileList) ProtoMessage() {}
func (*ClusterProfileList) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{44}
}
func (m *ClusterProfileList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterProfileList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterProfileList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterProfileList.Merge(m, src)
}
func (m *ClusterProfileList) XXX_Size() int {
	return m.Size()
}
func (m *ClusterProfileList) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterProfileList.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterProfileList proto.InternalMessageInfo

func (m *ClusterProfileSpec) Reset()      { *m = ClusterProfileSpec{} }
func (*ClusterProfileSpec) ProtoMessage() {}
func (*ClusterProfileSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{45}
}
func (m *ClusterProfileSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterProfileSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterProfileSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterProfileSpec.Merge(m, src)
}
func (m *ClusterProfileSpec) XXX_Size() int {
	return m.Size()
}
func (m *ClusterProfileSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterProfileSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterProfileSpec proto.InternalMessageInfo

func (m *ClusterProfileStatus) Reset()      { *m = ClusterProfileStatus{} }
func (*ClusterProfileStatus) ProtoMessage() {}
func (*ClusterProfileStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{46}
}
func (m *ClusterProfileStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterProfileStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterProfileStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterProfileStatus.Merge(m, src)
}
func (m *ClusterProfileStatus) XXX_Size() int {
	return m.Size()
}
func (m *ClusterProfileStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterProfileStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterProfileStatus proto.InternalMessageInfo

func (m *ClusterSpec) Reset()      { *m = ClusterSpec{} }
func (*ClusterSpec) ProtoMessage() {}
func (*ClusterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{47}
}
func (m *ClusterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterSpec.Merge(m, src)
}
func (m *ClusterSpec) XXX_Size() int {
	return m.Size()
}
func (m *ClusterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterSpec proto.InternalMessageInfo

func (m *ClusterStatus) Reset()      { *m = ClusterStatus{} }
func (*ClusterStatus) ProtoMessage() {}
func (*ClusterStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{48}
}
func (m *ClusterStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterStatus.Merge(m, src)
}
func (m *ClusterStatus) XXX_Size() int {
	return m.Size()
}
func (m *ClusterStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterStatus proto.InternalMessageInfo

func (m *Condition) Reset()      { *m = Condition{} }
func (*Condition) ProtoMessage() {}
func (*Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{49}
}
func (m *Condition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Condition.Merge(m, src)
}
func (m *Condition) XXX_Size() int {
	return m.Size()
}
func (m *Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Condition proto.InternalMessageInfo

func (m *ContainerRuntime) Reset()      { *m = ContainerRuntime{} }
func (*ContainerRuntime) ProtoMessage() {}
func (*ContainerRuntime) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{50}
}
func (m *ContainerRuntime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerRuntime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ContainerRuntime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerRuntime.Merge(m, src)
}
func (m *ContainerRuntime) XXX_Size() int {
	return m.Size()
}
func (m *ContainerRuntime) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerRuntime.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerRuntime proto.InternalMessageInfo

func (m *DockerOpts) Reset()      { *m = DockerOpts{} }
func (*DockerOpts) ProtoMessage() {}
func (*DockerOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{51}
}
func (m *DockerOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DockerOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DockerOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerOpts.Merge(m, src)
}
func (m *DockerOpts) XXX_Size() int {
	return m.Size()
}
func (m *DockerOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerOpts.DiscardUnknown(m)
}

var xxx_messageInfo_DockerOpts proto.InternalMessageInfo

func (m *EC2Instance) Reset()      { *m = EC2Instance{} }
func (*EC2Instance) ProtoMessage() {}
func (*EC2Instance) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{52}
}
func (m *EC2Instance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EC2Instance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EC2Instance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EC2Instance.Merge(m, src)
}
func (m *EC2Instance) XXX_Size() int {
	return m.Size()
}
func (m *EC2Instance) XXX_DiscardUnknown() {
	xxx_messageInfo_EC2Instance.DiscardUnknown(m)
}

var xxx_messageInfo_EC2Instance proto.InternalMessageInfo

func (m *EC2InstanceNetwork) Reset()      { *m = EC2InstanceNetwork{} }
func (*EC2InstanceNetwork) ProtoMessage() {}
func (*EC2InstanceNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{53}
}
func (m *EC2InstanceNetwork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EC2InstanceNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EC2InstanceNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EC2InstanceNetwork.Merge(m, src)
}
func (m *EC2InstanceNetwork) XXX_Size() int {
	return m.Size()
}
func (m *EC2InstanceNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_EC2InstanceNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_EC2InstanceNetwork proto.InternalMessageInfo

func (m *EKSCluster) Reset()      { *m = EKSCluster{} }
func (*EKSCluster) ProtoMessage() {}
func (*EKSCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{54}
}
func (m *EKSCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EKSCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EKSCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EKSCluster.Merge(m, src)
}
func (m *EKSCluster) XXX_Size() int {
	return m.Size()
}
func (m *EKSCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_EKSCluster.DiscardUnknown(m)
}

var xxx_messageInfo_EKSCluster proto.InternalMessageInfo

func (m *EKSClusterLogging) Reset()      { *m = EKSClusterLogging{} }
func (*EKSClusterLogging) ProtoMessage() {}
func (*EKSClusterLogging) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{55}
}
func (m *EKSClusterLogging) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EKSClusterLogging) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EKSClusterLogging) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EKSClusterLogging.Merge(m, src)
}
func (m *EKSClusterLogging) XXX_Size() int {
	return m.Size()
}
func (m *EKSClusterLogging) XXX_DiscardUnknown() {
	xxx_messageInfo_EKSClusterLogging.DiscardUnknown(m)
}

var xxx_messageInfo_EKSClusterLogging proto.InternalMessageInfo

func (m *EKSLogging) Reset()      { *m = EKSLogging{} }
func (*EKSLogging) ProtoMessage() {}
func (*EKSLogging) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{56}
}
func (m *EKSLogging) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EKSLogging) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EKSLogging) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EKSLogging.Merge(m, src)
}
func (m *EKSLogging) XXX_Size() int {
	return m.Size()
}
func (m *EKSLogging) XXX_DiscardUnknown() {
	xxx_messageInfo_EKSLogging.DiscardUnknown(m)
}

var xxx_messageInfo_EKSLogging proto.InternalMessageInfo

func (m *EKSNetwork) Reset()      { *m = EKSNetwork{} }
func (*EKSNetwork) ProtoMessage() {}
func (*EKSNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{57}
}
func (m *EKSNetwork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EKSNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EKSNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EKSNetwork.Merge(m, src)
}
func (m *EKSNetwork) XXX_Size() int {
	return m.Size()
}
func (m *EKSNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_EKSNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_EKSNetwork proto.InternalMessageInfo

func (m *EKSNodeGroup) Reset()      { *m = EKSNodeGroup{} }
func (*EKSNodeGroup) ProtoMessage() {}
func (*EKSNodeGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{58}
}
func (m *EKSNodeGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EKSNodeGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EKSNodeGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EKSNodeGroup.Merge(m, src)
}
func (m *EKSNodeGroup) XXX_Size() int {
	return m.Size()
}
func (m *EKSNodeGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EKSNodeGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EKSNodeGroup proto.InternalMessageInfo

func (m *EtcdOpts) Reset()      { *m = EtcdOpts{} }
func (*EtcdOpts) ProtoMessage() {}
func (*EtcdOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{59}
}
func (m *EtcdOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EtcdOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EtcdOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EtcdOpts.Merge(m, src)
}
func (m *EtcdOpts) XXX_Size() int {
	return m.Size()
}
func (m *EtcdOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_EtcdOpts.DiscardUnknown(m)
}

var xxx_messageInfo_EtcdOpts proto.InternalMessageInfo

func (m *FlannelOpts) Reset()      { *m = FlannelOpts{} }
func (*FlannelOpts) ProtoMessage() {}
func (*FlannelOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{60}
}
func (m *FlannelOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlannelOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FlannelOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlannelOpts.Merge(m, src)
}
func (m *FlannelOpts) XXX_Size() int {
	return m.Size()
}
func (m *FlannelOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_FlannelOpts.DiscardUnknown(m)
}

var xxx_messageInfo_FlannelOpts proto.InternalMessageInfo

func (m *GKECluster) Reset()      { *m = GKECluster{} }
func (*GKECluster) ProtoMessage() {}
func (*GKECluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{61}
}
func (m *GKECluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GKECluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GKECluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GKECluster.Merge(m, src)
}
func (m *GKECluster) XXX_Size() int {
	return m.Size()
}
func (m *GKECluster) XXX_DiscardUnknown() {
	xxx_messageInfo_GKECluster.DiscardUnknown(m)
}

var xxx_messageInfo_GKECluster proto.InternalMessageInfo

func (m *GKEClusterNetwork) Reset()      { *m = GKEClusterNetwork{} }
func (*GKEClusterNetwork) ProtoMessage() {}
func (*GKEClusterNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{62}
}
func (m *GKEClusterNetwork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GKEClusterNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GKEClusterNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GKEClusterNetwork.Merge(m, src)
}
func (m *GKEClusterNetwork) XXX_Size() int {
	return m.Size()
}
func (m *GKEClusterNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_GKEClusterNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_GKEClusterNetwork proto.InternalMessageInfo

func (m *GKEInstance) Reset()      { *m = GKEInstance{} }
func (*GKEInstance) ProtoMessage() {}
func (*GKEInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{63}
}
func (m *GKEInstance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GKEInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GKEInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GKEInstance.Merge(m, src)
}
func (m *GKEInstance) XXX_Size() int {
	return m.Size()
}
func (m *GKEInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_GKEInstance.DiscardUnknown(m)
}

var xxx_messageInfo_GKEInstance proto.InternalMessageInfo

func (m *GKENodePool) Reset()      { *m = GKENodePool{} }
func (*GKENodePool) ProtoMessage() {}
func (*GKENodePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{64}
}
func (m *GKENodePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GKENodePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GKENodePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GKENodePool.Merge(m, src)
}
func (m *GKENodePool) XXX_Size() int {
	return m.Size()
}
func (m *GKENodePool) XXX_DiscardUnknown() {
	xxx_messageInfo_GKENodePool.DiscardUnknown(m)
}

var xxx_messageInfo_GKENodePool proto.InternalMessageInfo

func (m *HA) Reset()      { *m = HA{} }
func (*HA) ProtoMessage() {}
func (*HA) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{65}
}
func (m *HA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HA.Merge(m, src)
}
func (m *HA) XXX_Size() int {
	return m.Size()
}
func (m *HA) XXX_DiscardUnknown() {
	xxx_messageInfo_HA.DiscardUnknown(m)
}

var xxx_messageInfo_HA proto.InternalMessageInfo

func (m *Host) Reset()      { *m = Host{} }
func (*Host) ProtoMessage() {}
func (*Host) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{66}
}
func (m *Host) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Host) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Host) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host.Merge(m, src)
}
func (m *Host) XXX_Size() int {
	return m.Size()
}
func (m *Host) XXX_DiscardUnknown() {
	xxx_messageInfo_Host.DiscardUnknown(m)
}

var xxx_messageInfo_Host proto.InternalMessageInfo

func (m *HostList) Reset()      { *m = HostList{} }
func (*HostList) ProtoMessage() {}
func (*HostList) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{67}
}
func (m *HostList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HostList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostList.Merge(m, src)
}
func (m *HostList) XXX_Size() int {
	return m.Size()
}
func (m *HostList) XXX_DiscardUnknown() {
	xxx_messageInfo_HostList.DiscardUnknown(m)
}

var xxx_messageInfo_HostList proto.InternalMessageInfo

func (m *HostPhase) Reset()      { *m = HostPhase{} }
func (*HostPhase) ProtoMessage() {}
func (*HostPhase) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{68}
}
func (m *HostPhase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostPhase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HostPhase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostPhase.Merge(m, src)
}
func (m *HostPhase) XXX_Size() int {
	return m.Size()
}
func (m *HostPhase) XXX_DiscardUnknown() {
	xxx_messageInfo_HostPhase.DiscardUnknown(m)
}

var xxx_messageInfo_HostPhase proto.InternalMessageInfo

func (m *HostSpec) Reset()      { *m = HostSpec{} }
func (*HostSpec) ProtoMessage() {}
func (*HostSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{69}
}
func (m *HostSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HostSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostSpec.Merge(m, src)
}
func (m *HostSpec) XXX_Size() int {
	return m.Size()
}
func (m *HostSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_HostSpec.DiscardUnknown(m)
}

var xxx_messageInfo_HostSpec proto.InternalMessageInfo

func (m *HostStatus) Reset()      { *m = HostStatus{} }
func (*HostStatus) ProtoMessage() {}
func (*HostStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{70}
}
func (m *HostStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HostStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostStatus.Merge(m, src)
}
func (m *HostStatus) XXX_Size() int {
	return m.Size()
}
func (m *HostStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_HostStatus.DiscardUnknown(m)
}

var xxx_messageInfo_HostStatus proto.InternalMessageInfo

func (m *KeepalivedOpts) Reset()      { *m = KeepalivedOpts{} }
func (*KeepalivedOpts) ProtoMessage() {}
func (*KeepalivedOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{71}
}
func (m *KeepalivedOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeepalivedOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KeepalivedOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepalivedOpts.Merge(m, src)
}
func (m *KeepalivedOpts) XXX_Size() int {
	return m.Size()
}
func (m *KeepalivedOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepalivedOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KeepalivedOpts proto.InternalMessageInfo

func (m *KeystoneOpts) Reset()      { *m = KeystoneOpts{} }
func (*KeystoneOpts) ProtoMessage() {}
func (*KeystoneOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{72}
}
func (m *KeystoneOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeystoneOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KeystoneOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeystoneOpts.Merge(m, src)
}
func (m *KeystoneOpts) XXX_Size() int {
	return m.Size()
}
func (m *KeystoneOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KeystoneOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KeystoneOpts proto.InternalMessageInfo

func (m *KubeApiserverOpts) Reset()      { *m = KubeApiserverOpts{} }
func (*KubeApiserverOpts) ProtoMessage() {}
func (*KubeApiserverOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{73}
}
func (m *KubeApiserverOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeApiserverOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeApiserverOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeApiserverOpts.Merge(m, src)
}
func (m *KubeApiserverOpts) XXX_Size() int {
	return m.Size()
}
func (m *KubeApiserverOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeApiserverOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KubeApiserverOpts proto.InternalMessageInfo

func (m *KubeControllerManagerOpts) Reset()      { *m = KubeControllerManagerOpts{} }
func (*KubeControllerManagerOpts) ProtoMessage() {}
func (*KubeControllerManagerOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{74}
}
func (m *KubeControllerManagerOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeControllerManagerOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeControllerManagerOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeControllerManagerOpts.Merge(m, src)
}
func (m *KubeControllerManagerOpts) XXX_Size() int {
	return m.Size()
}
func (m *KubeControllerManagerOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeControllerManagerOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KubeControllerManagerOpts proto.InternalMessageInfo

func (m *KubeProxyOpts) Reset()      { *m = KubeProxyOpts{} }
func (*KubeProxyOpts) ProtoMessage() {}
func (*KubeProxyOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{75}
}
func (m *KubeProxyOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeProxyOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeProxyOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeProxyOpts.Merge(m, src)
}
func (m *KubeProxyOpts) XXX_Size() int {
	return m.Size()
}
func (m *KubeProxyOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeProxyOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KubeProxyOpts proto.InternalMessageInfo

func (m *KubeSchedulerOpts) Reset()      { *m = KubeSchedulerOpts{} }
func (*KubeSchedulerOpts) ProtoMessage() {}
func (*KubeSchedulerOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{76}
}
func (m *KubeSchedulerOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeSchedulerOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeSchedulerOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeSchedulerOpts.Merge(m, src)
}
func (m *KubeSchedulerOpts) XXX_Size() int {
	return m.Size()
}
func (m *KubeSchedulerOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeSchedulerOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KubeSchedulerOpts proto.InternalMessageInfo

func (m *KubeVirtOpts) Reset()      { *m = KubeVirtOpts{} }
func (*KubeVirtOpts) ProtoMessage() {}
func (*KubeVirtOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{77}
}
func (m *KubeVirtOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeVirtOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeVirtOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeVirtOpts.Merge(m, src)
}
func (m *KubeVirtOpts) XXX_Size() int {
	return m.Size()
}
func (m *KubeVirtOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeVirtOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KubeVirtOpts proto.InternalMessageInfo

func (m *KubeletOpts) Reset()      { *m = KubeletOpts{} }
func (*KubeletOpts) ProtoMessage() {}
func (*KubeletOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{78}
}
func (m *KubeletOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeletOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeletOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeletOpts.Merge(m, src)
}
func (m *KubeletOpts) XXX_Size() int {
	return m.Size()
}
func (m *KubeletOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeletOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KubeletOpts proto.InternalMessageInfo

func (m *LoadBalancer) Reset()      { *m = LoadBalancer{} }
func (*LoadBalancer) ProtoMessage() {}
func (*LoadBalancer) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{79}
}
func (m *LoadBalancer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadBalancer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LoadBalancer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadBalancer.Merge(m, src)
}
func (m *LoadBalancer) XXX_Size() int {
	return m.Size()
}
func (m *LoadBalancer) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadBalancer.DiscardUnknown(m)
}

var xxx_messageInfo_LoadBalancer proto.InternalMessageInfo

func (m *LocalCloudProviderSpec) Reset()      { *m = LocalCloudProviderSpec{} }
func (*LocalCloudProviderSpec) ProtoMessage() {}
func (*LocalCloudProviderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{80}
}
func (m *LocalCloudProviderSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalCloudProviderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LocalCloudProviderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalCloudProviderSpec.Merge(m, src)
}
func (m *LocalCloudProviderSpec) XXX_Size() int {
	return m.Size()
}
func (m *LocalCloudProviderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalCloudProviderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_LocalCloudProviderSpec proto.InternalMessageInfo

func (m *LuigiOpts) Reset()      { *m = LuigiOpts{} }
func (*LuigiOpts) ProtoMessage() {}
func (*LuigiOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{81}
}
func (m *LuigiOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LuigiOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LuigiOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LuigiOpts.Merge(m, src)
}
func (m *LuigiOpts) XXX_Size() int {
	return m.Size()
}
func (m *LuigiOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_LuigiOpts.DiscardUnknown(m)
}

var xxx_messageInfo_LuigiOpts proto.InternalMessageInfo

func (m *MetalLBOpts) Reset()      { *m = MetalLBOpts{} }
func (*MetalLBOpts) ProtoMessage() {}
func (*MetalLBOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{82}
}
func (m *MetalLBOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetalLBOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MetalLBOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetalLBOpts.Merge(m, src)
}
func (m *MetalLBOpts) XXX_Size() int {
	return m.Size()
}
func (m *MetalLBOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_MetalLBOpts.DiscardUnknown(m)
}

var xxx_messageInfo_MetalLBOpts proto.InternalMessageInfo

func (m *NodeletStatus) Reset()      { *m = NodeletStatus{} }
func (*NodeletStatus) ProtoMessage() {}
func (*NodeletStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{83}
}
func (m *NodeletStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeletStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeletStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeletStatus.Merge(m, src)
}
func (m *NodeletStatus) XXX_Size() int {
	return m.Size()
}
func (m *NodeletStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeletStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NodeletStatus proto.InternalMessageInfo

func (m *Override) Reset()      { *m = Override{} }
func (*Override) ProtoMessage() {}
func (*Override) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{84}
}
func (m *Override) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Override) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Override) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Override.Merge(m, src)
}
func (m *Override) XXX_Size() int {
	return m.Size()
}
func (m *Override) XXX_DiscardUnknown() {
	xxx_messageInfo_Override.DiscardUnknown(m)
}

var xxx_messageInfo_Override proto.InternalMessageInfo

func (m *PF9) Reset()      { *m = PF9{} }
func (*PF9) ProtoMessage() {}
func (*PF9) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{85}
}
func (m *PF9) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PF9) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PF9) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PF9.Merge(m, src)
}
func (m *PF9) XXX_Size() int {
	return m.Size()
}
func (m *PF9) XXX_DiscardUnknown() {
	xxx_messageInfo_PF9.DiscardUnknown(m)
}

var xxx_messageInfo_PF9 proto.InternalMessageInfo

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{86}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *ProfileAgentOpts) Reset()      { *m = ProfileAgentOpts{} }
func (*ProfileAgentOpts) ProtoMessage() {}
func (*ProfileAgentOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{87}
}
func (m *ProfileAgentOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileAgentOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProfileAgentOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileAgentOpts.Merge(m, src)
}
func (m *ProfileAgentOpts) XXX_Size() int {
	return m.Size()
}
func (m *ProfileAgentOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileAgentOpts.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileAgentOpts proto.InternalMessageInfo

func (m *Region) Reset()      { *m = Region{} }
func (*Region) ProtoMessage() {}
func (*Region) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{88}
}
func (m *Region) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Region) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Region) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Region.Merge(m, src)
}
func (m *Region) XXX_Size() int {
	return m.Size()
}
func (m *Region) XXX_DiscardUnknown() {
	xxx_messageInfo_Region.DiscardUnknown(m)
}

var xxx_messageInfo_Region proto.InternalMessageInfo

func (m *StorageBackend) Reset()      { *m = StorageBackend{} }
func (*StorageBackend) ProtoMessage() {}
func (*StorageBackend) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb02d94e344fb008, []int{89}
}
func (m *StorageBackend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageBackend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StorageBackend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageBackend.Merge(m, src)
}
func (m *StorageBackend) XXX_Size() int {
	return m.Size()
}
func (m *StorageBackend) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageBackend.DiscardUnknown(m)
}

var xxx_messageInfo_StorageBackend proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AKSAgentPool)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AKSAgentPool")
	proto.RegisterMapType((map[string]string)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AKSAgentPool.LabelsEntry")
	proto.RegisterType((*AKSCluster)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AKSCluster")
	proto.RegisterMapType((map[string]string)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AKSCluster.TagsEntry")
	proto.RegisterType((*AKSInstance)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AKSInstance")
	proto.RegisterMapType((map[string]string)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AKSInstance.TagsEntry")
	proto.RegisterType((*AKSInstanceLinuxConfiguration)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AKSInstanceLinuxConfiguration")
	proto.RegisterType((*AKSInstanceOSProfile)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AKSInstanceOSProfile")
	proto.RegisterType((*AKSInstanceSKU)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AKSInstanceSKU")
	proto.RegisterType((*AKSInstanceWindowsConfiguration)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AKSInstanceWindowsConfiguration")
	proto.RegisterType((*AKSLinuxInstanceSSHKey)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AKSLinuxInstanceSSHKey")
	proto.RegisterType((*AKSLoadBalancerProfile)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AKSLoadBalancerProfile")
	proto.RegisterType((*AKSNetwork)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AKSNetwork")
	proto.RegisterType((*AKSWindowsInstanceWinRMListener)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AKSWindowsInstanceWinRMListener")
	proto.RegisterType((*APIEndpoint)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.APIEndpoint")
	proto.RegisterType((*AWSCloudProviderCredentials)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AWSCloudProviderCredentials")
	proto.RegisterType((*AWSCloudProviderSpec)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AWSCloudProviderSpec")
	proto.RegisterType((*AWSCluster)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AWSCluster")
	proto.RegisterType((*AWSScalingConfig)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AWSScalingConfig")
	proto.RegisterType((*AWSVPC)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AWSVPC")
	proto.RegisterType((*AddonsOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AddonsOpts")
	proto.RegisterType((*AppCatalogOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AppCatalogOpts")
	proto.RegisterType((*Auth)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.Auth")
	proto.RegisterType((*AzureCloudProviderCredentials)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AzureCloudProviderCredentials")
	proto.RegisterType((*AzureCloudProviderSpec)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.AzureCloudProviderSpec")
	proto.RegisterType((*CNIOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.CNIOpts")
	proto.RegisterType((*CPUManagerOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.CPUManagerOpts")
	proto.RegisterType((*CalicoOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.CalicoOpts")
	proto.RegisterType((*CloudProvider)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.CloudProvider")
	proto.RegisterType((*CloudProviderList)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.CloudProviderList")
	proto.RegisterType((*CloudProviderSpec)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.CloudProviderSpec")
	proto.RegisterType((*CloudProviderStatus)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.CloudProviderStatus")
	proto.RegisterType((*Cluster)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.Cluster")
	proto.RegisterType((*ClusterAddon)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterAddon")
	proto.RegisterType((*ClusterAddonList)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterAddonList")
	proto.RegisterType((*ClusterAddonSpec)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterAddonSpec")
	proto.RegisterType((*ClusterAddonStatus)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterAddonStatus")
	proto.RegisterType((*ClusterAutoScalerOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterAutoScalerOpts")
	proto.RegisterType((*ClusterList)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterList")
	proto.RegisterType((*ClusterNetwork)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterNetwork")
	proto.RegisterType((*ClusterProfile)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterProfile")
	proto.RegisterType((*ClusterProfileBinding)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterProfileBinding")
	proto.RegisterType((*ClusterProfileBindingDetail)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterProfileBindingDetail")
	proto.RegisterType((*ClusterProfileBindingList)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterProfileBindingList")
	proto.RegisterType((*ClusterProfileBindingSpec)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterProfileBindingSpec")
	proto.RegisterType((*ClusterProfileBindingStatus)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterProfileBindingStatus")
	proto.RegisterType((*ClusterProfileDetail)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterProfileDetail")
	proto.RegisterType((*ClusterProfileList)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterProfileList")
	proto.RegisterType((*ClusterProfileSpec)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterProfileSpec")
	proto.RegisterType((*ClusterProfileStatus)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterProfileStatus")
	proto.RegisterType((*ClusterSpec)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterSpec")
	proto.RegisterType((*ClusterStatus)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ClusterStatus")
	proto.RegisterType((*Condition)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.Condition")
	proto.RegisterType((*ContainerRuntime)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ContainerRuntime")
	proto.RegisterType((*DockerOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.DockerOpts")
	proto.RegisterType((*EC2Instance)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.EC2Instance")
	proto.RegisterType((*EC2InstanceNetwork)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.EC2InstanceNetwork")
	proto.RegisterType((*EKSCluster)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.EKSCluster")
	proto.RegisterMapType((map[string]string)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.EKSCluster.TagsEntry")
	proto.RegisterType((*EKSClusterLogging)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.EKSClusterLogging")
	proto.RegisterType((*EKSLogging)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.EKSLogging")
	proto.RegisterType((*EKSNetwork)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.EKSNetwork")
	proto.RegisterType((*EKSNodeGroup)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.EKSNodeGroup")
	proto.RegisterMapType((map[string]string)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.EKSNodeGroup.LabelsEntry")
	proto.RegisterMapType((map[string]string)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.EKSNodeGroup.TagsEntry")
	proto.RegisterType((*EtcdOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.EtcdOpts")
	proto.RegisterType((*FlannelOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.FlannelOpts")
	proto.RegisterType((*GKECluster)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.GKECluster")
	proto.RegisterType((*GKEClusterNetwork)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.GKEClusterNetwork")
	proto.RegisterType((*GKEInstance)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.GKEInstance")
	proto.RegisterType((*GKENodePool)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.GKENodePool")
	proto.RegisterType((*HA)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.HA")
	proto.RegisterType((*Host)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.Host")
	proto.RegisterType((*HostList)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.HostList")
	proto.RegisterType((*HostPhase)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.HostPhase")
	proto.RegisterType((*HostSpec)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.HostSpec")
	proto.RegisterType((*HostStatus)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.HostStatus")
	proto.RegisterType((*KeepalivedOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.KeepalivedOpts")
	proto.RegisterType((*KeystoneOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.KeystoneOpts")
	proto.RegisterType((*KubeApiserverOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.KubeApiserverOpts")
	proto.RegisterType((*KubeControllerManagerOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.KubeControllerManagerOpts")
	proto.RegisterType((*KubeProxyOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.KubeProxyOpts")
	proto.RegisterType((*KubeSchedulerOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.KubeSchedulerOpts")
	proto.RegisterType((*KubeVirtOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.KubeVirtOpts")
	proto.RegisterType((*KubeletOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.KubeletOpts")
	proto.RegisterType((*LoadBalancer)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.LoadBalancer")
	proto.RegisterType((*LocalCloudProviderSpec)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.LocalCloudProviderSpec")
	proto.RegisterType((*LuigiOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.LuigiOpts")
	proto.RegisterType((*MetalLBOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.MetalLBOpts")
	proto.RegisterType((*NodeletStatus)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.NodeletStatus")
	proto.RegisterType((*Override)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.Override")
	proto.RegisterType((*PF9)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.PF9")
	proto.RegisterType((*Params)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.Params")
	proto.RegisterType((*ProfileAgentOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.ProfileAgentOpts")
	proto.RegisterType((*Region)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.Region")
	proto.RegisterType((*StorageBackend)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha2.StorageBackend")
}

func init() {
	proto.RegisterFile("github.com/platform9/pf9-qbert/sunpike/apiserver/pkg/apis/sunpike/v1alpha2/generated.proto", fileDescriptor_cb02d94e344fb008)
}

var fileDescriptor_cb02d94e344fb008 = []byte{
	// 7759 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x7d, 0x5b, 0x8c, 0x24, 0x47,
	0x72, 0x18, 0xab, 0xbb, 0xe7, 0x15, 0xb3, 0xcf, 0xdc, 0x07, 0x9b, 0x7b, 0xb7, 0x3b, 0xab, 0xa2,
	0x44, 0xf0, 0xac, 0xd3, 0xac, 0x38, 0xe6, 0xf1, 0xb8, 0x3c, 0xe9, 0x80, 0x9e, 0xee, 0xd9, 0x65,
	0x73, 0x1e, 0xdb, 0x8a, 0xde, 0xd9, 0xbd, 0xe3, 0x51, 0xbe, 0xab, 0xe9, 0xca, 0xe9, 0x29, 0x4d,
	0x75, 0x55, 0xb3, 0xaa, 0xba, 0x77, 0x87, 0x06, 0x29, 0xfa, 0x64, 0x53, 0x67, 0x5b, 0x3a, 0x19,
	0x36, 0x4e, 0x80, 0x65, 0x03, 0x12, 0x0c, 0xd8, 0x80, 0x6d, 0x9c, 0x9f, 0x1f, 0x86, 0x0d, 0x9f,
	0x0d, 0xc3, 0x3f, 0x34, 0x0c, 0x43, 0xe7, 0x1f, 0x59, 0x7e, 0x2d, 0x74, 0x6b, 0x08, 0xfe, 0x30,
	0x60, 0x7f, 0x18, 0x06, 0x64, 0x02, 0x36, 0x84, 0x7c, 0x56, 0x66, 0x75, 0xf7, 0xec, 0xec, 0x5e,
	0xb7, 0x74, 0xfc, 0xeb, 0xce, 0x88, 0x8c, 0xc8, 0xca, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x84,
	0xb7, 0xbb, 0x41, 0x76, 0x30, 0xd8, 0x5b, 0xed, 0xc4, 0xbd, 0x1b, 0xfd, 0xd0, 0xcb, 0xf6, 0xe3,
	0xa4, 0x77, 0xf3, 0x46, 0x7f, 0xff, 0xe6, 0x4f, 0xbd, 0xbb, 0x47, 0x93, 0xec, 0x46, 0x3a, 0x88,
	0xfa, 0xc1, 0x21, 0xbd, 0xe1, 0xf5, 0x83, 0x94, 0x26, 0x43, 0x9a, 0xdc, 0xe8, 0x1f, 0x76, 0xf9,
	0x3f, 0x0d, 0x1a, 0xbe, 0xe2, 0x85, 0xfd, 0x03, 0x6f, 0xed, 0x46, 0x97, 0x46, 0x34, 0xf1, 0x32,
	0xea, 0xaf, 0xf6, 0x93, 0x38, 0x8b, 0xc9, 0x5b, 0x39, 0xed, 0x55, 0x4d, 0x7b, 0xb5, 0xbf, 0x7f,
	0xf3, 0xeb, 0x9c, 0xf6, 0xaa, 0x24, 0xb0, 0xaa, 0x69, 0xaf, 0xf6, 0x0f, 0xbb, 0xfc, 0x9f, 0x06,
	0x29, 0xda, 0x57, 0x7e, 0xca, 0x68, 0x67, 0x37, 0xee, 0xc6, 0x37, 0x38, 0x8b, 0xbd, 0xc1, 0x3e,
	0xff, 0xc7, 0xff, 0xf0, 0x5f, 0x82, 0xf5, 0x95, 0x57, 0x0f, 0x5f, 0x4f, 0x57, 0x83, 0x98, 0x35,
	0xb4, 0xe7, 0x75, 0x0e, 0x82, 0x88, 0x26, 0x47, 0x79, 0xcb, 0x7b, 0x34, 0xf3, 0x6e, 0x0c, 0x5f,
	0x29, 0x36, 0xf8, 0xca, 0x8d, 0x49, 0xb5, 0x92, 0x41, 0x94, 0x05, 0x3d, 0x3a, 0x52, 0xe1, 0xb5,
	0x27, 0x55, 0x48, 0x3b, 0x07, 0xb4, 0xe7, 0x15, 0xeb, 0xb9, 0xbf, 0xb3, 0x00, 0xa7, 0x6a, 0x9b,
	0xed, 0x5a, 0x97, 0x46, 0x59, 0x2b, 0x8e, 0x43, 0x72, 0x1d, 0x2a, 0x91, 0xd7, 0xa3, 0x55, 0xe7,
	0xba, 0xf3, 0xf2, 0xd2, 0xfa, 0xa9, 0x8f, 0x1f, 0xad, 0x3c, 0xf7, 0xf8, 0xd1, 0x4a, 0x65, 0xc7,
	0xeb, 0x51, 0xe4, 0x10, 0xf2, 0x22, 0xcc, 0x75, 0xe2, 0x41, 0x94, 0x55, 0x4b, 0xd7, 0x9d, 0x97,
	0xe7, 0xd6, 0x4f, 0x4b, 0x94, 0xb9, 0x3a, 0x2b, 0x44, 0x01, 0x23, 0x2f, 0xc1, 0xfc, 0xb0, 0xd7,
	0x0e, 0xde, 0xa3, 0xd5, 0x32, 0x27, 0x74, 0x46, 0x62, 0xcd, 0xdf, 0xdb, 0x66, 0xa5, 0x28, 0xa1,
	0xe4, 0x75, 0x38, 0x15, 0xa7, 0x8d, 0x20, 0x3d, 0x64, 0xff, 0x6e, 0xaf, 0x57, 0x2b, 0x9c, 0xe6,
	0x45, 0x89, 0x7d, 0xea, 0x4e, 0x3b, 0x87, 0xa1, 0x85, 0x49, 0xd6, 0x00, 0xc4, 0xff, 0xbb, 0x47,
	0x7d, 0x5a, 0x9d, 0xe3, 0x5c, 0x88, 0xac, 0x07, 0xa2, 0x1e, 0x83, 0xa0, 0x81, 0x45, 0x3e, 0x07,
	0x0b, 0x3d, 0xef, 0x61, 0x2b, 0xf6, 0xd3, 0xea, 0x3c, 0x67, 0x74, 0x56, 0x56, 0x58, 0xd8, 0x16,
	0xc5, 0xa8, 0xe0, 0xac, 0x1f, 0x32, 0x46, 0x78, 0xc1, 0xee, 0x07, 0x4e, 0x92, 0x43, 0xc8, 0x3a,
	0x9c, 0xf7, 0x86, 0x5e, 0x10, 0x7a, 0x7b, 0x41, 0x18, 0x64, 0x47, 0x6f, 0xc7, 0x11, 0x4d, 0xab,
	0x8b, 0xd7, 0xcb, 0x2f, 0x2f, 0xad, 0x5f, 0x7c, 0xfc, 0x68, 0xe5, 0x5c, 0xad, 0x00, 0xc4, 0x51,
	0x74, 0x72, 0x1b, 0xce, 0xf7, 0x93, 0x78, 0x18, 0xa4, 0x41, 0x1c, 0x05, 0x51, 0xb7, 0x9d, 0x79,
	0x19, 0xad, 0x2e, 0x71, 0x96, 0x2f, 0x48, 0x96, 0xe7, 0x5b, 0x45, 0x04, 0x1c, 0xad, 0xc3, 0x7a,
	0xa3, 0x1f, 0x3f, 0xa0, 0x89, 0xa0, 0x00, 0x76, 0x6f, 0xb4, 0x34, 0x04, 0x0d, 0x2c, 0xc6, 0xfc,
	0x70, 0xb0, 0x47, 0x93, 0x88, 0x66, 0x34, 0xbd, 0x47, 0x13, 0x46, 0xb0, 0xba, 0x6c, 0x33, 0xdf,
	0x2c, 0x22, 0xe0, 0x68, 0x1d, 0xf2, 0x2b, 0x0e, 0xcc, 0x87, 0xde, 0x1e, 0x0d, 0xd3, 0xea, 0xa9,
	0xeb, 0xe5, 0x97, 0x97, 0xd7, 0xfc, 0xd5, 0xe9, 0x4d, 0xb8, 0x55, 0x53, 0x3c, 0x57, 0xb7, 0x38,
	0x9b, 0x8d, 0x28, 0x4b, 0x8e, 0x72, 0x99, 0x12, 0x85, 0x28, 0xdb, 0xc0, 0x86, 0xae, 0x17, 0xfb,
	0xb4, 0x7a, 0xda, 0x1e, 0xba, 0xed, 0xd8, 0xa7, 0xc8, 0x21, 0x4c, 0x3a, 0xe3, 0x94, 0xcb, 0xcd,
	0x19, 0x5b, 0x3a, 0xef, 0xb4, 0xf9, 0x00, 0x4b, 0x28, 0x69, 0xc0, 0xb9, 0x28, 0xf6, 0x69, 0xb3,
	0xe7, 0x75, 0xa9, 0xea, 0xa0, 0xb3, 0xbc, 0x46, 0x55, 0xd6, 0x38, 0xb7, 0x53, 0x80, 0xe3, 0x48,
	0x0d, 0x26, 0xe3, 0xc3, 0x88, 0x66, 0xed, 0xc1, 0x5e, 0x44, 0xb3, 0x66, 0xa3, 0x7a, 0x8e, 0x53,
	0xd0, 0x32, 0x7e, 0xcf, 0x80, 0xa1, 0x85, 0x79, 0xe5, 0x26, 0x2c, 0x1b, 0x1f, 0x4c, 0xce, 0x41,
	0xf9, 0x90, 0x1e, 0x89, 0xa9, 0x89, 0xec, 0x27, 0xb9, 0x08, 0x73, 0x43, 0x2f, 0x1c, 0x50, 0x3e,
	0x17, 0x97, 0x50, 0xfc, 0x79, 0xa3, 0xf4, 0xba, 0xe3, 0xfe, 0x23, 0x00, 0xa8, 0x6d, 0xb6, 0xeb,
	0xe1, 0x20, 0xcd, 0x68, 0x42, 0x3e, 0x0f, 0x8b, 0x61, 0xdc, 0xf1, 0x32, 0xf6, 0x05, 0x62, 0x6a,
	0x9f, 0x93, 0xfc, 0x17, 0xb7, 0x64, 0x39, 0x6a, 0x8c, 0xf1, 0x92, 0x51, 0x7a, 0x06, 0xc9, 0x50,
	0xb3, 0xa8, 0x3c, 0x71, 0x16, 0x8d, 0x9d, 0x01, 0x95, 0x1f, 0x7a, 0x06, 0xcc, 0x9d, 0x68, 0x06,
	0xac, 0x01, 0xd0, 0xc8, 0xdb, 0x0b, 0x29, 0xae, 0xd7, 0xea, 0x5c, 0x25, 0x2c, 0xe6, 0x75, 0x36,
	0x34, 0x04, 0x0d, 0x2c, 0xf2, 0x25, 0x38, 0xdd, 0xf3, 0x1e, 0x6a, 0x89, 0x4c, 0xb9, 0x86, 0x98,
	0x5b, 0xbf, 0x24, 0xab, 0x9d, 0xde, 0x36, 0x81, 0x68, 0xe3, 0xb2, 0xaf, 0x65, 0xe2, 0x81, 0x34,
	0x8d, 0x07, 0x49, 0x87, 0xde, 0x4e, 0xe2, 0x41, 0xbf, 0xba, 0x68, 0x7f, 0xed, 0x4e, 0x11, 0x01,
	0x47, 0xeb, 0x90, 0xf7, 0x61, 0x21, 0xa2, 0xd9, 0x83, 0x38, 0x39, 0xe4, 0xea, 0x62, 0x79, 0xed,
	0xde, 0x94, 0xa7, 0xdc, 0x8e, 0xa0, 0xbe, 0xbe, 0xcc, 0xb4, 0xa3, 0xfc, 0x83, 0x8a, 0x27, 0x9b,
	0xf1, 0xe0, 0xe5, 0x5d, 0x00, 0x7c, 0xd6, 0x7f, 0x65, 0x56, 0xb3, 0x3e, 0x1f, 0x13, 0xa3, 0x67,
	0x0d, 0xfe, 0xe4, 0x5b, 0x0e, 0x2c, 0x05, 0x51, 0x9a, 0x79, 0x51, 0x87, 0xa6, 0xd5, 0x65, 0xde,
	0x9a, 0xfb, 0x53, 0x6e, 0x4d, 0x53, 0xd2, 0x5f, 0x3f, 0x2f, 0x1b, 0xb3, 0xa4, 0x4a, 0x52, 0xcc,
	0x99, 0x93, 0x77, 0xa0, 0xca, 0xa8, 0x05, 0x1d, 0xda, 0x4a, 0x82, 0xa8, 0x13, 0xf4, 0xbd, 0xb0,
	0x1e, 0x06, 0x34, 0x62, 0x13, 0xff, 0x14, 0x1f, 0xe8, 0xeb, 0xb2, 0x7e, 0xb5, 0x3d, 0x01, 0x0f,
	0x27, 0x52, 0x20, 0x5b, 0x70, 0x51, 0x88, 0x62, 0x2b, 0x09, 0x86, 0x5e, 0x46, 0xe5, 0xf4, 0xe6,
	0xaa, 0x6e, 0x71, 0xbd, 0xfa, 0xf8, 0xd1, 0xca, 0xc5, 0x8d, 0x31, 0x70, 0x1c, 0x5b, 0x8b, 0xdc,
	0x80, 0x25, 0x3f, 0x4a, 0x5b, 0x09, 0xdd, 0x0f, 0x1e, 0x4a, 0x4d, 0xa8, 0x3f, 0xae, 0xb1, 0xd3,
	0x16, 0x00, 0xcc, 0x71, 0xc8, 0x37, 0x1d, 0xa8, 0x64, 0x5e, 0x37, 0xad, 0x9e, 0xe5, 0x5d, 0xfc,
	0x8d, 0x29, 0x77, 0xb1, 0x6c, 0xd7, 0xea, 0x5d, 0xaf, 0x2b, 0x55, 0x7c, 0xae, 0x31, 0xbc, 0x6e,
	0x8a, 0x9c, 0x37, 0xd3, 0x29, 0xfb, 0xef, 0xfa, 0x91, 0x54, 0xa3, 0x1a, 0xe3, 0xd6, 0xcf, 0x35,
	0x76, 0x90, 0x43, 0xae, 0x7c, 0x11, 0x96, 0x34, 0x89, 0xa7, 0x52, 0x9a, 0x1f, 0x2e, 0xc0, 0xb2,
	0x31, 0xd4, 0x27, 0x30, 0x86, 0x4c, 0xbd, 0x5a, 0x7a, 0xa2, 0x5e, 0x5d, 0x03, 0x50, 0x92, 0xd2,
	0xf4, 0xa5, 0x52, 0xd4, 0xb2, 0xdd, 0xd4, 0x10, 0x34, 0xb0, 0x58, 0x1b, 0x86, 0xbd, 0xa6, 0x2f,
	0x75, 0xa2, 0x6e, 0xc3, 0xbd, 0xed, 0x66, 0x03, 0x39, 0x84, 0xac, 0xc0, 0xdc, 0x7b, 0xdc, 0xf8,
	0x98, 0xe3, 0xc6, 0xc7, 0x12, 0x33, 0xc6, 0xb8, 0x79, 0x81, 0xa2, 0x9c, 0x0c, 0xa0, 0x9c, 0x1e,
	0x0e, 0xb8, 0x7e, 0x5b, 0x5e, 0x7b, 0x7b, 0x46, 0xf3, 0xa2, 0xbd, 0xb9, 0xbb, 0xbe, 0xf0, 0xf8,
	0xd1, 0x4a, 0xb9, 0xbd, 0xb9, 0x8b, 0x8c, 0x1f, 0xd9, 0x83, 0x2b, 0xc3, 0x20, 0xc9, 0x06, 0x5e,
	0xb8, 0x2d, 0x4c, 0xd2, 0x76, 0xc7, 0x0b, 0x69, 0x9b, 0x66, 0xac, 0xff, 0xa4, 0x61, 0xe5, 0xca,
	0xef, 0xb9, 0x72, 0x6f, 0x22, 0x26, 0x1e, 0x43, 0x85, 0x69, 0x63, 0xad, 0x07, 0x38, 0x59, 0xa1,
	0x4c, 0xb5, 0x36, 0xae, 0x99, 0x40, 0xb4, 0x71, 0xc9, 0x2f, 0x29, 0x71, 0x5e, 0xe2, 0xe2, 0xec,
	0xcd, 0xa8, 0x67, 0x9e, 0x20, 0xcf, 0x75, 0x38, 0x2f, 0xd5, 0x6a, 0x33, 0xca, 0x68, 0xb2, 0xef,
	0x31, 0x1d, 0x06, 0x7c, 0x28, 0x2f, 0xf1, 0xf5, 0xa0, 0x08, 0xc4, 0x51, 0x7c, 0xf2, 0xab, 0x0e,
	0x2c, 0xc5, 0x69, 0x2b, 0x89, 0xf7, 0x83, 0x90, 0x72, 0x23, 0x6e, 0xfa, 0xd3, 0x53, 0x7d, 0xcf,
	0x9d, 0xb6, 0xe4, 0xb3, 0x7e, 0x9a, 0x69, 0x0a, 0xfd, 0x17, 0xf3, 0x16, 0x3c, 0xfb, 0x14, 0x7c,
	0x5c, 0x82, 0xab, 0x06, 0xaf, 0xad, 0x20, 0x1a, 0x3c, 0xac, 0xc7, 0xd1, 0x7e, 0xd0, 0x1d, 0x24,
	0x62, 0x12, 0xfd, 0xaa, 0x03, 0x0b, 0x69, 0x7a, 0xb0, 0x49, 0x8f, 0xd2, 0xaa, 0xc3, 0x07, 0x6e,
	0x6f, 0xca, 0x1f, 0xca, 0x99, 0x6a, 0xb9, 0x6e, 0xbf, 0xb9, 0x49, 0x8f, 0xf2, 0x9d, 0x82, 0xf8,
	0x9f, 0xa2, 0x6a, 0x03, 0x39, 0x84, 0xab, 0x7e, 0x90, 0x72, 0xf5, 0xea, 0xa5, 0xe9, 0x83, 0x38,
	0xf1, 0x6b, 0x83, 0xec, 0x80, 0x46, 0x59, 0x60, 0xe8, 0x85, 0xc5, 0xf5, 0x9f, 0x90, 0x04, 0xae,
	0x36, 0x8e, 0x43, 0xc6, 0xe3, 0x69, 0x31, 0x8b, 0x54, 0x9b, 0x3e, 0xf7, 0xb6, 0xb9, 0x74, 0x73,
	0x3d, 0xb2, 0x98, 0x5b, 0xa4, 0xad, 0x02, 0x1c, 0x47, 0x6a, 0xb8, 0xff, 0xaf, 0x0c, 0x17, 0xc7,
	0x0d, 0x28, 0x33, 0x55, 0x3b, 0x71, 0xaf, 0x3f, 0xc8, 0x68, 0xb2, 0x93, 0x2b, 0x3e, 0x6d, 0xaa,
	0xd6, 0x0d, 0x18, 0x5a, 0x98, 0x7c, 0x22, 0xfa, 0xbd, 0x20, 0xda, 0x4d, 0x69, 0xc2, 0x75, 0x66,
	0xa9, 0x30, 0x11, 0x4d, 0x20, 0xda, 0xb8, 0xe4, 0x1f, 0x3a, 0x40, 0xc2, 0x91, 0x91, 0xe6, 0x1f,
	0xb6, 0xbc, 0x16, 0xcc, 0x48, 0x8c, 0x47, 0x45, 0x6b, 0xfd, 0xf2, 0xe3, 0x47, 0x2b, 0x64, 0xb4,
	0x1c, 0xc7, 0x34, 0x8e, 0xfc, 0x53, 0x07, 0x2e, 0x3e, 0x08, 0x22, 0x3f, 0x7e, 0x90, 0xda, 0xad,
	0xae, 0xf0, 0x56, 0x1f, 0xce, 0xa8, 0xd5, 0xf7, 0xc7, 0xb0, 0x14, 0x0b, 0xff, 0x38, 0x08, 0x8e,
	0x6d, 0xa2, 0x7b, 0x17, 0xce, 0xd8, 0x9a, 0xfb, 0x04, 0x2b, 0x1d, 0x33, 0xe5, 0x03, 0x9a, 0xc8,
	0x71, 0xcd, 0x15, 0x59, 0x40, 0x13, 0xe4, 0x10, 0xf7, 0xaf, 0x95, 0x61, 0xe5, 0x09, 0x2d, 0x25,
	0x7f, 0xd7, 0x81, 0x33, 0x0f, 0x82, 0x08, 0xb7, 0xb7, 0x82, 0x34, 0xa3, 0x11, 0x4d, 0xd4, 0x1c,
	0x9e, 0x76, 0x7f, 0x49, 0xee, 0x46, 0x63, 0x72, 0x9e, 0xeb, 0x97, 0x65, 0xeb, 0xcf, 0x58, 0xc5,
	0x29, 0x16, 0x9a, 0x46, 0xee, 0xc1, 0x65, 0x61, 0x38, 0xd5, 0x06, 0x59, 0xdc, 0xf3, 0xb2, 0xa0,
	0xb3, 0xdb, 0xf7, 0xbd, 0x8c, 0xa6, 0x72, 0x4e, 0x5f, 0x93, 0x74, 0x2e, 0x6f, 0x8c, 0xc5, 0xc2,
	0x09, 0xb5, 0xa7, 0x33, 0x8b, 0x99, 0xed, 0x91, 0x05, 0x3d, 0xca, 0x96, 0x7a, 0x69, 0x1d, 0x68,
	0xdb, 0xe3, 0xae, 0x2c, 0x47, 0x8d, 0xe1, 0x52, 0xb8, 0x3c, 0x5e, 0xb5, 0x91, 0xcf, 0xc1, 0xc2,
	0x21, 0x3d, 0x6a, 0x78, 0x99, 0x27, 0x87, 0x5f, 0xeb, 0xba, 0x4d, 0x51, 0x8c, 0x0a, 0xce, 0x84,
	0xa0, 0xef, 0x65, 0x07, 0x45, 0x21, 0x68, 0x79, 0xd9, 0x01, 0x72, 0x88, 0xfb, 0x3f, 0x4a, 0x82,
	0x4f, 0xec, 0xf9, 0xeb, 0x5e, 0xc8, 0xb8, 0x24, 0x4a, 0xb9, 0xfc, 0x0c, 0x5c, 0xae, 0x85, 0xdc,
	0x16, 0xa2, 0xfe, 0x9d, 0x41, 0xb6, 0x17, 0x0f, 0x22, 0xbf, 0x15, 0x27, 0x59, 0xca, 0xd9, 0xce,
	0xad, 0x57, 0x18, 0x39, 0x9c, 0x80, 0x43, 0xde, 0x02, 0xd2, 0xf3, 0x22, 0xaf, 0x9b, 0x97, 0x37,
	0x5b, 0xa9, 0xf4, 0x41, 0x5d, 0x91, 0x0d, 0x21, 0xdb, 0x23, 0x18, 0x38, 0xa6, 0x16, 0x37, 0xa3,
	0xf7, 0xf7, 0x69, 0x27, 0x0b, 0x86, 0xd4, 0xa4, 0x56, 0xe6, 0xab, 0xae, 0x30, 0xa3, 0xc7, 0xc0,
	0x71, 0x6c, 0x2d, 0xf2, 0x0a, 0x2c, 0xc7, 0x06, 0x91, 0x0a, 0x27, 0x72, 0xf6, 0xf1, 0xa3, 0x95,
	0x65, 0xb3, 0xae, 0x89, 0x43, 0x6e, 0x01, 0xc9, 0xff, 0x0a, 0xe3, 0x5a, 0xdb, 0x6f, 0x5c, 0x09,
	0xdd, 0x19, 0x81, 0xe2, 0x98, 0x1a, 0xee, 0x3f, 0xa9, 0xf0, 0x5d, 0xbe, 0x34, 0x11, 0xc8, 0x4b,
	0x30, 0xdf, 0x0f, 0x07, 0xdd, 0x40, 0xed, 0xf1, 0xb5, 0x5f, 0xa3, 0xc5, 0x4b, 0x51, 0x42, 0x39,
	0x5e, 0x1c, 0x06, 0x9d, 0x23, 0x39, 0x90, 0x39, 0x1e, 0x2f, 0x45, 0x09, 0x25, 0x5f, 0x80, 0x65,
	0xb9, 0x15, 0xa9, 0xb3, 0x6d, 0x89, 0x30, 0x58, 0x2f, 0x48, 0xe4, 0xe5, 0x76, 0x0e, 0x42, 0x13,
	0x8f, 0xad, 0x05, 0x9d, 0x38, 0xca, 0xbc, 0x20, 0xa2, 0x09, 0xaf, 0x58, 0xb1, 0xd7, 0x82, 0xba,
	0x09, 0x44, 0x1b, 0x97, 0x2d, 0x41, 0x7e, 0x94, 0x4a, 0xda, 0xcd, 0x96, 0xdc, 0xc9, 0xeb, 0x25,
	0xa8, 0xb1, 0xd3, 0xd6, 0x30, 0xb4, 0x30, 0xb9, 0x2f, 0x51, 0x76, 0x11, 0xf7, 0xed, 0xcc, 0xdb,
	0x35, 0xef, 0x18, 0x30, 0xb4, 0x30, 0x49, 0x0d, 0xce, 0x86, 0x86, 0xc0, 0xb6, 0x37, 0x77, 0xa5,
	0x79, 0xfa, 0xbc, 0xac, 0x7c, 0x76, 0xcb, 0x06, 0x63, 0x11, 0x9f, 0x7c, 0xd7, 0x81, 0x0b, 0xe1,
	0xa8, 0xd0, 0x73, 0x7b, 0x74, 0x06, 0x16, 0xca, 0x28, 0xa7, 0xf5, 0xe7, 0x1f, 0x3f, 0x5a, 0xb9,
	0x30, 0x06, 0x80, 0xe3, 0xda, 0xe5, 0xfe, 0x9a, 0xc3, 0x95, 0xf5, 0x71, 0x6a, 0x92, 0x7c, 0x19,
	0xce, 0x74, 0x68, 0x92, 0x05, 0xfb, 0xcc, 0xfa, 0xa0, 0xbb, 0xb8, 0x25, 0xc5, 0x4a, 0xab, 0xcf,
	0xba, 0x05, 0xc5, 0x02, 0x36, 0x53, 0x50, 0xdc, 0xcb, 0xdc, 0x89, 0xc3, 0xe2, 0xe6, 0xa8, 0x25,
	0xcb, 0x51, 0x63, 0xb8, 0x7f, 0xd1, 0x81, 0xe5, 0x5a, 0xab, 0xb9, 0x11, 0xf9, 0xfd, 0x38, 0x88,
	0x32, 0xa6, 0x6b, 0x0e, 0xe2, 0x34, 0x2b, 0x2e, 0x49, 0x6f, 0xc6, 0x69, 0x86, 0x1c, 0xc2, 0xb5,
	0x51, 0x9c, 0x28, 0x47, 0x74, 0xae, 0x8d, 0xe2, 0x24, 0x43, 0x0e, 0x61, 0x22, 0x31, 0x48, 0x69,
	0xeb, 0xd6, 0xcd, 0x46, 0xdc, 0xf3, 0x82, 0x48, 0x2a, 0x59, 0x2d, 0x12, 0xbb, 0x06, 0x0c, 0x2d,
	0x4c, 0xf7, 0x5f, 0x3a, 0xf0, 0x99, 0xda, 0xfd, 0x76, 0x3d, 0x8c, 0x07, 0x3e, 0xd7, 0xc5, 0x3e,
	0x4d, 0xea, 0x09, 0xf5, 0x99, 0x2d, 0xe6, 0x85, 0x29, 0x9b, 0x1a, 0x5e, 0xa7, 0x43, 0xd3, 0x74,
	0x93, 0x1e, 0x35, 0x1b, 0xb2, 0x91, 0x7a, 0x6a, 0xd4, 0x72, 0x10, 0x9a, 0x78, 0x4c, 0xd2, 0x52,
	0xda, 0x49, 0x68, 0xa6, 0x31, 0x64, 0xcf, 0x68, 0x49, 0x6b, 0xdb, 0x60, 0x2c, 0xe2, 0xb3, 0xc9,
	0x9b, 0xd0, 0xae, 0xb2, 0x8f, 0x8c, 0xc9, 0x8b, 0xbc, 0x14, 0x25, 0xd4, 0x4d, 0xe0, 0x62, 0xf1,
	0x03, 0xda, 0x7d, 0xda, 0x61, 0x9b, 0x50, 0x41, 0xd2, 0xb0, 0xf0, 0xf4, 0x26, 0xb4, 0xad, 0x21,
	0x68, 0x60, 0x19, 0x3c, 0x4b, 0xc7, 0xf2, 0xfc, 0xf5, 0x12, 0x00, 0x67, 0x2a, 0x1c, 0x0c, 0x8c,
	0x15, 0xb7, 0x92, 0xc7, 0xb2, 0xe2, 0xab, 0x8f, 0x64, 0xa5, 0xb1, 0x4e, 0xca, 0x8a, 0xbc, 0x00,
	0x65, 0xef, 0x3d, 0xa5, 0xb2, 0xf9, 0xc6, 0xb3, 0xf6, 0x76, 0x8a, 0xac, 0x8c, 0x5c, 0x85, 0xb2,
	0xd7, 0x0b, 0xa4, 0xd6, 0x59, 0x96, 0xf5, 0xcb, 0xb5, 0xed, 0x26, 0xb2, 0x72, 0x26, 0x14, 0x3d,
	0x8f, 0xb5, 0xef, 0x56, 0xe8, 0x0d, 0xe3, 0xa4, 0xa8, 0x61, 0xb6, 0x0d, 0x18, 0x5a, 0x98, 0xac,
	0x26, 0xd3, 0xb3, 0xba, 0x66, 0x41, 0xc3, 0xdc, 0x37, 0x60, 0x68, 0x61, 0xba, 0xbf, 0xe9, 0xc0,
	0xb9, 0xda, 0xfd, 0x36, 0xdb, 0xbb, 0x06, 0x51, 0x57, 0xd8, 0x44, 0xfc, 0x38, 0x22, 0x88, 0xf8,
	0x29, 0x89, 0x53, 0x38, 0x8e, 0x10, 0xc5, 0xa8, 0xe0, 0xf2, 0xe4, 0x82, 0xa3, 0x96, 0x46, 0x4e,
	0x2e, 0x24, 0xaa, 0xf8, 0xc1, 0x24, 0xd3, 0xa7, 0x69, 0x90, 0x50, 0x5f, 0x9f, 0xbf, 0xcc, 0xe5,
	0x92, 0xd9, 0xc8, 0x41, 0x68, 0xe2, 0xb9, 0xff, 0xa5, 0x04, 0xf3, 0xb5, 0xfb, 0xed, 0x7b, 0xad,
	0x3a, 0x79, 0x11, 0xe6, 0x86, 0xfd, 0x4e, 0xd3, 0x97, 0x23, 0xa6, 0x4f, 0x78, 0xee, 0xb5, 0x98,
	0x86, 0x16, 0x30, 0xf2, 0x45, 0x38, 0x9d, 0xd2, 0xce, 0x20, 0x09, 0xb2, 0x23, 0xe1, 0xc6, 0x2c,
	0xf1, 0x91, 0x38, 0xcf, 0x14, 0x7c, 0xdb, 0x04, 0xa0, 0x8d, 0xc7, 0x3a, 0xb1, 0x3f, 0xd8, 0x0b,
	0x83, 0x8e, 0x10, 0xe9, 0xe2, 0x9c, 0x6c, 0x19, 0x30, 0xb4, 0x30, 0xd9, 0xba, 0xd2, 0x17, 0x1e,
	0x2c, 0x59, 0xb5, 0xc2, 0xab, 0xea, 0x75, 0xa5, 0x65, 0x02, 0xd1, 0xc6, 0x65, 0xb6, 0x5c, 0x47,
	0x88, 0xa5, 0xd5, 0xba, 0xa6, 0x2f, 0xc7, 0x5f, 0xdb, 0x72, 0xf5, 0x71, 0x58, 0x0d, 0x9c, 0x50,
	0x9b, 0xfc, 0x04, 0x2c, 0xa4, 0xdc, 0x5f, 0x9f, 0x56, 0xe7, 0x79, 0x0f, 0x70, 0x8f, 0xa9, 0x70,
	0xe1, 0xb3, 0x5d, 0xa2, 0xf8, 0xe1, 0xfe, 0xf6, 0x3c, 0x40, 0xcd, 0xf7, 0xe3, 0x28, 0xbd, 0xd3,
	0xcf, 0x52, 0xf2, 0x6d, 0x07, 0xc0, 0xeb, 0xf7, 0xeb, 0x5e, 0xe6, 0x85, 0x71, 0x97, 0x77, 0xf4,
	0xb4, 0x5d, 0x33, 0x9a, 0x3a, 0x63, 0x68, 0xb8, 0x50, 0x75, 0x39, 0x1a, 0x2d, 0x20, 0x1f, 0x3a,
	0x50, 0xee, 0x78, 0xc2, 0xa0, 0x9a, 0xb2, 0x2b, 0x44, 0x76, 0x28, 0xb3, 0x82, 0xb9, 0xef, 0x26,
	0xe1, 0x0d, 0xd2, 0xf3, 0xb2, 0x5e, 0x6b, 0x23, 0x63, 0x4d, 0xde, 0x83, 0xb9, 0x70, 0x10, 0x74,
	0x03, 0xb9, 0xef, 0xdb, 0x9d, 0x66, 0x1b, 0xb6, 0x18, 0x61, 0xce, 0x57, 0x4b, 0x33, 0x2f, 0x42,
	0xc1, 0x92, 0x7c, 0xe4, 0xc0, 0xe2, 0xe1, 0x60, 0x8f, 0x0e, 0x83, 0x24, 0x93, 0x3b, 0xb8, 0xa9,
	0xba, 0xb3, 0x37, 0x07, 0x7b, 0xf4, 0x5e, 0x90, 0x64, 0xbc, 0x09, 0x7a, 0x15, 0xdc, 0x94, 0x1c,
	0x51, 0xf3, 0xe6, 0x82, 0xd1, 0xe9, 0x0f, 0x84, 0x21, 0x2b, 0x74, 0xd3, 0x94, 0x05, 0xa3, 0xde,
	0xda, 0x95, 0xd4, 0x6d, 0xc1, 0xc8, 0xcb, 0xd1, 0x68, 0x01, 0xf9, 0x75, 0x07, 0x4e, 0xf5, 0x85,
	0xd1, 0x20, 0x36, 0x2a, 0xc2, 0x8d, 0xf8, 0xce, 0x34, 0x9b, 0xd4, 0x32, 0xe8, 0xf3, 0x46, 0xe5,
	0xda, 0xc0, 0x80, 0xa0, 0xd5, 0x0e, 0xf7, 0x4b, 0x70, 0xc6, 0x96, 0x71, 0xa6, 0x24, 0xc5, 0x86,
	0x4b, 0x68, 0xae, 0xc5, 0x5c, 0x49, 0x8a, 0xfd, 0x99, 0x8f, 0x0a, 0xce, 0xcc, 0x9f, 0x4a, 0x6d,
	0x90, 0x1d, 0x88, 0x81, 0xa7, 0x47, 0x69, 0xc6, 0x76, 0x51, 0xce, 0x0c, 0x06, 0x5e, 0xd2, 0x2e,
	0x0c, 0xbc, 0x2c, 0x45, 0xcd, 0xdb, 0xfd, 0x3f, 0x0e, 0x5c, 0xad, 0xbd, 0x37, 0x48, 0xe8, 0x44,
	0x93, 0xe3, 0xf3, 0xb0, 0xd8, 0x51, 0x47, 0x09, 0x85, 0x33, 0x3c, 0x7d, 0x74, 0xa0, 0x31, 0xb8,
	0x2b, 0x87, 0xff, 0x16, 0x4b, 0xba, 0x5c, 0x4d, 0x73, 0x57, 0x8e, 0x01, 0x43, 0x0b, 0x93, 0x99,
	0x7d, 0xe9, 0x60, 0x2f, 0xed, 0x24, 0x41, 0x9f, 0xed, 0xd9, 0x9b, 0x0d, 0x69, 0x68, 0x68, 0xb3,
	0xaf, 0x6d, 0x41, 0xb1, 0x80, 0xcd, 0xf7, 0xa5, 0x34, 0xf2, 0x78, 0x3b, 0x8b, 0xfb, 0x52, 0x59,
	0x8e, 0x1a, 0xc3, 0xdd, 0x82, 0xcb, 0xa3, 0x9f, 0xfd, 0xac, 0x86, 0x8a, 0xfb, 0xdd, 0x32, 0x2c,
	0xd4, 0x77, 0x9a, 0x5c, 0x1c, 0x5e, 0x82, 0xf9, 0xbd, 0x24, 0xf0, 0xbb, 0xb4, 0xb8, 0x1b, 0x5a,
	0xe7, 0xa5, 0x28, 0xa1, 0xe4, 0x1a, 0x2c, 0x6c, 0xdf, 0xdd, 0x35, 0xd6, 0x56, 0xb1, 0x11, 0x55,
	0x85, 0xa4, 0x0a, 0x95, 0x66, 0x6b, 0xf8, 0x9a, 0x5c, 0xa8, 0x04, 0x90, 0x97, 0xb0, 0x05, 0x49,
	0xba, 0x62, 0xc5, 0x06, 0xab, 0xb8, 0xd1, 0xd9, 0x31, 0x81, 0x68, 0xe3, 0x92, 0x0f, 0x60, 0x9e,
	0x59, 0x03, 0x9d, 0x58, 0x4e, 0xf2, 0xa9, 0x9e, 0xe0, 0xd5, 0x39, 0x65, 0x2e, 0x74, 0xfa, 0xb3,
	0x45, 0x19, 0x4a, 0xae, 0xe4, 0x9b, 0x0e, 0x2c, 0xec, 0x87, 0x5e, 0x14, 0xd1, 0x50, 0xce, 0xe9,
	0xa9, 0x1e, 0x99, 0xdd, 0x12, 0xa4, 0x79, 0x13, 0xf4, 0x3c, 0x94, 0x85, 0xa8, 0x18, 0xbb, 0xbf,
	0xef, 0xc0, 0x19, 0x5b, 0x21, 0x91, 0x06, 0x9c, 0xcb, 0xd5, 0x8f, 0xd8, 0x90, 0xca, 0x01, 0xd4,
	0xce, 0x91, 0xbc, 0x86, 0xdc, 0xb0, 0x8e, 0xd4, 0x20, 0x6d, 0xb8, 0x94, 0xc5, 0xfd, 0x38, 0x8c,
	0xbb, 0x47, 0x36, 0x29, 0x31, 0x0f, 0xae, 0x4a, 0x52, 0x97, 0xee, 0x8e, 0x43, 0xc2, 0xf1, 0x75,
	0xd9, 0x9c, 0x4a, 0x28, 0xff, 0x72, 0xbf, 0xde, 0xda, 0x4d, 0xe5, 0xbc, 0xd0, 0x73, 0x0a, 0x0d,
	0x18, 0x5a, 0x98, 0xee, 0x6f, 0x55, 0x00, 0xf2, 0x31, 0x21, 0xd7, 0x61, 0xb1, 0xd9, 0x6a, 0xb6,
	0xb6, 0x63, 0x5f, 0x09, 0xa7, 0x10, 0x2b, 0x5d, 0x4a, 0x5e, 0x82, 0xe5, 0x66, 0x6b, 0xf8, 0xea,
	0x7a, 0x78, 0x38, 0x22, 0x98, 0x26, 0x80, 0xe1, 0xed, 0x78, 0xd9, 0x9d, 0x41, 0xd6, 0x8d, 0x83,
	0xa8, 0x6b, 0xc9, 0xa8, 0x09, 0x10, 0x1c, 0x87, 0xaf, 0x72, 0x8e, 0x15, 0x9b, 0xa3, 0x28, 0x25,
	0xaf, 0xc1, 0x05, 0xf6, 0xbb, 0x41, 0x33, 0xda, 0x61, 0x33, 0x79, 0x9b, 0x66, 0x07, 0xb1, 0xb2,
	0x8e, 0x04, 0xf2, 0x38, 0x04, 0x49, 0xf9, 0x35, 0x4e, 0x79, 0xbe, 0x40, 0xf9, 0x35, 0xe3, 0x5b,
	0x5e, 0x53, 0xdf, 0xb2, 0x50, 0xf8, 0x16, 0x05, 0x20, 0x2f, 0xc3, 0x29, 0xf6, 0xb7, 0x15, 0xc7,
	0x21, 0x77, 0x1b, 0x2c, 0x1a, 0xd4, 0x2c, 0x88, 0xa2, 0xc8, 0x4f, 0x72, 0x6a, 0x77, 0xf9, 0x11,
	0xf8, 0xa2, 0x49, 0x51, 0x02, 0xe4, 0x37, 0xbd, 0x56, 0xfc, 0x26, 0x28, 0x7c, 0x53, 0x11, 0x81,
	0xa9, 0xb0, 0x24, 0x1e, 0x64, 0x34, 0x69, 0x36, 0x64, 0x44, 0x8c, 0x56, 0x61, 0x28, 0xcb, 0x51,
	0x63, 0x30, 0x89, 0xdd, 0xa7, 0x61, 0xf0, 0x90, 0x51, 0x6a, 0x0f, 0xfa, 0x7c, 0x4f, 0x7a, 0xca,
	0x76, 0xe7, 0xdd, 0x2a, 0xc0, 0x71, 0xa4, 0x86, 0xfb, 0x9f, 0xca, 0x70, 0xda, 0x52, 0x82, 0xe4,
	0x1d, 0x58, 0xcc, 0x8e, 0xfa, 0x74, 0x9b, 0x66, 0x9e, 0xb4, 0x49, 0x56, 0x57, 0x45, 0x9c, 0xd7,
	0xaa, 0x19, 0xe7, 0x95, 0x4f, 0xc2, 0x1e, 0xcd, 0xbc, 0xd5, 0xe1, 0x2b, 0xab, 0x77, 0x65, 0x2d,
	0x43, 0xf1, 0xca, 0x12, 0xd4, 0x14, 0xc9, 0x37, 0x60, 0x91, 0xe1, 0xfb, 0xca, 0xef, 0xb7, 0xbc,
	0xf6, 0xd3, 0x27, 0xa3, 0x7e, 0x67, 0xef, 0x17, 0x68, 0x27, 0xe3, 0xf4, 0xf3, 0x80, 0x2b, 0x5d,
	0x86, 0x9a, 0x2a, 0xf9, 0x45, 0xa8, 0xa4, 0x7d, 0xda, 0x91, 0x36, 0xe5, 0xcf, 0x4f, 0xd7, 0xa6,
	0x2c, 0xac, 0x16, 0xf9, 0xf6, 0x9f, 0xfd, 0x43, 0xce, 0x98, 0xfc, 0xb2, 0x03, 0xf3, 0x69, 0xe6,
	0x65, 0x83, 0x54, 0xda, 0x94, 0x5f, 0x9f, 0x5d, 0x1b, 0x38, 0x9b, 0x5c, 0xd9, 0x8a, 0xff, 0x28,
	0xd9, 0xbb, 0xbf, 0x5d, 0x82, 0xf3, 0x16, 0xfe, 0x56, 0x90, 0x66, 0xd6, 0x00, 0x97, 0xa7, 0x3e,
	0xc0, 0xef, 0x8c, 0x0c, 0xf0, 0x09, 0xa9, 0xb3, 0xb6, 0xd9, 0xd4, 0x55, 0x89, 0x31, 0xb8, 0x1f,
	0xc0, 0x5c, 0x90, 0xd1, 0x5e, 0xca, 0xf7, 0x7d, 0xcb, 0x6b, 0x5f, 0x9d, 0x59, 0xcf, 0xe6, 0x16,
	0x7b, 0x93, 0xf1, 0x43, 0xc1, 0xd6, 0xfd, 0xeb, 0xe5, 0x42, 0x8f, 0x72, 0x9b, 0xe1, 0x4f, 0x43,
	0xd9, 0x7b, 0xa0, 0x76, 0x31, 0xd3, 0x3d, 0x00, 0x1d, 0xe3, 0x4b, 0x91, 0x7e, 0x87, 0xfb, 0x6d,
	0x64, 0x5c, 0xc9, 0x2f, 0x39, 0x30, 0xe7, 0x31, 0x5b, 0x46, 0x0e, 0xe6, 0x74, 0xbd, 0x7e, 0x63,
	0x8d, 0x24, 0x71, 0xda, 0xcf, 0x61, 0x28, 0x78, 0xf3, 0x56, 0x84, 0x71, 0xc7, 0x0b, 0xa5, 0xce,
	0x98, 0x6a, 0x2b, 0xb6, 0x18, 0xe1, 0x09, 0xad, 0xe0, 0x30, 0x14, 0xbc, 0xdd, 0x7f, 0x55, 0x81,
	0x0b, 0x63, 0x26, 0x08, 0xb9, 0x09, 0x73, 0xfd, 0x03, 0x2f, 0x55, 0xcb, 0xde, 0x8b, 0x6a, 0x6c,
	0x5b, 0xac, 0xf0, 0x93, 0x47, 0x2b, 0xc4, 0xaa, 0xc4, 0x4b, 0x51, 0xd4, 0x20, 0x5f, 0x90, 0xc1,
	0x64, 0x62, 0x05, 0xff, 0x31, 0x33, 0x98, 0xec, 0x93, 0x47, 0x2b, 0xb6, 0x30, 0x18, 0x11, 0x66,
	0x7f, 0x9e, 0xed, 0xa8, 0xe2, 0xc8, 0x0f, 0x98, 0x7e, 0x17, 0x0e, 0xa3, 0x29, 0x6f, 0x2e, 0xeb,
	0x8a, 0xba, 0xb1, 0x99, 0xd2, 0x0c, 0xd1, 0x60, 0x4e, 0xde, 0x02, 0x12, 0xef, 0x09, 0xb3, 0xe0,
	0xb6, 0x88, 0xc4, 0x55, 0x27, 0x86, 0xe5, 0xfc, 0x10, 0xe3, 0xce, 0x08, 0x06, 0x8e, 0xa9, 0x45,
	0xde, 0x87, 0x05, 0xe1, 0x0a, 0x13, 0x07, 0x07, 0xcb, 0x6b, 0x38, 0xcd, 0x6f, 0x12, 0xde, 0xb6,
	0xdc, 0x72, 0x13, 0xff, 0x53, 0x54, 0x3c, 0x89, 0x07, 0xcb, 0xa1, 0x97, 0x66, 0xf5, 0x03, 0xda,
	0x39, 0xa4, 0xbe, 0xb4, 0x20, 0xff, 0xc4, 0x09, 0xd5, 0x57, 0xd0, 0xa3, 0xb9, 0x4b, 0x6a, 0x2b,
	0x27, 0x83, 0x26, 0x4d, 0xf7, 0x63, 0x66, 0xcc, 0x4b, 0x57, 0xe2, 0xa7, 0x7d, 0x2d, 0x3c, 0xb2,
	0xd6, 0xc2, 0xfb, 0x33, 0xf0, 0xaf, 0x4c, 0x5c, 0x05, 0xff, 0x4c, 0x71, 0x15, 0xfc, 0xea, 0x2c,
	0xb8, 0x1f, 0xbf, 0xfe, 0xfd, 0x87, 0x32, 0x9c, 0x52, 0x7e, 0x20, 0xdf, 0x8f, 0x23, 0x6b, 0x3c,
	0x9d, 0x99, 0x8e, 0x67, 0x69, 0x26, 0xe3, 0xf9, 0x81, 0x1c, 0xcf, 0xf2, 0xf4, 0xbd, 0x21, 0x66,
	0x3f, 0x4d, 0x1c, 0xd4, 0x8f, 0xf2, 0x41, 0x15, 0xd3, 0xe1, 0x4f, 0xcd, 0xac, 0x09, 0xc7, 0x8f,
	0xec, 0xbf, 0x2b, 0xc1, 0x39, 0x13, 0x7d, 0xc4, 0xb0, 0x71, 0x66, 0x6a, 0xd8, 0x94, 0xa6, 0x6e,
	0xd8, 0xbc, 0xaf, 0x0c, 0x9b, 0xf2, 0xf4, 0xa3, 0x5a, 0xcd, 0x8e, 0x9a, 0x60, 0xd7, 0xfc, 0xb3,
	0x42, 0x7f, 0x72, 0xb3, 0xe6, 0x06, 0x2c, 0x49, 0xf7, 0xb3, 0xf6, 0xfd, 0xe8, 0x48, 0xcd, 0xba,
	0x02, 0x60, 0x8e, 0x43, 0x3e, 0x07, 0x0b, 0x43, 0x2b, 0x6e, 0x5b, 0x2b, 0x72, 0x15, 0xad, 0xad,
	0xe0, 0x27, 0x88, 0xd1, 0xfe, 0xa6, 0x03, 0x8b, 0xf1, 0x90, 0x26, 0x49, 0x20, 0x37, 0x8f, 0xcb,
	0x6b, 0x77, 0xa7, 0xd9, 0x2b, 0x77, 0x24, 0xed, 0x7c, 0x58, 0x54, 0x09, 0x6a, 0xbe, 0xe4, 0x45,
	0x98, 0x7b, 0xe0, 0x65, 0x9d, 0x03, 0xbe, 0x21, 0x5d, 0xcc, 0x3b, 0xef, 0x3e, 0x2b, 0x44, 0x01,
	0x73, 0x3f, 0x2c, 0x01, 0x19, 0x95, 0x5d, 0xf2, 0x8a, 0x6d, 0x74, 0x7c, 0xa6, 0x68, 0x74, 0x08,
	0xcf, 0xbc, 0x65, 0x6c, 0x7c, 0x0e, 0x16, 0x7a, 0x34, 0x4d, 0xbd, 0xae, 0xda, 0x2e, 0xe7, 0x07,
	0x2e, 0xa2, 0x18, 0x15, 0x9c, 0xa1, 0x1e, 0x50, 0x2f, 0xcc, 0x0e, 0x8e, 0x64, 0x58, 0x88, 0x46,
	0x7d, 0x53, 0x14, 0xa3, 0x82, 0x17, 0x17, 0xcd, 0xf2, 0x0c, 0x16, 0xcd, 0xbf, 0xe3, 0xc0, 0xa5,
	0xb1, 0x1e, 0xf7, 0xa7, 0x70, 0x8f, 0x92, 0x35, 0x80, 0x5e, 0x10, 0x89, 0xf3, 0x2c, 0x15, 0x64,
	0xa1, 0xf5, 0xe1, 0xb6, 0x86, 0xa0, 0x81, 0xc5, 0xeb, 0x78, 0x0f, 0x55, 0x9d, 0x72, 0xa1, 0x8e,
	0x86, 0xa0, 0x81, 0xe5, 0xfe, 0xeb, 0x12, 0x2c, 0xcb, 0xc6, 0x7e, 0xea, 0x37, 0x44, 0x0f, 0xed,
	0x0d, 0x51, 0x7b, 0x06, 0x7a, 0x63, 0x82, 0xca, 0xf8, 0x9b, 0x0e, 0x9c, 0x91, 0x18, 0x2a, 0x12,
	0xe4, 0xa7, 0x61, 0x51, 0x46, 0x64, 0xa4, 0xc5, 0x20, 0x3e, 0x19, 0x30, 0x91, 0xf2, 0xe0, 0x0b,
	0x8d, 0x45, 0x7e, 0x1c, 0x2a, 0xfd, 0xd8, 0x4f, 0x47, 0x0e, 0xea, 0x63, 0x5f, 0x60, 0x72, 0x28,
	0xf9, 0x12, 0x9c, 0x96, 0x35, 0x8c, 0x13, 0x75, 0xc3, 0xe3, 0xd9, 0x36, 0x81, 0x68, 0xe3, 0xba,
	0xdf, 0xa9, 0xe8, 0x76, 0xaa, 0x98, 0xa0, 0x4f, 0xbb, 0x19, 0xf0, 0xa1, 0x63, 0xd9, 0x01, 0xb3,
	0x58, 0x84, 0x65, 0x57, 0x4d, 0xb4, 0x04, 0xbe, 0x55, 0xb4, 0x04, 0xbe, 0x31, 0xc3, 0x46, 0x1c,
	0x6b, 0x0b, 0xc8, 0xa3, 0x67, 0x75, 0x14, 0x20, 0x5d, 0x87, 0xe6, 0xd1, 0xb3, 0x02, 0xa1, 0x89,
	0xe7, 0xfe, 0xef, 0xb2, 0x56, 0x59, 0x2a, 0x98, 0x25, 0x88, 0xfc, 0x20, 0xea, 0x7e, 0xea, 0xc5,
	0xe3, 0x97, 0x6d, 0xf1, 0xa0, 0xb3, 0x1b, 0x19, 0xd9, 0x63, 0x13, 0xa5, 0xe4, 0xd7, 0x8a, 0x52,
	0xd2, 0x9d, 0x7d, 0x5b, 0x8e, 0x37, 0x1c, 0xbf, 0x5b, 0x82, 0xcf, 0x8c, 0xad, 0xd7, 0xa0, 0x99,
	0x17, 0x84, 0x7f, 0x84, 0x63, 0x5f, 0x99, 0xc9, 0xd8, 0x5f, 0x87, 0x8a, 0x96, 0x2c, 0xc3, 0xae,
	0xe2, 0x01, 0x95, 0x1c, 0x42, 0x3e, 0x0f, 0x8b, 0x5e, 0xe4, 0x85, 0x47, 0x69, 0xa0, 0x8e, 0x12,
	0x74, 0x8b, 0x6b, 0xb2, 0x1c, 0x35, 0x86, 0xfb, 0x7b, 0x25, 0x78, 0x61, 0x6c, 0x7f, 0x7d, 0xea,
	0x2d, 0xee, 0x8f, 0x1c, 0xdb, 0xe4, 0xf6, 0x66, 0x2e, 0x9a, 0x13, 0x16, 0xd2, 0xdf, 0x77, 0x26,
	0x74, 0xb1, 0x3a, 0x8f, 0x94, 0x06, 0x36, 0xd2, 0xfd, 0xe2, 0x79, 0x64, 0x5d, 0x43, 0xd0, 0xc0,
	0xe2, 0xb7, 0x12, 0x65, 0x18, 0x1e, 0xdd, 0x97, 0xa2, 0x90, 0xdf, 0x4a, 0xd4, 0x10, 0x34, 0xb0,
	0xc8, 0x4b, 0x30, 0xef, 0x27, 0x47, 0x38, 0x50, 0xe1, 0x6a, 0x7a, 0x02, 0x35, 0x78, 0x29, 0x4a,
	0xa8, 0x38, 0x8d, 0xf2, 0xfa, 0xfc, 0x16, 0xc8, 0x50, 0xba, 0xfb, 0xe6, 0xcc, 0xd3, 0xa8, 0x1c,
	0x86, 0x16, 0x26, 0x0f, 0x6e, 0x3b, 0x66, 0xca, 0x92, 0x9a, 0x6d, 0x2f, 0xff, 0x64, 0xd1, 0x5e,
	0xbe, 0x32, 0xb6, 0xf2, 0x24, 0xfb, 0xb9, 0xf4, 0x04, 0xfb, 0x79, 0x0d, 0x20, 0xa1, 0x59, 0x72,
	0xc4, 0x2f, 0x90, 0xcb, 0xaf, 0xd0, 0x7d, 0x84, 0x1a, 0x82, 0x06, 0x96, 0xfb, 0x07, 0x0e, 0x5c,
	0xb4, 0x1b, 0xf1, 0x47, 0xae, 0x35, 0xca, 0x7f, 0x3c, 0x5a, 0xc3, 0xfd, 0xf7, 0xf9, 0x1e, 0x47,
	0x7e, 0xfa, 0xa7, 0x5e, 0x01, 0xfc, 0xa2, 0x3d, 0xff, 0xdf, 0x9e, 0xe1, 0xfc, 0x1f, 0x3f, 0xf1,
	0xff, 0xf3, 0x48, 0x9f, 0xf2, 0x19, 0xff, 0x74, 0xb7, 0xa6, 0xf9, 0x26, 0x3d, 0x8e, 0xe8, 0xad,
	0x24, 0xee, 0xc9, 0xf1, 0x33, 0x36, 0xe9, 0x12, 0x80, 0x39, 0x0e, 0xf9, 0x0a, 0x54, 0x23, 0xaf,
	0x47, 0xd3, 0xbe, 0xd7, 0xa1, 0xed, 0x4e, 0xdc, 0xa7, 0xbe, 0xba, 0xe4, 0xab, 0xe2, 0x1a, 0x3f,
	0xfb, 0xf8, 0xd1, 0x4a, 0x75, 0x67, 0x02, 0x0e, 0x4e, 0xac, 0x4d, 0x30, 0x0f, 0x76, 0x2b, 0xd0,
	0x15, 0xd1, 0xe9, 0x57, 0xcc, 0x40, 0xb7, 0x02, 0xd5, 0x09, 0x35, 0x47, 0xd4, 0xcd, 0xdc, 0x89,
	0xd5, 0xcd, 0xf7, 0x4a, 0xc5, 0xc9, 0x2a, 0xf5, 0xcc, 0x1b, 0xb6, 0x9e, 0xf9, 0xf1, 0xa2, 0x9e,
	0xb9, 0x60, 0xd7, 0xb2, 0x14, 0x4c, 0xc1, 0xad, 0x5f, 0xfa, 0xe3, 0x74, 0xeb, 0x1b, 0xca, 0xae,
	0x3c, 0x03, 0x65, 0xf7, 0x1f, 0xaf, 0xe8, 0x5d, 0x32, 0x17, 0xcb, 0x17, 0x61, 0xce, 0xa7, 0x7b,
	0x83, 0xae, 0xdc, 0xc6, 0x6b, 0x91, 0x6e, 0xb0, 0x42, 0x14, 0x30, 0x52, 0x83, 0xb3, 0x1d, 0xf3,
	0x44, 0xa4, 0xd9, 0x28, 0x46, 0x1a, 0xd7, 0x6d, 0x30, 0x16, 0xf1, 0x99, 0x40, 0xf7, 0x93, 0x98,
	0x29, 0x29, 0x1d, 0x03, 0xa4, 0x05, 0xba, 0xa5, 0x00, 0x98, 0xe3, 0x30, 0xfb, 0xff, 0x70, 0xb0,
	0xa7, 0x53, 0x25, 0x54, 0x6c, 0xfb, 0x7f, 0x33, 0x07, 0xa1, 0x89, 0x47, 0x7e, 0xc3, 0x81, 0x33,
	0x1d, 0x6b, 0xff, 0x3a, 0x93, 0xb8, 0x37, 0x8b, 0x83, 0x11, 0xc4, 0x6e, 0x95, 0x63, 0xa1, 0x25,
	0xe4, 0x2f, 0x38, 0xb0, 0xc4, 0x1a, 0xdb, 0x4f, 0xe2, 0x87, 0x47, 0xf2, 0x98, 0xe3, 0xab, 0xd3,
	0x0e, 0x0d, 0x6c, 0x31, 0xe2, 0x3c, 0x54, 0x46, 0x77, 0xb0, 0x2e, 0xc6, 0x9c, 0x3d, 0x8f, 0xd9,
	0x61, 0xff, 0x42, 0x9a, 0xf1, 0x30, 0x8a, 0x29, 0x9f, 0x24, 0x6c, 0x0a, 0xd2, 0x76, 0xcc, 0x8e,
	0x2c, 0x44, 0xc5, 0x98, 0xfc, 0x0d, 0x07, 0xce, 0xe9, 0x3b, 0x1b, 0x28, 0xf2, 0xcb, 0xc8, 0x7b,
	0x0e, 0xef, 0x4c, 0x79, 0xfe, 0x59, 0x3c, 0x8c, 0xf8, 0x9f, 0x02, 0x04, 0x47, 0xda, 0x43, 0xfe,
	0xb2, 0x03, 0xa7, 0xcc, 0x7b, 0x0f, 0x32, 0x4d, 0xc2, 0x57, 0xa6, 0x7b, 0x18, 0x9a, 0xd3, 0xcf,
	0x15, 0xa1, 0x59, 0x8a, 0x56, 0x1b, 0xb8, 0xa0, 0xa7, 0x59, 0x9c, 0x78, 0x5d, 0xba, 0xee, 0x75,
	0x0e, 0x69, 0x24, 0x42, 0x51, 0xa6, 0x2c, 0xe8, 0x6d, 0x8b, 0x83, 0x11, 0xb6, 0x67, 0x95, 0x63,
	0xa1, 0x25, 0x24, 0x81, 0x8a, 0x37, 0xc8, 0x0e, 0xe4, 0xe5, 0xe1, 0xd6, 0x54, 0xcf, 0xae, 0x07,
	0xd9, 0x41, 0x6e, 0xcb, 0xb0, 0x7f, 0xc8, 0x79, 0x91, 0x5f, 0x80, 0xd2, 0x81, 0xc7, 0x63, 0x65,
	0x96, 0xd7, 0x76, 0xa6, 0xc9, 0xf1, 0xcd, 0xda, 0x3a, 0x48, 0x7e, 0xa5, 0x37, 0x6b, 0x58, 0x3a,
	0xf0, 0xc8, 0xb7, 0x1d, 0x58, 0x4a, 0x3b, 0x07, 0xd4, 0x1f, 0x84, 0x32, 0x63, 0xc2, 0x94, 0x63,
	0x52, 0xd8, 0x44, 0x69, 0x2b, 0x06, 0xf6, 0x64, 0xd6, 0xc5, 0x98, 0x37, 0x81, 0xfc, 0x3d, 0x07,
	0xce, 0x33, 0xb9, 0x4d, 0xe2, 0x30, 0xa4, 0x89, 0x8a, 0xf8, 0x3d, 0x33, 0x7d, 0x4f, 0x01, 0x6b,
	0x58, 0xbd, 0xc8, 0x88, 0x37, 0x50, 0x27, 0x1d, 0x19, 0x01, 0xe3, 0x68, 0xd3, 0x78, 0x0f, 0x6a,
	0x7e, 0x3c, 0x11, 0xce, 0x0c, 0x7a, 0xb0, 0xa6, 0xf0, 0xec, 0x1e, 0xd4, 0xc5, 0x98, 0x37, 0x81,
	0xfc, 0x6d, 0x07, 0x2e, 0xca, 0x66, 0xb6, 0x42, 0x2f, 0xa2, 0xea, 0xee, 0x50, 0xf5, 0xf9, 0xe9,
	0xeb, 0x46, 0xe3, 0x6a, 0xd2, 0xfa, 0x67, 0x65, 0xab, 0x2e, 0xd6, 0xc7, 0x30, 0xc7, 0xb1, 0x4d,
	0x22, 0x09, 0x94, 0x3b, 0x51, 0x50, 0x3d, 0xcf, 0x5b, 0x36, 0x5d, 0xe7, 0xb0, 0x88, 0x77, 0x35,
	0x22, 0xea, 0x77, 0x9a, 0xc8, 0x98, 0x91, 0x0f, 0x60, 0xde, 0xe3, 0x77, 0x0e, 0xaa, 0x64, 0x06,
	0x49, 0x62, 0xf4, 0x6d, 0x86, 0x7c, 0x87, 0x2a, 0xca, 0x50, 0x72, 0x25, 0x5f, 0x85, 0xe7, 0xbd,
	0x30, 0x8c, 0x1f, 0xdc, 0x8f, 0x93, 0x43, 0xa6, 0x08, 0xd3, 0x3b, 0x91, 0xb8, 0x5d, 0x93, 0x56,
	0x2f, 0x70, 0xd3, 0x65, 0x45, 0x56, 0x7c, 0xbe, 0x36, 0x1e, 0x0d, 0x27, 0xd5, 0x67, 0x76, 0xd4,
	0xd0, 0x1b, 0x84, 0xd9, 0xdd, 0xf8, 0x90, 0x46, 0xd5, 0x8b, 0xf6, 0xc6, 0xfa, 0x9e, 0x86, 0xa0,
	0x81, 0x45, 0x22, 0x28, 0xf7, 0xf7, 0x6f, 0x56, 0x2f, 0xf1, 0xbe, 0xb8, 0x33, 0xd5, 0x00, 0xf6,
	0x5b, 0x37, 0xf3, 0xee, 0x6f, 0xdd, 0xba, 0x89, 0x8c, 0x11, 0x77, 0x87, 0x06, 0x69, 0x3f, 0xf4,
	0xc4, 0xfd, 0xa7, 0xcb, 0x05, 0x77, 0x68, 0x0e, 0x42, 0x13, 0x8f, 0xbc, 0x2b, 0x62, 0x98, 0xaa,
	0x33, 0x18, 0x32, 0x7d, 0x35, 0xab, 0x10, 0xb9, 0xf4, 0x79, 0x58, 0xa4, 0x0f, 0x33, 0x9a, 0x44,
	0x5e, 0x58, 0x7d, 0x81, 0x8f, 0x8c, 0xde, 0xe8, 0x6c, 0xc8, 0x72, 0xd4, 0x18, 0xac, 0x81, 0xf4,
	0x30, 0xad, 0x5e, 0x99, 0x7e, 0x03, 0x37, 0x36, 0xed, 0x06, 0x6e, 0x6c, 0xb6, 0x91, 0xf1, 0x22,
	0x6d, 0xb8, 0xe4, 0xc7, 0x9d, 0x43, 0xb6, 0x15, 0xe0, 0x97, 0x7a, 0x90, 0x76, 0x83, 0x34, 0x4b,
	0x8e, 0xaa, 0x9f, 0xb1, 0xc3, 0x79, 0x1b, 0xe3, 0x90, 0x70, 0x7c, 0x5d, 0xb2, 0x0d, 0x17, 0xde,
	0x1d, 0x78, 0x47, 0x45, 0x92, 0x9f, 0xb5, 0x0e, 0x09, 0x2f, 0xfc, 0xdc, 0x28, 0x0a, 0x8e, 0xab,
	0x47, 0xde, 0x02, 0xd2, 0xed, 0x8c, 0x34, 0xf0, 0x2a, 0xa7, 0xa6, 0x83, 0x7b, 0x6e, 0xd7, 0xb1,
	0x48, 0x6c, 0x4c, 0x2d, 0x46, 0xeb, 0xf0, 0xf5, 0xb4, 0x48, 0xeb, 0x9a, 0x4d, 0x6b, 0xf3, 0xf5,
	0xf6, 0x08, 0xad, 0xd1, 0x5a, 0x4c, 0x0c, 0x07, 0x29, 0x7d, 0x33, 0x4e, 0x33, 0x7e, 0xc5, 0x7f,
	0x85, 0x8f, 0xaf, 0x16, 0xc3, 0xdd, 0x1c, 0x84, 0x26, 0x1e, 0x17, 0xc3, 0xc3, 0xb4, 0x7a, 0x7d,
	0x26, 0xe9, 0xa5, 0x6c, 0x31, 0x64, 0xa3, 0xec, 0x1d, 0xa6, 0x8c, 0x65, 0xf7, 0x90, 0x56, 0x7f,
	0x6c, 0xfa, 0x2c, 0x6f, 0x6f, 0x6e, 0x58, 0x2c, 0x6f, 0x6f, 0x6e, 0x20, 0xe3, 0xe5, 0xfe, 0xad,
	0x0a, 0x9c, 0xb6, 0x42, 0x58, 0xc8, 0x9f, 0xb4, 0x37, 0xa5, 0x57, 0x8b, 0x9b, 0x52, 0x15, 0xc7,
	0xf2, 0xac, 0xee, 0x2e, 0x7e, 0x95, 0x4f, 0x28, 0xc1, 0x72, 0xf1, 0x2a, 0x9f, 0x50, 0x7a, 0x0a,
	0xce, 0x50, 0x1f, 0xc8, 0xf3, 0xd4, 0x8a, 0x8d, 0xaa, 0x0e, 0x53, 0x15, 0x9c, 0xb4, 0x26, 0xac,
	0x84, 0xe2, 0x0c, 0xe6, 0x59, 0x16, 0x2c, 0x15, 0x6e, 0x37, 0xff, 0x43, 0x85, 0xdb, 0x2d, 0xfc,
	0xe8, 0x85, 0xdb, 0x2d, 0x3e, 0x4b, 0xb8, 0x9d, 0xfb, 0x1b, 0x65, 0x58, 0xd2, 0x6c, 0xc8, 0x2b,
	0xb2, 0x73, 0x6c, 0x19, 0x51, 0x9d, 0x73, 0x5a, 0x23, 0x1a, 0x1d, 0xb3, 0xa5, 0x0f, 0x60, 0x84,
	0x84, 0xbc, 0x6a, 0x9f, 0x8b, 0x7c, 0xf2, 0x68, 0xc5, 0xcd, 0x93, 0x78, 0xde, 0xe8, 0xc4, 0x09,
	0xbd, 0x31, 0x7c, 0x25, 0xff, 0xd8, 0xc2, 0x51, 0x5b, 0x0d, 0x16, 0x53, 0x3a, 0xa4, 0x49, 0x90,
	0x1d, 0xc9, 0xad, 0xb9, 0x4a, 0x30, 0xb3, 0xd8, 0x96, 0xe5, 0x9f, 0x08, 0xbb, 0x4e, 0x56, 0x97,
	0x85, 0xa8, 0xab, 0x91, 0x21, 0x90, 0xd0, 0x4b, 0xb3, 0xbb, 0x89, 0x17, 0xa5, 0xa2, 0xb1, 0x6c,
	0x23, 0x57, 0x79, 0xea, 0x98, 0x04, 0xdd, 0x93, 0x5b, 0x23, 0xd4, 0x70, 0x0c, 0x07, 0x71, 0xc3,
	0xd7, 0x4b, 0xf5, 0x01, 0xa1, 0x71, 0xc3, 0x97, 0x95, 0xa2, 0x84, 0x9a, 0x73, 0x6a, 0xfe, 0xf8,
	0x39, 0xe5, 0x7e, 0xcf, 0x81, 0x91, 0x4d, 0x21, 0xb3, 0x7e, 0x84, 0xde, 0x97, 0xfe, 0xd0, 0xa9,
	0x2a, 0x14, 0xb1, 0xd0, 0xd8, 0xd6, 0x8f, 0x28, 0x43, 0xc9, 0x95, 0xb5, 0x5f, 0x66, 0x5f, 0x2d,
	0xea, 0x04, 0xb5, 0x6d, 0x55, 0x70, 0xf7, 0xff, 0x96, 0x01, 0x72, 0x8a, 0x4c, 0x63, 0x87, 0xc1,
	0x90, 0x22, 0x65, 0x5b, 0x34, 0x2a, 0xdd, 0x3c, 0x79, 0xe8, 0x47, 0x0e, 0x42, 0x13, 0x8f, 0x33,
	0x8c, 0xe3, 0xac, 0x11, 0x24, 0x23, 0x0c, 0x45, 0x31, 0x2a, 0x38, 0x37, 0x4d, 0x38, 0xbf, 0x83,
	0xc1, 0x9e, 0x76, 0xee, 0xe4, 0xa6, 0x49, 0x0e, 0x42, 0x13, 0x8f, 0xdc, 0x86, 0xf3, 0xfa, 0xaf,
	0xca, 0x50, 0x54, 0xcc, 0xd6, 0xd8, 0x28, 0x22, 0xe0, 0x68, 0x1d, 0x52, 0x83, 0xb3, 0x89, 0x5c,
	0x9f, 0xb6, 0x83, 0x24, 0x89, 0x93, 0x54, 0x0a, 0x83, 0xf6, 0x4e, 0xa1, 0x0d, 0xc6, 0x22, 0x3e,
	0xd9, 0x83, 0x2b, 0x82, 0x6e, 0x9d, 0x46, 0x59, 0x9c, 0xb6, 0xbc, 0xce, 0x21, 0x93, 0x09, 0xda,
	0x8f, 0x77, 0x93, 0x50, 0x4a, 0x8c, 0x4e, 0x2f, 0xd6, 0x98, 0x88, 0x89, 0xc7, 0x50, 0xc9, 0x79,
	0xec, 0xee, 0x0d, 0xa2, 0x6c, 0x50, 0xe0, 0xb1, 0x30, 0x8e, 0xc7, 0x38, 0x4c, 0x3c, 0x86, 0x8a,
	0xfb, 0x6f, 0x4a, 0xb0, 0xbc, 0x51, 0x5f, 0xd3, 0x49, 0xe7, 0xec, 0x24, 0x71, 0xce, 0x84, 0x24,
	0x71, 0x0d, 0x2b, 0x49, 0x5c, 0x03, 0xce, 0x15, 0x93, 0xcb, 0x4a, 0x11, 0xd0, 0x3e, 0x93, 0x91,
	0x74, 0xb4, 0x23, 0x35, 0xc8, 0xeb, 0x70, 0x4a, 0xd1, 0xbc, 0x9b, 0x47, 0x84, 0x69, 0xc7, 0x46,
	0xd3, 0x80, 0xa1, 0x85, 0x49, 0xfe, 0x9c, 0x93, 0xe7, 0xa3, 0x9c, 0x41, 0x38, 0xa2, 0xd1, 0x3d,
	0xc7, 0xe6, 0xa5, 0x74, 0xff, 0x7b, 0x09, 0xc8, 0x28, 0x32, 0xf9, 0x32, 0x9c, 0x91, 0x97, 0xc1,
	0x1b, 0x51, 0x6a, 0xdc, 0x26, 0xd4, 0xae, 0x11, 0x69, 0x32, 0x35, 0x76, 0xda, 0xdc, 0x1c, 0x2f,
	0x60, 0xf3, 0x8b, 0xe7, 0xfc, 0x22, 0xba, 0xaa, 0x5e, 0x48, 0x6e, 0x25, 0xee, 0xac, 0xab, 0xda,
	0x36, 0xae, 0x48, 0xf6, 0xc3, 0xc9, 0x35, 0xfb, 0x35, 0xdf, 0x4f, 0xd4, 0x9d, 0xf7, 0x25, 0x33,
	0xd9, 0x8f, 0x80, 0xb7, 0x24, 0x1c, 0x47, 0x6a, 0xb0, 0x09, 0x23, 0xc8, 0xe6, 0x44, 0x2a, 0xf6,
	0x84, 0x11, 0x8d, 0xc8, 0x69, 0x14, 0xf1, 0x99, 0xde, 0x15, 0xb7, 0xd1, 0x8b, 0x7a, 0x57, 0x5c,
	0x56, 0x47, 0x09, 0xcd, 0xaf, 0xff, 0xcf, 0x4f, 0xbe, 0xfe, 0xef, 0x7e, 0xbc, 0x00, 0x90, 0x5b,
	0xeb, 0x46, 0xd6, 0x06, 0xe7, 0xd8, 0xac, 0x0d, 0x53, 0xcb, 0x2c, 0xbb, 0x06, 0x40, 0x0f, 0x35,
	0x85, 0x42, 0x2a, 0xc5, 0x8d, 0xcd, 0xb6, 0xaa, 0x6a, 0x60, 0x91, 0xaf, 0xc1, 0x52, 0x27, 0xa1,
	0x5e, 0x46, 0xfd, 0x5a, 0xf6, 0x0c, 0xeb, 0x5c, 0x7e, 0x98, 0xa3, 0x88, 0x60, 0x4e, 0x8f, 0xf7,
	0xae, 0x58, 0xde, 0x8b, 0xbd, 0x6b, 0x2f, 0xdc, 0x57, 0xa0, 0xd4, 0xf1, 0x64, 0xd7, 0x6a, 0x17,
	0x55, 0xbd, 0x86, 0xa5, 0x8e, 0xc7, 0x14, 0x78, 0xe0, 0xf5, 0x30, 0x0e, 0x55, 0x7a, 0x44, 0xad,
	0xc0, 0x9b, 0xb5, 0x6d, 0x56, 0x8c, 0x0a, 0x6e, 0x26, 0x80, 0x5d, 0x9c, 0xc9, 0x3e, 0xec, 0xf8,
	0x04, 0xb0, 0xef, 0xc3, 0x42, 0x18, 0x77, 0xbb, 0x41, 0xd4, 0x9d, 0x45, 0xfe, 0xd9, 0x8d, 0xcd,
	0xf6, 0x96, 0xa0, 0x2e, 0xd8, 0xcb, 0x3f, 0xa8, 0x78, 0xe6, 0x89, 0x48, 0x61, 0xfa, 0x89, 0x48,
	0x37, 0x4e, 0x9a, 0x88, 0xf4, 0x57, 0x1c, 0x80, 0x28, 0xf6, 0x69, 0x37, 0x89, 0x07, 0x7d, 0x95,
	0x76, 0xf6, 0x2b, 0xd3, 0x1e, 0x86, 0xd8, 0x17, 0x29, 0x7f, 0x73, 0xe9, 0xd6, 0x45, 0x29, 0x1a,
	0xfc, 0x9f, 0x3d, 0xe5, 0xe2, 0xd7, 0xe1, 0x7c, 0xfe, 0xcd, 0xb2, 0xab, 0xc9, 0x0a, 0xcc, 0x31,
	0xab, 0x55, 0xa4, 0x67, 0x93, 0x49, 0x45, 0x99, 0xaa, 0x4f, 0x51, 0x94, 0x9b, 0xd1, 0xa4, 0xa5,
	0x27, 0x5c, 0xb6, 0xff, 0xfb, 0x0e, 0xd7, 0x15, 0x8a, 0xf4, 0x6f, 0xe5, 0xc7, 0x3d, 0xb2, 0x48,
	0xe6, 0x80, 0xfb, 0xf9, 0xd9, 0x0c, 0xa3, 0x12, 0x25, 0xad, 0x60, 0x46, 0x40, 0x58, 0x68, 0x8f,
	0xfb, 0x3f, 0x45, 0x8b, 0xd5, 0xfa, 0xf1, 0x45, 0x33, 0xa1, 0x55, 0xe0, 0x27, 0xb2, 0x53, 0xce,
	0x1f, 0x9b, 0xcc, 0x2a, 0xf0, 0x79, 0xc2, 0x18, 0x15, 0x60, 0xc9, 0xeb, 0x95, 0x8e, 0x09, 0xc5,
	0xb4, 0x30, 0x49, 0x0f, 0xca, 0xc3, 0xbe, 0x8a, 0x1b, 0xc3, 0x29, 0x3b, 0x81, 0xee, 0xb5, 0xea,
	0x62, 0x1b, 0x7c, 0xaf, 0x55, 0x47, 0xc6, 0xc7, 0xfd, 0x5f, 0x00, 0xa7, 0x4c, 0x69, 0x3b, 0x41,
	0x42, 0xc0, 0xab, 0x50, 0xf6, 0x12, 0xa5, 0xbc, 0xf3, 0x2c, 0x3b, 0xb8, 0x83, 0xac, 0x7c, 0xbc,
	0xa6, 0x2f, 0x3f, 0x83, 0xa6, 0x9f, 0xa9, 0xd6, 0xfe, 0x1a, 0x2c, 0x0d, 0x78, 0x52, 0x3e, 0x46,
	0x7c, 0xee, 0xd9, 0x89, 0xef, 0x2a, 0x22, 0x98, 0xd3, 0x33, 0x96, 0x84, 0xf9, 0x63, 0x97, 0x84,
	0xd7, 0xe1, 0x54, 0xc7, 0xeb, 0x7b, 0x9d, 0x20, 0x3b, 0xba, 0x9b, 0xbf, 0x39, 0x90, 0xa7, 0x6a,
	0x30, 0x60, 0x68, 0x61, 0x32, 0xc1, 0x34, 0xed, 0x30, 0xf5, 0xfe, 0x00, 0x17, 0x4c, 0xd3, 0x5c,
	0x4b, 0xd1, 0xc6, 0x33, 0xb3, 0xd6, 0x2c, 0x4d, 0xce, 0x5a, 0xa3, 0x32, 0x29, 0xc1, 0x84, 0x4c,
	0x4a, 0x7f, 0x56, 0xa9, 0xe1, 0xe5, 0xe9, 0xe7, 0x61, 0x35, 0xa5, 0xf1, 0xc9, 0x8a, 0x78, 0x86,
	0xef, 0x0f, 0x58, 0x0d, 0x39, 0xc9, 0xfb, 0x03, 0x6c, 0xd8, 0x79, 0x3e, 0x2b, 0xf9, 0x02, 0x41,
	0x3e, 0xec, 0x3c, 0xe3, 0x15, 0x4a, 0x28, 0xf9, 0x8e, 0x03, 0xa7, 0x53, 0x33, 0x21, 0x94, 0x3c,
	0xfb, 0x79, 0x67, 0xca, 0xb3, 0xdd, 0x4a, 0x3a, 0x25, 0x13, 0x34, 0x99, 0x45, 0x68, 0xb7, 0x82,
	0xbc, 0x01, 0xa7, 0x7d, 0xf9, 0xce, 0x46, 0x33, 0xba, 0x1d, 0xac, 0xf3, 0x93, 0x1e, 0x23, 0xd2,
	0xa3, 0x91, 0x03, 0xd7, 0xd1, 0x46, 0x35, 0x2d, 0x98, 0x73, 0x4f, 0xb0, 0x60, 0xec, 0xa4, 0xed,
	0xe7, 0xa7, 0x9f, 0xb4, 0xdd, 0xd8, 0x08, 0x1c, 0x9f, 0xb4, 0xfd, 0x99, 0x97, 0xce, 0x1f, 0xe6,
	0x81, 0x86, 0x7f, 0x5b, 0x82, 0xc5, 0x8d, 0xac, 0xe3, 0xab, 0xab, 0x19, 0xbe, 0x97, 0x79, 0x6c,
	0xe7, 0x5e, 0x48, 0xc1, 0xd9, 0x10, 0xc5, 0xa8, 0xe0, 0x3c, 0x3f, 0x62, 0x90, 0x76, 0xe2, 0x21,
	0x4d, 0x8e, 0x76, 0x71, 0xab, 0xb8, 0xa4, 0x34, 0x0c, 0x18, 0x5a, 0x98, 0x6c, 0x0b, 0x41, 0x43,
	0x91, 0xe6, 0x80, 0x29, 0xaf, 0x78, 0x90, 0x49, 0x07, 0xa4, 0xde, 0x42, 0x6c, 0xd8, 0x60, 0x2c,
	0xe2, 0x33, 0x7d, 0x40, 0xa3, 0x61, 0x31, 0xb3, 0xda, 0x46, 0x34, 0x44, 0x56, 0x4e, 0xb6, 0xe1,
	0xc2, 0x01, 0xf5, 0x92, 0x6c, 0x8f, 0x7a, 0x99, 0x8a, 0xfe, 0xd9, 0x4e, 0x65, 0xa4, 0x90, 0x76,
	0xa8, 0xbf, 0x39, 0x8a, 0x82, 0xe3, 0xea, 0x99, 0x97, 0x98, 0xe6, 0x8f, 0xbf, 0xc4, 0xe4, 0xfe,
	0xa6, 0x03, 0xcb, 0x46, 0xc6, 0x11, 0xb6, 0xe3, 0x0b, 0x54, 0x76, 0x6c, 0x3e, 0x42, 0xc5, 0x1d,
	0x5f, 0xd3, 0x82, 0x62, 0x01, 0x9b, 0xb4, 0xe0, 0xa2, 0xdc, 0x3e, 0xd9, 0x54, 0x4a, 0xb6, 0x3b,
	0xb5, 0x35, 0x06, 0x07, 0xc7, 0xd6, 0x74, 0x7f, 0x67, 0x0e, 0x20, 0xf7, 0x42, 0x93, 0x9f, 0x84,
	0x25, 0x15, 0x38, 0xa6, 0x6c, 0x2c, 0x9e, 0x4d, 0x5b, 0xc5, 0x95, 0xa5, 0x98, 0xc3, 0xd9, 0x9e,
	0x21, 0xf0, 0x25, 0x6f, 0xbd, 0x67, 0x68, 0x36, 0xb0, 0x14, 0xf8, 0xdc, 0xf1, 0x2b, 0x68, 0xd6,
	0x3d, 0x23, 0x1f, 0xa3, 0x5c, 0x6a, 0x73, 0xc7, 0xaf, 0xc4, 0xa9, 0x19, 0x38, 0x38, 0xb6, 0x26,
	0x69, 0xc3, 0xa5, 0x20, 0x0a, 0xb2, 0xc0, 0x0b, 0x65, 0x25, 0x3b, 0x9e, 0x47, 0x9f, 0xb5, 0x34,
	0xc7, 0x21, 0xe1, 0xf8, 0xba, 0x6c, 0x40, 0x12, 0x1a, 0x52, 0x2f, 0xa5, 0xf5, 0x03, 0x91, 0x73,
	0x66, 0xce, 0x1e, 0x10, 0xb4, 0xa0, 0x58, 0xc0, 0x26, 0x6f, 0x01, 0x61, 0x33, 0x60, 0xcf, 0x4b,
	0xe9, 0x46, 0xd4, 0x49, 0x8e, 0xc4, 0x0d, 0x83, 0x79, 0xfb, 0x40, 0xa4, 0x31, 0x82, 0x81, 0x63,
	0x6a, 0xb1, 0x65, 0x4b, 0x6f, 0x9e, 0x16, 0xa6, 0x7f, 0x8a, 0x9d, 0x8f, 0xf2, 0xf1, 0x7b, 0x28,
	0xa6, 0x00, 0x99, 0xfd, 0x2e, 0xde, 0xd0, 0x58, 0x9c, 0xbe, 0x02, 0xbc, 0xbd, 0xb9, 0xb1, 0x23,
	0xe9, 0xe7, 0x0a, 0x50, 0x95, 0xa4, 0x98, 0x33, 0x27, 0x6f, 0x68, 0x07, 0x89, 0x7a, 0x51, 0x42,
	0xa4, 0x54, 0x21, 0x86, 0x73, 0x44, 0x45, 0x38, 0x17, 0x30, 0xdd, 0x3f, 0x28, 0xc1, 0xf9, 0x91,
	0x4f, 0x96, 0x99, 0x37, 0x9b, 0xfd, 0x5a, 0x18, 0x78, 0xa9, 0xbc, 0x84, 0x64, 0x67, 0xde, 0xd4,
	0x30, 0xb4, 0x30, 0xd9, 0xac, 0x57, 0x83, 0x53, 0xf0, 0x62, 0x8e, 0xf4, 0xe0, 0x1a, 0x80, 0xb0,
	0x54, 0x38, 0x76, 0xc1, 0x09, 0xd0, 0xd6, 0x10, 0x34, 0xb0, 0xc8, 0x17, 0x60, 0xb9, 0x1f, 0xfb,
	0xcd, 0xfe, 0xf0, 0x55, 0x23, 0x35, 0xad, 0xf6, 0x7c, 0xb6, 0x72, 0x10, 0x9a, 0x78, 0xa4, 0x01,
	0xe7, 0x94, 0x7d, 0xae, 0xeb, 0xce, 0xd9, 0x5e, 0x9c, 0x76, 0x01, 0x8e, 0x23, 0x35, 0x98, 0x82,
	0x54, 0x49, 0xa0, 0x78, 0x46, 0x21, 0xb9, 0xee, 0x8b, 0x97, 0x67, 0xb4, 0x82, 0xdc, 0x19, 0x45,
	0xc1, 0x71, 0xf5, 0xdc, 0x7f, 0x50, 0x82, 0xe5, 0xdb, 0x9b, 0x1b, 0x4f, 0xf1, 0x5e, 0xc5, 0x4b,
	0x85, 0x43, 0x88, 0x63, 0xbc, 0x14, 0x81, 0x7a, 0xa1, 0xa2, 0xa8, 0x71, 0xcc, 0xa8, 0xd8, 0xca,
	0x13, 0xa3, 0x62, 0x1b, 0x70, 0x4e, 0x9b, 0x9e, 0xb4, 0xc7, 0x44, 0x9a, 0x16, 0x3b, 0xae, 0x59,
	0x80, 0xe3, 0x48, 0x0d, 0xb6, 0x9b, 0x50, 0x65, 0xdc, 0x10, 0xe3, 0x5e, 0xb8, 0x79, 0x7b, 0x37,
	0xd1, 0x2c, 0x22, 0xe0, 0x68, 0x1d, 0xf7, 0xff, 0x57, 0x78, 0x97, 0xa9, 0x59, 0x70, 0x82, 0x2e,
	0x5b, 0x03, 0x50, 0x36, 0xce, 0xed, 0xbd, 0xe2, 0x5d, 0x48, 0xfd, 0x20, 0xd9, 0x1e, 0x1a, 0x58,
	0x4c, 0xc8, 0xe4, 0xd6, 0xc1, 0x70, 0xa4, 0x6a, 0x21, 0xdb, 0xce, 0x41, 0x68, 0xe2, 0x91, 0x1b,
	0xb0, 0x14, 0xf4, 0xbc, 0xae, 0xa8, 0x54, 0xb1, 0x03, 0x2e, 0x9b, 0x0a, 0x80, 0x39, 0x0e, 0x1b,
	0x0a, 0xdf, 0x7e, 0x02, 0x4d, 0x0f, 0x85, 0x7e, 0x00, 0x4d, 0x63, 0x30, 0xf2, 0x6c, 0xca, 0x8b,
	0xd0, 0x53, 0xf1, 0x00, 0x9a, 0xa5, 0x16, 0x44, 0xe4, 0x69, 0x8e, 0xc3, 0x94, 0xb6, 0x7c, 0x0f,
	0xad, 0x45, 0x13, 0x86, 0x21, 0xb7, 0x26, 0x5a, 0x69, 0x6f, 0x5b, 0x50, 0x2c, 0x60, 0x1b, 0xd2,
	0xb6, 0x78, 0xac, 0xb4, 0xad, 0x01, 0x1c, 0xbe, 0xae, 0x37, 0x89, 0x4b, 0xf6, 0x3c, 0xde, 0xd4,
	0x10, 0x34, 0xb0, 0xec, 0x05, 0x14, 0x9e, 0xb0, 0x80, 0xce, 0xfc, 0x81, 0x20, 0x63, 0x16, 0x1e,
	0x6f, 0x6b, 0xba, 0xdf, 0x71, 0xa0, 0xf4, 0x66, 0x8d, 0xe7, 0x79, 0x3c, 0xa4, 0xb4, 0xef, 0x85,
	0xc1, 0x50, 0x5e, 0xc8, 0x9d, 0x72, 0x18, 0xe0, 0xa6, 0xa6, 0x6e, 0xe7, 0x79, 0xcc, 0xcb, 0xd1,
	0x68, 0x81, 0xfb, 0x2f, 0xca, 0xc0, 0x73, 0x2b, 0x7f, 0xea, 0x33, 0x6d, 0x0c, 0xad, 0x4c, 0x1b,
	0x53, 0xbd, 0xa8, 0xce, 0xfa, 0x67, 0xe2, 0x0d, 0xbb, 0x0f, 0x0a, 0x59, 0x36, 0xee, 0x4d, 0x9d,
	0xf3, 0xf1, 0xf7, 0xe9, 0xbe, 0x57, 0x82, 0x45, 0x86, 0xf6, 0xa9, 0xbf, 0x48, 0x3d, 0xb0, 0x2f,
	0x52, 0xb7, 0xa6, 0xdd, 0x8f, 0x13, 0xee, 0x80, 0xfc, 0xe3, 0x12, 0x2c, 0x31, 0x30, 0x8f, 0xeb,
	0x38, 0xd9, 0x3b, 0x98, 0x71, 0xe2, 0xcb, 0x17, 0x31, 0x8c, 0x77, 0x30, 0xef, 0xb0, 0x42, 0x14,
	0x30, 0xf2, 0x35, 0x58, 0x4a, 0x33, 0x2f, 0x11, 0xfe, 0xa5, 0xf2, 0xb3, 0xfb, 0x97, 0xda, 0x8a,
	0x08, 0xe6, 0xf4, 0x98, 0x3e, 0x8f, 0xfb, 0x66, 0x12, 0x21, 0x63, 0xb9, 0xb8, 0xa3, 0x00, 0x98,
	0xe3, 0x9c, 0xf8, 0x8c, 0xe2, 0x29, 0x4e, 0xde, 0xff, 0xab, 0x23, 0xa4, 0xee, 0xd9, 0xd2, 0x54,
	0x7c, 0x01, 0x96, 0xd5, 0x65, 0xb9, 0x38, 0x54, 0xc7, 0x6a, 0x7a, 0x9d, 0xac, 0xe7, 0x20, 0x34,
	0xf1, 0x98, 0x4d, 0x71, 0x38, 0xd8, 0xa3, 0xd2, 0xe0, 0x12, 0x2f, 0xfe, 0x15, 0x8e, 0xd4, 0x36,
	0x0b, 0x70, 0x1c, 0xa9, 0x91, 0x5f, 0xa3, 0xa8, 0x4c, 0xbe, 0x46, 0xe1, 0x7e, 0xb2, 0x04, 0x90,
	0x4f, 0x3e, 0xf2, 0x33, 0xb0, 0x74, 0x20, 0xff, 0x29, 0xd9, 0x50, 0x89, 0xa3, 0x97, 0x14, 0x1a,
	0xfd, 0xc4, 0xfc, 0x83, 0x79, 0x85, 0x67, 0xfd, 0xdc, 0xdc, 0x8b, 0x9c, 0x3f, 0x8f, 0xb8, 0x38,
	0xe2, 0x45, 0x16, 0xdc, 0x2c, 0x4c, 0x66, 0x1f, 0x1c, 0xa8, 0xb8, 0xaf, 0x82, 0x7d, 0xa0, 0x83,
	0xbe, 0x34, 0x86, 0xd8, 0x17, 0xc5, 0x3e, 0xbf, 0x5d, 0x30, 0x83, 0x8b, 0x0e, 0x3b, 0x82, 0xb4,
	0x54, 0x63, 0xb9, 0x55, 0x2f, 0x8a, 0x51, 0xb1, 0x26, 0xef, 0xc3, 0x3c, 0x0f, 0xaa, 0x52, 0xa7,
	0x3b, 0xbb, 0xd3, 0x56, 0x00, 0x7c, 0x86, 0x1b, 0x8f, 0x5e, 0x70, 0x66, 0x28, 0x99, 0xf2, 0xc3,
	0x62, 0xf6, 0xab, 0x1e, 0xf7, 0xfa, 0x21, 0xcd, 0xa8, 0xcf, 0x23, 0xe2, 0xe7, 0x8c, 0xc3, 0x62,
	0x0b, 0x8a, 0x05, 0x6c, 0xfe, 0x98, 0x84, 0x97, 0x66, 0xb7, 0xbc, 0x20, 0xa4, 0x3e, 0xc7, 0xe5,
	0x01, 0xee, 0x86, 0x9b, 0x65, 0xcb, 0x06, 0x63, 0x11, 0x9f, 0x67, 0x59, 0x60, 0xb3, 0xbc, 0x96,
	0x65, 0xb4, 0xd7, 0xcf, 0x52, 0xee, 0x48, 0x34, 0xde, 0x98, 0x6c, 0x9b, 0x40, 0xb4, 0x71, 0xb9,
	0x37, 0x79, 0x90, 0x24, 0x34, 0x12, 0xdf, 0xc9, 0x9d, 0x8a, 0x86, 0xf7, 0xae, 0x6e, 0xc0, 0xd0,
	0xc2, 0x24, 0x3f, 0x0b, 0x67, 0xbd, 0x30, 0x14, 0xe3, 0xc3, 0xd3, 0x89, 0xa4, 0xd5, 0x8b, 0xd7,
	0xcb, 0x2f, 0xcf, 0xad, 0x5f, 0x60, 0xad, 0xae, 0xd9, 0x20, 0x2c, 0xe2, 0xda, 0x1f, 0xce, 0xcb,
	0x78, 0xa8, 0xed, 0xd8, 0x0f, 0xe7, 0x60, 0x2c, 0xe2, 0xb3, 0xfd, 0x51, 0xa1, 0x88, 0xc7, 0x24,
	0x5d, 0xe6, 0x11, 0x5b, 0x7a, 0x7f, 0xb4, 0x35, 0x8a, 0x82, 0xe3, 0xea, 0x15, 0x63, 0xd1, 0xae,
	0xfd, 0xe8, 0xc5, 0xa2, 0xad, 0x3c, 0x53, 0xea, 0xb7, 0xc2, 0x3d, 0xab, 0xeb, 0x27, 0xbc, 0x67,
	0xc5, 0xef, 0x73, 0x05, 0x3d, 0x2f, 0x39, 0x6a, 0xb6, 0x78, 0x90, 0xa5, 0x75, 0x9f, 0x4b, 0x02,
	0x30, 0xc7, 0x71, 0xff, 0x6a, 0x09, 0xce, 0xd8, 0x66, 0xe4, 0xd3, 0x24, 0x91, 0xe1, 0x2f, 0xf6,
	0x70, 0x1f, 0x50, 0xb3, 0xa5, 0x9d, 0x61, 0x52, 0xe9, 0x19, 0x2f, 0xf6, 0x14, 0x31, 0x70, 0x4c,
	0x2d, 0xb6, 0xff, 0xd3, 0xa5, 0xad, 0x24, 0x88, 0x8d, 0xb8, 0x37, 0xbd, 0xff, 0xdb, 0x2e, 0x22,
	0xe0, 0x68, 0x1d, 0x8b, 0x90, 0x4a, 0xe5, 0x5a, 0x8c, 0x60, 0xda, 0x2e, 0x22, 0xe0, 0x68, 0x1d,
	0xf7, 0xfb, 0x65, 0x38, 0x65, 0x26, 0xf7, 0x7e, 0x9a, 0x9e, 0x79, 0x09, 0xe6, 0x7d, 0x91, 0x3e,
	0xa5, 0xb0, 0x0b, 0x97, 0x79, 0x53, 0x24, 0x94, 0x91, 0xf4, 0x06, 0xd9, 0xc1, 0x2e, 0x6e, 0x15,
	0xef, 0x15, 0xd6, 0x44, 0x31, 0x2a, 0x38, 0x7f, 0x6b, 0xc5, 0x0e, 0xc8, 0xca, 0x53, 0xb8, 0xa8,
	0x38, 0x2c, 0x8d, 0xc1, 0xb0, 0x07, 0xea, 0xa1, 0xb6, 0xc2, 0xba, 0xa0, 0xdf, 0x68, 0xd3, 0x18,
	0xf2, 0x8d, 0x5e, 0x66, 0x6a, 0x8b, 0xf6, 0x8d, 0xdb, 0x7c, 0xb7, 0x8a, 0x08, 0x38, 0x5a, 0x87,
	0xfb, 0x5e, 0x44, 0xa1, 0xf1, 0x04, 0x64, 0xee, 0x7b, 0xc9, 0x41, 0x68, 0xe2, 0x19, 0xc1, 0x25,
	0x8b, 0xc7, 0x06, 0x97, 0x7c, 0x19, 0xce, 0xb0, 0x36, 0x1b, 0x8d, 0x5c, 0xb2, 0xb7, 0xab, 0xbb,
	0x16, 0x14, 0x0b, 0xd8, 0xee, 0x3f, 0x2f, 0xc1, 0xf9, 0x91, 0x2b, 0x28, 0x3c, 0x1d, 0xba, 0x7d,
	0x67, 0xab, 0xe0, 0x4a, 0x7e, 0xc2, 0xbd, 0x2a, 0x9e, 0x02, 0x20, 0x18, 0x06, 0x21, 0xed, 0xea,
	0xb3, 0x72, 0x23, 0x05, 0x80, 0x82, 0xa0, 0x81, 0xa5, 0x5f, 0xb6, 0x29, 0x4f, 0x7c, 0xd9, 0xe6,
	0x45, 0x98, 0x63, 0x43, 0xff, 0x5e, 0xd1, 0x78, 0x61, 0x82, 0xf1, 0x1e, 0x0a, 0x18, 0x5b, 0x47,
	0x64, 0x84, 0xa1, 0x74, 0x34, 0xcd, 0xd9, 0x71, 0x4b, 0x68, 0x02, 0xd1, 0xc6, 0x65, 0xda, 0x82,
	0x3e, 0xcc, 0x12, 0xaf, 0x96, 0x74, 0xd5, 0x01, 0xa6, 0xd6, 0x16, 0x1b, 0x0a, 0x80, 0x39, 0x8e,
	0xbb, 0x05, 0x2f, 0x4c, 0xbc, 0x69, 0x64, 0x53, 0x73, 0x4e, 0x40, 0xed, 0x15, 0x38, 0x6d, 0xdd,
	0x8c, 0xd4, 0xcf, 0x7a, 0x3b, 0x93, 0x9e, 0xf5, 0x76, 0x1b, 0x62, 0xf8, 0xac, 0x3b, 0x58, 0x4f,
	0xcf, 0xf8, 0x26, 0x9c, 0x32, 0x5f, 0x6b, 0x78, 0x9a, 0x57, 0x05, 0xbe, 0x04, 0xcb, 0xc6, 0x15,
	0x4a, 0x91, 0xb0, 0x3f, 0x1e, 0xf8, 0xf5, 0xfd, 0xee, 0x68, 0xc2, 0x7e, 0x51, 0x8e, 0x1a, 0xc3,
	0xfd, 0x2b, 0x0e, 0x58, 0x77, 0x07, 0xf9, 0x65, 0x4f, 0xb6, 0x1b, 0x08, 0xc3, 0x3d, 0xb9, 0xcb,
	0x9a, 0xaa, 0xcb, 0x82, 0xed, 0xba, 0xc2, 0xad, 0x75, 0xfb, 0xb2, 0xa7, 0x2c, 0x44, 0xc5, 0xd8,
	0xad, 0xc2, 0xe5, 0xf1, 0x39, 0x5f, 0xdd, 0xd7, 0x60, 0x49, 0xbf, 0xaa, 0xf1, 0x34, 0x9d, 0x84,
	0xb0, 0x6c, 0xb0, 0x26, 0x55, 0xa8, 0x70, 0x67, 0xaa, 0x99, 0x06, 0x9d, 0x97, 0x3c, 0x4d, 0x84,
	0xc9, 0x1b, 0x70, 0xda, 0xb2, 0x2e, 0xcd, 0xa3, 0x23, 0xe7, 0x09, 0x47, 0x47, 0x1f, 0x39, 0xa0,
	0xf3, 0xcd, 0x91, 0xf7, 0x60, 0xbe, 0xef, 0x25, 0x5e, 0x4f, 0x3d, 0x4b, 0x38, 0xd5, 0xc8, 0x8b,
	0x16, 0xa7, 0x6c, 0x18, 0x9e, 0xfc, 0x3f, 0x4a, 0x8e, 0xee, 0xb7, 0x1d, 0x28, 0xb7, 0x6e, 0xdd,
	0x14, 0x89, 0xd4, 0xd8, 0x72, 0x13, 0xd2, 0x54, 0x39, 0xce, 0x8d, 0x44, 0x6a, 0x0a, 0x82, 0x06,
	0x16, 0x69, 0xc3, 0xa5, 0xbd, 0x78, 0xc0, 0x1f, 0x23, 0x0b, 0xe3, 0x07, 0x48, 0xdf, 0xbd, 0x4f,
	0xf7, 0x0e, 0xe2, 0xf8, 0xb0, 0x98, 0xee, 0x7e, 0x7d, 0x1c, 0x12, 0x8e, 0xaf, 0xeb, 0xde, 0x01,
	0xd9, 0xc4, 0x93, 0xed, 0x86, 0x8d, 0x83, 0x4e, 0x23, 0x68, 0x90, 0x15, 0xca, 0x73, 0x4f, 0xf7,
	0x67, 0xe1, 0x5c, 0xf1, 0xa9, 0x8f, 0xa7, 0x91, 0x1c, 0x0f, 0xa4, 0xc6, 0x3f, 0x41, 0x7b, 0x0a,
	0x77, 0xaf, 0x4a, 0x27, 0xbb, 0x7b, 0xe5, 0x7e, 0xcb, 0x81, 0x82, 0x3e, 0x27, 0x43, 0xa8, 0xd0,
	0xac, 0xa3, 0x5c, 0x74, 0x53, 0xf5, 0x27, 0xa9, 0xf3, 0xdf, 0xfc, 0x0b, 0x58, 0x09, 0x72, 0x7e,
	0xeb, 0xab, 0x1f, 0xff, 0xe0, 0xda, 0x73, 0xdf, 0xff, 0xc1, 0xb5, 0xe7, 0x7e, 0xf7, 0x07, 0xd7,
	0x9e, 0xfb, 0xf0, 0xf1, 0x35, 0xe7, 0xe3, 0xc7, 0xd7, 0x9c, 0xef, 0x3f, 0xbe, 0xe6, 0xfc, 0xee,
	0xe3, 0x6b, 0xce, 0xef, 0x3d, 0xbe, 0xe6, 0xfc, 0xa5, 0xff, 0x76, 0xed, 0xb9, 0xb7, 0x17, 0x15,
	0xb1, 0x3f, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xa6, 0xd5, 0x0f, 0x41, 0x85, 0x00, 0x00,
}

func (m *AKSAgentPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AKSAgentPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AKSAgentPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.VnetSubnetID)
	copy(dAtA[i:], m.VnetSubnetID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VnetSubnetID)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	i -= len(m.NodeImageVersion)
	copy(dAtA[i:], m.NodeImageVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NodeImageVersion)))
	i--
	dAtA[i] = 0x7a
	i -= len(m.OSType)
	copy(dAtA[i:], m.OSType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.OSType)))
	i--
	dAtA[i] = 0x72
	i -= len(m.Mode)
	copy(dAtA[i:], m.Mode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mode)))
	i--
	dAtA[i] = 0x6a
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
		for iNdEx := len(keysForLabels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Labels[string(keysForLabels[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForLabels[iNdEx])
			copy(dAtA[i:], keysForLabels[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForLabels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	i -= len(m.KubernetesVersion)
	copy(dAtA[i:], m.KubernetesVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubernetesVersion)))
	i--
	dAtA[i] = 0x5a
	i -= len(m.PowerState)
	copy(dAtA[i:], m.PowerState)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PowerState)))
	i--
	dAtA[i] = 0x52
	i -= len(m.ProvisioningState)
	copy(dAtA[i:], m.ProvisioningState)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProvisioningState)))
	i--
	dAtA[i] = 0x4a
	if len(m.AvailabilityZone) > 0 {
		for iNdEx := len(m.AvailabilityZone) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AvailabilityZone[iNdEx])
			copy(dAtA[i:], m.AvailabilityZone[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.AvailabilityZone[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x3a
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxPods))
	i--
	dAtA[i] = 0x30
	i -= len(m.OSDiskType)
	copy(dAtA[i:], m.OSDiskType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.OSDiskType)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintGenerated(dAtA, i, uint64(m.OSDiskSizeGB))
	i--
	dAtA[i] = 0x20
	i -= len(m.VMSize)
	copy(dAtA[i:], m.VMSize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VMSize)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintGenerated(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AKSCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AKSCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AKSCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.FQDN)
	copy(dAtA[i:], m.FQDN)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FQDN)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x7a
		}
	}
	i -= len(m.DNSPrefix)
	copy(dAtA[i:], m.DNSPrefix)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DNSPrefix)))
	i--
	dAtA[i] = 0x72
	if m.EnablePrivateCluster != nil {
		i--
		if *m.EnablePrivateCluster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	i -= len(m.ServicePrincipalClientID)
	copy(dAtA[i:], m.ServicePrincipalClientID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServicePrincipalClientID)))
	i--
	dAtA[i] = 0x62
	if len(m.Instances) > 0 {
		for iNdEx := len(m.Instances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.AgentPools) > 0 {
		for iNdEx := len(m.AgentPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AgentPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Network != nil {
		{
			size, err := m.Network.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	i -= len(m.NodeResourceGroup)
	copy(dAtA[i:], m.NodeResourceGroup)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NodeResourceGroup)))
	i--
	dAtA[i] = 0x42
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxAgentPools))
	i--
	dAtA[i] = 0x38
	i--
	if m.EnableRBAC {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i -= len(m.PowerState)
	copy(dAtA[i:], m.PowerState)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PowerState)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.ProvisioningState)
	copy(dAtA[i:], m.ProvisioningState)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProvisioningState)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.KubernetesVersion)
	copy(dAtA[i:], m.KubernetesVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubernetesVersion)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Location)
	copy(dAtA[i:], m.Location)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Location)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AKSInstance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AKSInstance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AKSInstance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OSProfile != nil {
		{
			size, err := m.OSProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.NetworkInterfaces) > 0 {
		for iNdEx := len(m.NetworkInterfaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NetworkInterfaces[iNdEx])
			copy(dAtA[i:], m.NetworkInterfaces[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.NetworkInterfaces[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	i -= len(m.AgentPoolName)
	copy(dAtA[i:], m.AgentPoolName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AgentPoolName)))
	i--
	dAtA[i] = 0x42
	i -= len(m.VirtualMachineScaleSetName)
	copy(dAtA[i:], m.VirtualMachineScaleSetName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VirtualMachineScaleSetName)))
	i--
	dAtA[i] = 0x3a
	if m.SKU != nil {
		{
			size, err := m.SKU.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Zones[iNdEx])
			copy(dAtA[i:], m.Zones[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Zones[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	i -= len(m.VMID)
	copy(dAtA[i:], m.VMID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VMID)))
	i--
	dAtA[i] = 0x22
	i -= len(m.InstanceId)
	copy(dAtA[i:], m.InstanceId)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InstanceId)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Location)
	copy(dAtA[i:], m.Location)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Location)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AKSInstanceLinuxConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AKSInstanceLinuxConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AKSInstanceLinuxConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.ProvisionVMAgent {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i--
	if m.DisablePasswordAuthentication {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	if len(m.SSHKeys) > 0 {
		for iNdEx := len(m.SSHKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SSHKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AKSInstanceOSProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AKSInstanceOSProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AKSInstanceOSProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WindowsConfiguration != nil {
		{
			size, err := m.WindowsConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LinuxConfiguration != nil {
		{
			size, err := m.LinuxConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.AdminUsername)
	copy(dAtA[i:], m.AdminUsername)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AdminUsername)))
	i--
	dAtA[i] = 0x12
	i -= len(m.ComputerName)
	copy(dAtA[i:], m.ComputerName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ComputerName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AKSInstanceSKU) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AKSInstanceSKU) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AKSInstanceSKU) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Tier)
	copy(dAtA[i:], m.Tier)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Tier)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AKSInstanceWindowsConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AKSInstanceWindowsConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AKSInstanceWindowsConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.TimeZone)
	copy(dAtA[i:], m.TimeZone)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TimeZone)))
	i--
	dAtA[i] = 0x22
	i--
	if m.ProvisionVMAgent {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i--
	if m.EnableAutomaticUpdates {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	if len(m.WinRMListeners) > 0 {
		for iNdEx := len(m.WinRMListeners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WinRMListeners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AKSLinuxInstanceSSHKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AKSLinuxInstanceSSHKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AKSLinuxInstanceSSHKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0x12
	i -= len(m.KeyData)
	copy(dAtA[i:], m.KeyData)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KeyData)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AKSLoadBalancerProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AKSLoadBalancerProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AKSLoadBalancerProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutboundIPPrefixes) > 0 {
		for iNdEx := len(m.OutboundIPPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OutboundIPPrefixes[iNdEx])
			copy(dAtA[i:], m.OutboundIPPrefixes[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.OutboundIPPrefixes[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.OutboundIPs) > 0 {
		for iNdEx := len(m.OutboundIPs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OutboundIPs[iNdEx])
			copy(dAtA[i:], m.OutboundIPs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.OutboundIPs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.EffectiveOutboundIPs) > 0 {
		for iNdEx := len(m.EffectiveOutboundIPs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EffectiveOutboundIPs[iNdEx])
			copy(dAtA[i:], m.EffectiveOutboundIPs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.EffectiveOutboundIPs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.ManagedOutboundIPs))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.AllocatedOutboundPorts))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AKSNetwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AKSNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AKSNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoadBalancerProfile != nil {
		{
			size, err := m.LoadBalancerProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	i -= len(m.LoadBalancerSKU)
	copy(dAtA[i:], m.LoadBalancerSKU)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.LoadBalancerSKU)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.OutboundType)
	copy(dAtA[i:], m.OutboundType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.OutboundType)))
	i--
	dAtA[i] = 0x32
	i -= len(m.DNSServiceIP)
	copy(dAtA[i:], m.DNSServiceIP)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DNSServiceIP)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.ContainerCIDR)
	copy(dAtA[i:], m.ContainerCIDR)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ContainerCIDR)))
	i--
	dAtA[i] = 0x22
	i -= len(m.ServiceCIDR)
	copy(dAtA[i:], m.ServiceCIDR)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServiceCIDR)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Policy)
	copy(dAtA[i:], m.Policy)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Policy)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Plugin)
	copy(dAtA[i:], m.Plugin)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Plugin)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AKSWindowsInstanceWinRMListener) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AKSWindowsInstanceWinRMListener) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AKSWindowsInstanceWinRMListener) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Protocol)
	copy(dAtA[i:], m.Protocol)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Protocol)))
	i--
	dAtA[i] = 0x12
	i -= len(m.CertificateURL)
	copy(dAtA[i:], m.CertificateURL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CertificateURL)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *APIEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.UsePF9Domain {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x10
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AWSCloudProviderCredentials) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSCloudProviderCredentials) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSCloudProviderCredentials) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Region)
	copy(dAtA[i:], m.Region)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Region)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.SecretAccessKey)
	copy(dAtA[i:], m.SecretAccessKey)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SecretAccessKey)))
	i--
	dAtA[i] = 0x12
	i -= len(m.AccessKeyID)
	copy(dAtA[i:], m.AccessKeyID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AccessKeyID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AWSCloudProviderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSCloudProviderSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSCloudProviderSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Region)
	copy(dAtA[i:], m.Region)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Region)))
	i--
	dAtA[i] = 0x12
	i -= len(m.SecretName)
	copy(dAtA[i:], m.SecretName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SecretName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AWSCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.WorkerFlavor)
	copy(dAtA[i:], m.WorkerFlavor)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.WorkerFlavor)))
	i--
	dAtA[i] = 0x32
	i -= len(m.MasterFlavor)
	copy(dAtA[i:], m.MasterFlavor)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterFlavor)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.AMI)
	copy(dAtA[i:], m.AMI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AMI)))
	i--
	dAtA[i] = 0x22
	if len(m.AZs) > 0 {
		for iNdEx := len(m.AZs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AZs[iNdEx])
			copy(dAtA[i:], m.AZs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.AZs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Region)
	copy(dAtA[i:], m.Region)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Region)))
	i--
	dAtA[i] = 0x12
	i -= len(m.SSHKeyName)
	copy(dAtA[i:], m.SSHKeyName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SSHKeyName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AWSScalingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSScalingConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSScalingConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.DesiredSize))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxSize))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.MinSize))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AWSVPC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSVPC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subnets) > 0 {
		for iNdEx := len(m.Subnets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Subnets[iNdEx])
			copy(dAtA[i:], m.Subnets[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Subnets[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	i -= len(m.ClusterSecurityGroupID)
	copy(dAtA[i:], m.ClusterSecurityGroupID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterSecurityGroupID)))
	i--
	dAtA[i] = 0x2a
	i--
	if m.PrivateAccess {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i--
	if m.PublicAccess {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if len(m.SecurityGroup) > 0 {
		for iNdEx := len(m.SecurityGroup) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SecurityGroup[iNdEx])
			copy(dAtA[i:], m.SecurityGroup[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.SecurityGroup[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.VPCID)
	copy(dAtA[i:], m.VPCID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VPCID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AddonsOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddonsOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddonsOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProfileAgent.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.CPUManager.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Kubevirt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Luigi.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CAS.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.AppCatalog.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppCatalogOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppCatalogOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppCatalogOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Auth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Keystone.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AzureCloudProviderCredentials) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureCloudProviderCredentials) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureCloudProviderCredentials) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.TenantID)
	copy(dAtA[i:], m.TenantID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TenantID)))
	i--
	dAtA[i] = 0x22
	i -= len(m.SubscriptionID)
	copy(dAtA[i:], m.SubscriptionID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SubscriptionID)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.ClientSecret)
	copy(dAtA[i:], m.ClientSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientSecret)))
	i--
	dAtA[i] = 0x12
	i -= len(m.ClientID)
	copy(dAtA[i:], m.ClientID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AzureCloudProviderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureCloudProviderSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureCloudProviderSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.SecretName)
	copy(dAtA[i:], m.SecretName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SecretName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CNIOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNIOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CNIOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Flannel.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Calico.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	i -= len(m.NetworkPlugin)
	copy(dAtA[i:], m.NetworkPlugin)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NetworkPlugin)))
	i--
	dAtA[i] = 0x22
	i--
	if m.IPv6 {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.MTUSize))
	i--
	dAtA[i] = 0x10
	i -= len(m.Bridge)
	copy(dAtA[i:], m.Bridge)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Bridge)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CPUManagerOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPUManagerOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPUManagerOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ReservedCPUs)
	copy(dAtA[i:], m.ReservedCPUs)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ReservedCPUs)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.TopologyManagerPolicy)
	copy(dAtA[i:], m.TopologyManagerPolicy)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TopologyManagerPolicy)))
	i--
	dAtA[i] = 0x12
	i -= len(m.CPUManagerPolicy)
	copy(dAtA[i:], m.CPUManagerPolicy)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CPUManagerPolicy)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CalicoOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalicoOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalicoOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.FelixIPv6Support {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x60
	i -= len(m.RouterID)
	copy(dAtA[i:], m.RouterID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RouterID)))
	i--
	dAtA[i] = 0x5a
	i -= len(m.IPv6DetectionMethod)
	copy(dAtA[i:], m.IPv6DetectionMethod)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPv6DetectionMethod)))
	i--
	dAtA[i] = 0x52
	i--
	if m.IPv6PoolNAT {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x48
	i -= len(m.IPv6PoolCIDR)
	copy(dAtA[i:], m.IPv6PoolCIDR)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPv6PoolCIDR)))
	i--
	dAtA[i] = 0x42
	i = encodeVarintGenerated(dAtA, i, uint64(m.IPv6BlkSize))
	i--
	dAtA[i] = 0x38
	i -= len(m.IPv6Mode)
	copy(dAtA[i:], m.IPv6Mode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPv6Mode)))
	i--
	dAtA[i] = 0x32
	i -= len(m.IPv4DetectionMethod)
	copy(dAtA[i:], m.IPv4DetectionMethod)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPv4DetectionMethod)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.IPv4Mode)
	copy(dAtA[i:], m.IPv4Mode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPv4Mode)))
	i--
	dAtA[i] = 0x22
	i--
	if m.NatOutgoing {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.IPv4BlkSize))
	i--
	dAtA[i] = 0x10
	i -= len(m.IPIPMode)
	copy(dAtA[i:], m.IPIPMode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPIPMode)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CloudProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CloudProviderList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudProviderList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudProviderList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CloudProviderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudProviderSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudProviderSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Local != nil {
		{
			size, err := m.Local.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Azure != nil {
		{
			size, err := m.Azure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AWS != nil {
		{
			size, err := m.AWS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *CloudProviderStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudProviderStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudProviderStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LastChecked.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Regions) > 0 {
		for iNdEx := len(m.Regions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Regions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x20
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Cluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterAddon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterAddon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterAddon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterAddonList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterAddonList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterAddonList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterAddonSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterAddonSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterAddonSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Watch {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	{
		size, err := m.Override.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0x12
	i -= len(m.ClusterID)
	copy(dAtA[i:], m.ClusterID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterAddonStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterAddonStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterAddonStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.LastChecked.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	i--
	if m.Healthy {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterAutoScalerOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterAutoScalerOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterAutoScalerOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxWorkers))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.MinWorkers))
	i--
	dAtA[i] = 0x10
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ClusterList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterNetwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ServiceDomain)
	copy(dAtA[i:], m.ServiceDomain)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServiceDomain)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.PodsCIDR)
	copy(dAtA[i:], m.PodsCIDR)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PodsCIDR)))
	i--
	dAtA[i] = 0x12
	i -= len(m.ServicesCIDR)
	copy(dAtA[i:], m.ServicesCIDR)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServicesCIDR)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Description)
	copy(dAtA[i:], m.Description)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Description)))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterProfileBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterProfileBinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterProfileBinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterProfileBindingDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterProfileBindingDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterProfileBindingDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	i -= len(m.Analysis)
	copy(dAtA[i:], m.Analysis)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Analysis)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Data)
	copy(dAtA[i:], m.Data)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Data)))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterProfileBindingList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterProfileBindingList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterProfileBindingList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterProfileBindingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterProfileBindingSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterProfileBindingSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.ReapInterval))
	i--
	dAtA[i] = 0x20
	i--
	if m.DryRun {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i -= len(m.ProfileRef)
	copy(dAtA[i:], m.ProfileRef)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProfileRef)))
	i--
	dAtA[i] = 0x12
	i -= len(m.ClusterRef)
	copy(dAtA[i:], m.ClusterRef)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterRef)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterProfileBindingStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterProfileBindingStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterProfileBindingStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.RetryCount))
	i--
	dAtA[i] = 0x20
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterProfileDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterProfileDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterProfileDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	i -= len(m.Data)
	copy(dAtA[i:], m.Data)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Data)))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterProfileList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterProfileList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterProfileList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterProfileSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterProfileSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterProfileSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.ReapInterval))
	i--
	dAtA[i] = 0x28
	if len(m.ClusterScopedResources) > 0 {
		for iNdEx := len(m.ClusterScopedResources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClusterScopedResources[iNdEx])
			copy(dAtA[i:], m.ClusterScopedResources[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterScopedResources[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.NamespaceScopedResources) > 0 {
		for iNdEx := len(m.NamespaceScopedResources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NamespaceScopedResources[iNdEx])
			copy(dAtA[i:], m.NamespaceScopedResources[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.NamespaceScopedResources[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.CloneFrom)
	copy(dAtA[i:], m.CloneFrom)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CloneFrom)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Location)
	copy(dAtA[i:], m.Location)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Location)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterProfileStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterProfileStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterProfileStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.RetryCount))
	i--
	dAtA[i] = 0x20
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0x1a
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GKE != nil {
		{
			size, err := m.GKE.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.AKS != nil {
		{
			size, err := m.AKS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	i--
	if m.UseHostname {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf8
	i -= len(m.K8SPrivateRegistry)
	copy(dAtA[i:], m.K8SPrivateRegistry)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.K8SPrivateRegistry)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf2
	i -= len(m.GCRPrivateRegistry)
	copy(dAtA[i:], m.GCRPrivateRegistry)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.GCRPrivateRegistry)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	i -= len(m.QuayPrivateRegistry)
	copy(dAtA[i:], m.QuayPrivateRegistry)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.QuayPrivateRegistry)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	i -= len(m.DockerPrivateRegistry)
	copy(dAtA[i:], m.DockerPrivateRegistry)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DockerPrivateRegistry)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	if m.EKS != nil {
		{
			size, err := m.EKS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	i--
	if m.External {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc8
	if m.AWS != nil {
		{
			size, err := m.AWS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	{
		size, err := m.ControlPlaneEndpoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	i -= len(m.DisplayName)
	copy(dAtA[i:], m.DisplayName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DisplayName)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size, err := m.PF9.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	i -= len(m.VaultToken)
	copy(dAtA[i:], m.VaultToken)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VaultToken)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	i--
	if m.AllowWorkloadsOnMasters {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	{
		size, err := m.Addons.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size, err := m.CNI.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size, err := m.Apiserver.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size, err := m.ControllerManager.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size, err := m.Scheduler.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.HA.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.StorageBackend.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.LoadBalancer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.ContainerRuntime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.Kubelet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.KubeProxy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.ClusterNetwork.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	i -= len(m.KubeVersion)
	copy(dAtA[i:], m.KubeVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubeVersion)))
	i--
	dAtA[i] = 0x22
	i -= len(m.ProjectID)
	copy(dAtA[i:], m.ProjectID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProjectID)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.CloudProviderID)
	copy(dAtA[i:], m.CloudProviderID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CloudProviderID)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Debug {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ClusterStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x40
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x32
	i -= len(m.ControlPlaneEndpoint)
	copy(dAtA[i:], m.ControlPlaneEndpoint)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ControlPlaneEndpoint)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintGenerated(dAtA, i, uint64(m.Workers))
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.Masters))
	i--
	dAtA[i] = 0x18
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Condition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Condition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Condition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.LastTransitionTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	i -= len(m.Severity)
	copy(dAtA[i:], m.Severity)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Severity)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ContainerRuntime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRuntime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerRuntime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Runtime)
	copy(dAtA[i:], m.Runtime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Runtime)))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Docker.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DockerOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DockerOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.DockerUbuntuPackageRepoUrl)
	copy(dAtA[i:], m.DockerUbuntuPackageRepoUrl)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DockerUbuntuPackageRepoUrl)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.DockerCentosPackageRepoUrl)
	copy(dAtA[i:], m.DockerCentosPackageRepoUrl)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DockerCentosPackageRepoUrl)))
	i--
	dAtA[i] = 0x32
	i -= len(m.RegistryMirrors)
	copy(dAtA[i:], m.RegistryMirrors)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RegistryMirrors)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.DockerhubPassword)
	copy(dAtA[i:], m.DockerhubPassword)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DockerhubPassword)))
	i--
	dAtA[i] = 0x22
	i -= len(m.DockerhubID)
	copy(dAtA[i:], m.DockerhubID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DockerhubID)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.RootDir)
	copy(dAtA[i:], m.RootDir)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RootDir)))
	i--
	dAtA[i] = 0x12
	i--
	if m.LiveRestore {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *EC2Instance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EC2Instance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EC2Instance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Network != nil {
		{
			size, err := m.Network.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i -= len(m.InstanceType)
	copy(dAtA[i:], m.InstanceType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InstanceType)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.AvailabilityZone)
	copy(dAtA[i:], m.AvailabilityZone)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AvailabilityZone)))
	i--
	dAtA[i] = 0x12
	i -= len(m.InstanceID)
	copy(dAtA[i:], m.InstanceID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InstanceID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EC2InstanceNetwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EC2InstanceNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EC2InstanceNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.VPCID)
	copy(dAtA[i:], m.VPCID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VPCID)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Subnet)
	copy(dAtA[i:], m.Subnet)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Subnet)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.PublicIPAddress)
	copy(dAtA[i:], m.PublicIPAddress)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PublicIPAddress)))
	i--
	dAtA[i] = 0x22
	i -= len(m.PrivateIPAddress)
	copy(dAtA[i:], m.PrivateIPAddress)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PrivateIPAddress)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.PublicDNSName)
	copy(dAtA[i:], m.PublicDNSName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PublicDNSName)))
	i--
	dAtA[i] = 0x12
	i -= len(m.PrivateDNSName)
	copy(dAtA[i:], m.PrivateDNSName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PrivateDNSName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EKSCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EKSCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EKSCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeGroups) > 0 {
		for iNdEx := len(m.NodeGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Logging != nil {
		{
			size, err := m.Logging.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Network != nil {
		{
			size, err := m.Network.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	i -= len(m.IAMRole)
	copy(dAtA[i:], m.IAMRole)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IAMRole)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.CA)
	copy(dAtA[i:], m.CA)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CA)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	i -= len(m.EKSVersion)
	copy(dAtA[i:], m.EKSVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.EKSVersion)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.KubernetesVersion)
	copy(dAtA[i:], m.KubernetesVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubernetesVersion)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Region)
	copy(dAtA[i:], m.Region)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Region)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EKSClusterLogging) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EKSClusterLogging) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EKSClusterLogging) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Types[iNdEx])
			copy(dAtA[i:], m.Types[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Types[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EKSLogging) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EKSLogging) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EKSLogging) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EKSClusterLogging) > 0 {
		for iNdEx := len(m.EKSClusterLogging) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EKSClusterLogging[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EKSNetwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EKSNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EKSNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VPC != nil {
		{
			size, err := m.VPC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.ServicesCIDR)
	copy(dAtA[i:], m.ServicesCIDR)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServicesCIDR)))
	i--
	dAtA[i] = 0x12
	if len(m.ContainerCIDR) > 0 {
		for iNdEx := len(m.ContainerCIDR) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContainerCIDR[iNdEx])
			copy(dAtA[i:], m.ContainerCIDR[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.ContainerCIDR[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EKSNodeGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EKSNodeGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EKSNodeGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for iNdEx := len(m.Instances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	i -= len(m.IAMRole)
	copy(dAtA[i:], m.IAMRole)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IAMRole)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	i = encodeVarintGenerated(dAtA, i, uint64(m.DiskSizeInGB))
	i--
	dAtA[i] = 0x78
	if m.ScalingConfig != nil {
		{
			size, err := m.ScalingConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	i -= len(m.SSHKey)
	copy(dAtA[i:], m.SSHKey)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SSHKey)))
	i--
	dAtA[i] = 0x6a
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
		for iNdEx := len(keysForLabels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Labels[string(keysForLabels[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForLabels[iNdEx])
			copy(dAtA[i:], keysForLabels[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForLabels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	i -= len(m.AMI)
	copy(dAtA[i:], m.AMI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AMI)))
	i--
	dAtA[i] = 0x52
	if len(m.Subnets) > 0 {
		for iNdEx := len(m.Subnets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Subnets[iNdEx])
			copy(dAtA[i:], m.Subnets[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Subnets[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.InstanceTypes) > 0 {
		for iNdEx := len(m.InstanceTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InstanceTypes[iNdEx])
			copy(dAtA[i:], m.InstanceTypes[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.InstanceTypes[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	i -= len(m.CapacityType)
	copy(dAtA[i:], m.CapacityType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CapacityType)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x32
	{
		size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	i -= len(m.KubernetesVersion)
	copy(dAtA[i:], m.KubernetesVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubernetesVersion)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.ARN)
	copy(dAtA[i:], m.ARN)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ARN)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EtcdOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EtcdOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EtcdOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0x32
	i = encodeVarintGenerated(dAtA, i, uint64(m.HeartbeatIntervalMs))
	i--
	dAtA[i] = 0x28
	i -= len(m.Env)
	copy(dAtA[i:], m.Env)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Env)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintGenerated(dAtA, i, uint64(m.ElectionTimeout))
	i--
	dAtA[i] = 0x18
	i -= len(m.DiscoveryURL)
	copy(dAtA[i:], m.DiscoveryURL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DiscoveryURL)))
	i--
	dAtA[i] = 0x12
	i -= len(m.DataDir)
	copy(dAtA[i:], m.DataDir)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DataDir)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FlannelOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlannelOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlannelOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.PublicInterfaceLabel)
	copy(dAtA[i:], m.PublicInterfaceLabel)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PublicInterfaceLabel)))
	i--
	dAtA[i] = 0x12
	i -= len(m.InterfaceLabel)
	copy(dAtA[i:], m.InterfaceLabel)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InterfaceLabel)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GKECluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GKECluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GKECluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrivateCluster != nil {
		i--
		if *m.PrivateCluster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.NodePools) > 0 {
		for iNdEx := len(m.NodePools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodePools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Network != nil {
		{
			size, err := m.Network.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	i -= len(m.DatabaseEncryption)
	copy(dAtA[i:], m.DatabaseEncryption)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DatabaseEncryption)))
	i--
	dAtA[i] = 0x32
	i -= len(m.ReleaseChannel)
	copy(dAtA[i:], m.ReleaseChannel)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ReleaseChannel)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.InitialClusterVersion)
	copy(dAtA[i:], m.InitialClusterVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InitialClusterVersion)))
	i--
	dAtA[i] = 0x22
	i -= len(m.ClusterCACertificate)
	copy(dAtA[i:], m.ClusterCACertificate)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterCACertificate)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.ID)
	copy(dAtA[i:], m.ID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ID)))
	i--
	dAtA[i] = 0x12
	if len(m.Locations) > 0 {
		for iNdEx := len(m.Locations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Locations[iNdEx])
			copy(dAtA[i:], m.Locations[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Locations[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GKEClusterNetwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GKEClusterNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GKEClusterNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.NetworkPolicyConfig {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i -= len(m.ServicesIpv4CIDR)
	copy(dAtA[i:], m.ServicesIpv4CIDR)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServicesIpv4CIDR)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.PodIpv4CIDR)
	copy(dAtA[i:], m.PodIpv4CIDR)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PodIpv4CIDR)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Subnetwork)
	copy(dAtA[i:], m.Subnetwork)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Subnetwork)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Network)
	copy(dAtA[i:], m.Network)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Network)))
	i--
	dAtA[i] = 0x12
	i--
	if m.UseIpAliases {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GKEInstance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GKEInstance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GKEInstance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.InstanceGroupName)
	copy(dAtA[i:], m.InstanceGroupName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InstanceGroupName)))
	i--
	dAtA[i] = 0x32
	i -= len(m.InstanceTemplate)
	copy(dAtA[i:], m.InstanceTemplate)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InstanceTemplate)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Location)
	copy(dAtA[i:], m.Location)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Location)))
	i--
	dAtA[i] = 0x22
	i -= len(m.ID)
	copy(dAtA[i:], m.ID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ID)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GKENodePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GKENodePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GKENodePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for iNdEx := len(m.Instances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Locations) > 0 {
		for iNdEx := len(m.Locations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Locations[iNdEx])
			copy(dAtA[i:], m.Locations[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Locations[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	i -= len(m.K8sVersion)
	copy(dAtA[i:], m.K8sVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.K8sVersion)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x42
	i -= len(m.MaxPodsPerNode)
	copy(dAtA[i:], m.MaxPodsPerNode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MaxPodsPerNode)))
	i--
	dAtA[i] = 0x3a
	i = encodeVarintGenerated(dAtA, i, uint64(m.NodeCount))
	i--
	dAtA[i] = 0x30
	i -= len(m.DiskType)
	copy(dAtA[i:], m.DiskType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DiskType)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.ImageType)
	copy(dAtA[i:], m.ImageType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ImageType)))
	i--
	dAtA[i] = 0x22
	i -= len(m.MachineType)
	copy(dAtA[i:], m.MachineType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MachineType)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintGenerated(dAtA, i, uint64(m.DiskSizeGb))
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Keepalived.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Host) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Host) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Host) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HostList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HostPhase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostPhase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostPhase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Operation)
	copy(dAtA[i:], m.Operation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Operation)))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.StartedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	i = encodeVarintGenerated(dAtA, i, uint64(m.Order))
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HostSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Debug {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i -= len(m.KubeServiceState)
	copy(dAtA[i:], m.KubeServiceState)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubeServiceState)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.ClusterRole)
	copy(dAtA[i:], m.ClusterRole)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterRole)))
	i--
	dAtA[i] = 0x12
	i -= len(m.ClusterID)
	copy(dAtA[i:], m.ClusterID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HostStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.PrimaryIP)
	copy(dAtA[i:], m.PrimaryIP)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PrimaryIP)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x8a
	i -= len(m.KubeVersion)
	copy(dAtA[i:], m.KubeVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubeVersion)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x82
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf8
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.LastFailedCheckTime))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb0
	i = encodeVarintGenerated(dAtA, i, uint64(m.LastFailedCheck))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	if len(m.AllStatusChecks) > 0 {
		for iNdEx := len(m.AllStatusChecks) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintGenerated(dAtA, i, uint64(m.AllStatusChecks[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.CurrentPhase))
	i--
	dAtA[i] = 0x70
	i = encodeVarintGenerated(dAtA, i, uint64(m.StartAttempts))
	i--
	dAtA[i] = 0x68
	i = encodeVarintGenerated(dAtA, i, uint64(m.LastFailedPhase))
	i--
	dAtA[i] = 0x60
	i = encodeVarintGenerated(dAtA, i, uint64(m.PhaseCompleted))
	i--
	dAtA[i] = 0x58
	if len(m.Phases) > 0 {
		for iNdEx := len(m.Phases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Phases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	{
		size, err := m.Nodelet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	i -= len(m.Hostname)
	copy(dAtA[i:], m.Hostname)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Hostname)))
	i--
	dAtA[i] = 0x2a
	i--
	if m.ServiceState {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i -= len(m.ClusterRole)
	copy(dAtA[i:], m.ClusterRole)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterRole)))
	i--
	dAtA[i] = 0x12
	i -= len(m.HostState)
	copy(dAtA[i:], m.HostState)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.HostState)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KeepalivedOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeepalivedOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeepalivedOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.MasterVIPRouterID)
	copy(dAtA[i:], m.MasterVIPRouterID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterVIPRouterID)))
	i--
	dAtA[i] = 0x22
	i -= len(m.MasterVIPPriority)
	copy(dAtA[i:], m.MasterVIPPriority)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterVIPPriority)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.MasterVIPInterface)
	copy(dAtA[i:], m.MasterVIPInterface)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterVIPInterface)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KeystoneOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeystoneOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeystoneOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.UserDomainName)
	copy(dAtA[i:], m.UserDomainName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.UserDomainName)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.Region)
	copy(dAtA[i:], m.Region)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Region)))
	i--
	dAtA[i] = 0x42
	i -= len(m.ProjectName)
	copy(dAtA[i:], m.ProjectName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProjectName)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.ProjectDomainName)
	copy(dAtA[i:], m.ProjectDomainName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProjectDomainName)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Username)
	copy(dAtA[i:], m.Username)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Username)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Password)
	copy(dAtA[i:], m.Password)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Password)))
	i--
	dAtA[i] = 0x22
	i -= len(m.AuthURL)
	copy(dAtA[i:], m.AuthURL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AuthURL)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Domain)
	copy(dAtA[i:], m.Domain)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Domain)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KubeApiserverOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeApiserverOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeApiserverOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ExtraArgs)
	copy(dAtA[i:], m.ExtraArgs)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExtraArgs)))
	i--
	dAtA[i] = 0x32
	i -= len(m.RuntimeConfig)
	copy(dAtA[i:], m.RuntimeConfig)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RuntimeConfig)))
	i--
	dAtA[i] = 0x2a
	i--
	if m.Authz {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x18
	i--
	if m.Privileged {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i -= len(m.StorageBackend)
	copy(dAtA[i:], m.StorageBackend)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.StorageBackend)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KubeControllerManagerOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeControllerManagerOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeControllerManagerOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ExtraArgs)
	copy(dAtA[i:], m.ExtraArgs)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExtraArgs)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KubeProxyOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeProxyOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeProxyOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Mode)
	copy(dAtA[i:], m.Mode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mode)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KubeSchedulerOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeSchedulerOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeSchedulerOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ExtraArgs)
	copy(dAtA[i:], m.ExtraArgs)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExtraArgs)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KubeVirtOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeVirtOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeVirtOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KubeletOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeletOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.CloudCfg)
	copy(dAtA[i:], m.CloudCfg)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CloudCfg)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LoadBalancer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadBalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadBalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MetalLB.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LocalCloudProviderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalCloudProviderSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalCloudProviderSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LuigiOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LuigiOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LuigiOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MetalLBOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetalLBOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetalLBOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i -= len(m.CIDR)
	copy(dAtA[i:], m.CIDR)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CIDR)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeletStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeletStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeletStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Override) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Override) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Override) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Params[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PF9) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PF9) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PF9) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.BouncerSlowReqWebhook)
	copy(dAtA[i:], m.BouncerSlowReqWebhook)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BouncerSlowReqWebhook)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Masterless {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Value)
	copy(dAtA[i:], m.Value)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Value)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProfileAgentOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileAgentOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfileAgentOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Region) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Region) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Region) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.DisplayName)
	copy(dAtA[i:], m.DisplayName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DisplayName)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StorageBackend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageBackend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageBackend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Etcd.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AKSAgentPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Count))
	l = len(m.VMSize)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.OSDiskSizeGB))
	l = len(m.OSDiskType)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MaxPods))
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.AvailabilityZone) > 0 {
		for _, s := range m.AvailabilityZone {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.ProvisioningState)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PowerState)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.KubernetesVersion)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = len(m.Mode)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.OSType)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.NodeImageVersion)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.VnetSubnetID)
	n += 2 + l + sovGenerated(uint64(l))
	return n
}

func (m *AKSCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Location)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.KubernetesVersion)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ProvisioningState)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PowerState)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	n += 1 + sovGenerated(uint64(m.MaxAgentPools))
	l = len(m.NodeResourceGroup)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Network != nil {
		l = m.Network.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.AgentPools) > 0 {
		for _, e := range m.AgentPools {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.ServicePrincipalClientID)
	n += 1 + l + sovGenerated(uint64(l))
	if m.EnablePrivateCluster != nil {
		n += 2
	}
	l = len(m.DNSPrefix)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = len(m.FQDN)
	n += 2 + l + sovGenerated(uint64(l))
	return n
}

func (m *AKSInstance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Location)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.InstanceId)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.VMID)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Zones) > 0 {
		for _, s := range m.Zones {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.SKU != nil {
		l = m.SKU.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.VirtualMachineScaleSetName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AgentPoolName)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.NetworkInterfaces) > 0 {
		for _, s := range m.NetworkInterfaces {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.OSProfile != nil {
		l = m.OSProfile.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AKSInstanceLinuxConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SSHKeys) > 0 {
		for _, e := range m.SSHKeys {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 2
	n += 2
	return n
}

func (m *AKSInstanceOSProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ComputerName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AdminUsername)
	n += 1 + l + sovGenerated(uint64(l))
	if m.LinuxConfiguration != nil {
		l = m.LinuxConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.WindowsConfiguration != nil {
		l = m.WindowsConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AKSInstanceSKU) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Tier)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AKSInstanceWindowsConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WinRMListeners) > 0 {
		for _, e := range m.WinRMListeners {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 2
	n += 2
	l = len(m.TimeZone)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AKSLinuxInstanceSSHKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyData)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Path)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AKSLoadBalancerProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.AllocatedOutboundPorts))
	n += 1 + sovGenerated(uint64(m.ManagedOutboundIPs))
	if len(m.EffectiveOutboundIPs) > 0 {
		for _, s := range m.EffectiveOutboundIPs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.OutboundIPs) > 0 {
		for _, s := range m.OutboundIPs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.OutboundIPPrefixes) > 0 {
		for _, s := range m.OutboundIPPrefixes {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *AKSNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Plugin)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Policy)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ServiceCIDR)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ContainerCIDR)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DNSServiceIP)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.OutboundType)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.LoadBalancerSKU)
	n += 1 + l + sovGenerated(uint64(l))
	if m.LoadBalancerProfile != nil {
		l = m.LoadBalancerProfile.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AKSWindowsInstanceWinRMListener) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CertificateURL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Protocol)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *APIEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Port))
	n += 2
	return n
}

func (m *AWSCloudProviderCredentials) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessKeyID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SecretAccessKey)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Region)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AWSCloudProviderSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SecretName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Region)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AWSCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SSHKeyName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Region)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.AZs) > 0 {
		for _, s := range m.AZs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.AMI)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.MasterFlavor)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.WorkerFlavor)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AWSScalingConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.MinSize))
	n += 1 + sovGenerated(uint64(m.MaxSize))
	n += 1 + sovGenerated(uint64(m.DesiredSize))
	return n
}

func (m *AWSVPC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VPCID)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.SecurityGroup) > 0 {
		for _, s := range m.SecurityGroup {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 2
	n += 2
	l = len(m.ClusterSecurityGroupID)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Subnets) > 0 {
		for _, s := range m.Subnets {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *AddonsOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AppCatalog.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.CAS.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Luigi.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Kubevirt.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.CPUManager.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ProfileAgent.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AppCatalogOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *Auth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Keystone.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AzureCloudProviderCredentials) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClientSecret)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SubscriptionID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TenantID)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AzureCloudProviderSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SecretName)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *CNIOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bridge)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MTUSize))
	n += 2
	l = len(m.NetworkPlugin)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Calico.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Flannel.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *CPUManagerOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CPUManagerPolicy)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TopologyManagerPolicy)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ReservedCPUs)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *CalicoOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IPIPMode)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.IPv4BlkSize))
	n += 2
	l = len(m.IPv4Mode)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.IPv4DetectionMethod)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.IPv6Mode)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.IPv6BlkSize))
	l = len(m.IPv6PoolCIDR)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.IPv6DetectionMethod)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.RouterID)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	return n
}

func (m *CloudProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *CloudProviderList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *CloudProviderSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AWS != nil {
		l = m.AWS.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Azure != nil {
		l = m.Azure.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Local != nil {
		l = m.Local.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *CloudProviderStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	if len(m.Regions) > 0 {
		for _, e := range m.Regions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.LastChecked.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *Cluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ClusterAddon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ClusterAddonList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ClusterAddonSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Override.Size()
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	return n
}

func (m *ClusterAddonStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = m.LastChecked.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ClusterAutoScalerOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 1 + sovGenerated(uint64(m.MinWorkers))
	n += 1 + sovGenerated(uint64(m.MaxWorkers))
	return n
}

func (m *ClusterList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ClusterNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServicesCIDR)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PodsCIDR)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ServiceDomain)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ClusterProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Description)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ClusterProfileBinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ClusterProfileBindingDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Data)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Analysis)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ClusterProfileBindingList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ClusterProfileBindingSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterRef)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ProfileRef)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	n += 1 + sovGenerated(uint64(m.ReapInterval))
	return n
}

func (m *ClusterProfileBindingStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.RetryCount))
	return n
}

func (m *ClusterProfileDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Data)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ClusterProfileList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ClusterProfileSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Location)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CloneFrom)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.NamespaceScopedResources) > 0 {
		for _, s := range m.NamespaceScopedResources {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.ClusterScopedResources) > 0 {
		for _, s := range m.ClusterScopedResources {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 1 + sovGenerated(uint64(m.ReapInterval))
	return n
}

func (m *ClusterProfileStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.RetryCount))
	return n
}

func (m *ClusterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.CloudProviderID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ProjectID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.KubeVersion)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ClusterNetwork.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.KubeProxy.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Kubelet.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ContainerRuntime.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.LoadBalancer.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.StorageBackend.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Auth.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.HA.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Scheduler.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ControllerManager.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Apiserver.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.CNI.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.Addons.Size()
	n += 2 + l + sovGenerated(uint64(l))
	n += 3
	l = len(m.VaultToken)
	n += 2 + l + sovGenerated(uint64(l))
	l = m.PF9.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.DisplayName)
	n += 2 + l + sovGenerated(uint64(l))
	l = m.ControlPlaneEndpoint.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if m.AWS != nil {
		l = m.AWS.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	n += 3
	if m.EKS != nil {
		l = m.EKS.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.DockerPrivateRegistry)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.QuayPrivateRegistry)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.GCRPrivateRegistry)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.K8SPrivateRegistry)
	n += 2 + l + sovGenerated(uint64(l))
	n += 3
	if m.AKS != nil {
		l = m.AKS.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.GKE != nil {
		l = m.GKE.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ClusterStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Masters))
	n += 1 + sovGenerated(uint64(m.Workers))
	l = len(m.ControlPlaneEndpoint)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	return n
}

func (m *Condition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Severity)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.LastTransitionTime.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ContainerRuntime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Docker.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Runtime)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *DockerOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.RootDir)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DockerhubID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DockerhubPassword)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.RegistryMirrors)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DockerCentosPackageRepoUrl)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DockerUbuntuPackageRepoUrl)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *EC2Instance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InstanceID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AvailabilityZone)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.InstanceType)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Network != nil {
		l = m.Network.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *EC2InstanceNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrivateDNSName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PublicDNSName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PrivateIPAddress)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PublicIPAddress)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Subnet)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.VPCID)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *EKSCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Region)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.KubernetesVersion)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.EKSVersion)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.CreatedAt.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CA)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.IAMRole)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Network != nil {
		l = m.Network.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Logging != nil {
		l = m.Logging.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.NodeGroups) > 0 {
		for _, e := range m.NodeGroups {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *EKSClusterLogging) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Types) > 0 {
		for _, s := range m.Types {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *EKSLogging) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EKSClusterLogging) > 0 {
		for _, e := range m.EKSClusterLogging {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *EKSNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContainerCIDR) > 0 {
		for _, s := range m.ContainerCIDR {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.ServicesCIDR)
	n += 1 + l + sovGenerated(uint64(l))
	if m.VPC != nil {
		l = m.VPC.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *EKSNodeGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ARN)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.KubernetesVersion)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.CreatedAt.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.UpdatedAt.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CapacityType)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.InstanceTypes) > 0 {
		for _, s := range m.InstanceTypes {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Subnets) > 0 {
		for _, s := range m.Subnets {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.AMI)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = len(m.SSHKey)
	n += 1 + l + sovGenerated(uint64(l))
	if m.ScalingConfig != nil {
		l = m.ScalingConfig.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	n += 1 + sovGenerated(uint64(m.DiskSizeInGB))
	l = len(m.IAMRole)
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *EtcdOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataDir)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DiscoveryURL)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.ElectionTimeout))
	l = len(m.Env)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.HeartbeatIntervalMs))
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *FlannelOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InterfaceLabel)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PublicInterfaceLabel)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GKECluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locations) > 0 {
		for _, s := range m.Locations {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.ID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClusterCACertificate)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.InitialClusterVersion)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ReleaseChannel)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DatabaseEncryption)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Network != nil {
		l = m.Network.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.NodePools) > 0 {
		for _, e := range m.NodePools {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.PrivateCluster != nil {
		n += 2
	}
	return n
}

func (m *GKEClusterNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Network)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Subnetwork)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PodIpv4CIDR)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ServicesIpv4CIDR)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	return n
}

func (m *GKEInstance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Location)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.InstanceTemplate)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.InstanceGroupName)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GKENodePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.DiskSizeGb))
	l = len(m.MachineType)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ImageType)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DiskType)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.NodeCount))
	l = len(m.MaxPodsPerNode)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.K8sVersion)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Locations) > 0 {
		for _, s := range m.Locations {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *HA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Keepalived.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *Host) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *HostList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *HostPhase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Order))
	l = m.StartedAt.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Operation)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *HostSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClusterRole)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.KubeServiceState)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	return n
}

func (m *HostStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostState)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClusterRole)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.Hostname)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Nodelet.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Phases) > 0 {
		for _, e := range m.Phases {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 1 + sovGenerated(uint64(m.PhaseCompleted))
	n += 1 + sovGenerated(uint64(m.LastFailedPhase))
	n += 1 + sovGenerated(uint64(m.StartAttempts))
	n += 1 + sovGenerated(uint64(m.CurrentPhase))
	if len(m.AllStatusChecks) > 0 {
		for _, e := range m.AllStatusChecks {
			n += 2 + sovGenerated(uint64(e))
		}
	}
	n += 2 + sovGenerated(uint64(m.LastFailedCheck))
	n += 2 + sovGenerated(uint64(m.LastFailedCheckTime))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	n += 2 + sovGenerated(uint64(m.ObservedGeneration))
	l = len(m.KubeVersion)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.PrimaryIP)
	n += 2 + l + sovGenerated(uint64(l))
	return n
}

func (m *KeepalivedOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.MasterVIPInterface)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.MasterVIPPriority)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.MasterVIPRouterID)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KeystoneOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Domain)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AuthURL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Password)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Username)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ProjectDomainName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ProjectName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Region)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.UserDomainName)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeApiserverOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StorageBackend)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	n += 1 + sovGenerated(uint64(m.Port))
	n += 2
	l = len(m.RuntimeConfig)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ExtraArgs)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeControllerManagerOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExtraArgs)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeProxyOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mode)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeSchedulerOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExtraArgs)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeVirtOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *KubeletOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CloudCfg)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *LoadBalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MetalLB.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *LocalCloudProviderSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LuigiOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *MetalLBOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CIDR)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	return n
}

func (m *NodeletStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *Override) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Params) > 0 {
		for _, e := range m.Params {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *PF9) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.BouncerSlowReqWebhook)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Value)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ProfileAgentOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DisplayName)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *StorageBackend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Etcd.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AKSAgentPool) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&AKSAgentPool{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`VMSize:` + fmt.Sprintf("%v", this.VMSize) + `,`,
		`OSDiskSizeGB:` + fmt.Sprintf("%v", this.OSDiskSizeGB) + `,`,
		`OSDiskType:` + fmt.Sprintf("%v", this.OSDiskType) + `,`,
		`MaxPods:` + fmt.Sprintf("%v", this.MaxPods) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`AvailabilityZone:` + fmt.Sprintf("%v", this.AvailabilityZone) + `,`,
		`ProvisioningState:` + fmt.Sprintf("%v", this.ProvisioningState) + `,`,
		`PowerState:` + fmt.Sprintf("%v", this.PowerState) + `,`,
		`KubernetesVersion:` + fmt.Sprintf("%v", this.KubernetesVersion) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`OSType:` + fmt.Sprintf("%v", this.OSType) + `,`,
		`NodeImageVersion:` + fmt.Sprintf("%v", this.NodeImageVersion) + `,`,
		`VnetSubnetID:` + fmt.Sprintf("%v", this.VnetSubnetID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AKSCluster) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAgentPools := "[]AKSAgentPool{"
	for _, f := range this.AgentPools {
		repeatedStringForAgentPools += strings.Replace(strings.Replace(f.String(), "AKSAgentPool", "AKSAgentPool", 1), `&`, ``, 1) + ","
	}
	repeatedStringForAgentPools += "}"
	repeatedStringForInstances := "[]AKSInstance{"
	for _, f := range this.Instances {
		repeatedStringForInstances += strings.Replace(strings.Replace(f.String(), "AKSInstance", "AKSInstance", 1), `&`, ``, 1) + ","
	}
	repeatedStringForInstances += "}"
	keysForTags := make([]string, 0, len(this.Tags))
	for k := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&AKSCluster{`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`KubernetesVersion:` + fmt.Sprintf("%v", this.KubernetesVersion) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ProvisioningState:` + fmt.Sprintf("%v", this.ProvisioningState) + `,`,
		`PowerState:` + fmt.Sprintf("%v", this.PowerState) + `,`,
		`EnableRBAC:` + fmt.Sprintf("%v", this.EnableRBAC) + `,`,
		`MaxAgentPools:` + fmt.Sprintf("%v", this.MaxAgentPools) + `,`,
		`NodeResourceGroup:` + fmt.Sprintf("%v", this.NodeResourceGroup) + `,`,
		`Network:` + strings.Replace(this.Network.String(), "AKSNetwork", "AKSNetwork", 1) + `,`,
		`AgentPools:` + repeatedStringForAgentPools + `,`,
		`Instances:` + repeatedStringForInstances + `,`,
		`ServicePrincipalClientID:` + fmt.Sprintf("%v", this.ServicePrincipalClientID) + `,`,
		`EnablePrivateCluster:` + valueToStringGenerated(this.EnablePrivateCluster) + `,`,
		`DNSPrefix:` + fmt.Sprintf("%v", this.DNSPrefix) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`FQDN:` + fmt.Sprintf("%v", this.FQDN) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AKSInstance) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&AKSInstance{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`InstanceId:` + fmt.Sprintf("%v", this.InstanceId) + `,`,
		`VMID:` + fmt.Sprintf("%v", this.VMID) + `,`,
		`Zones:` + fmt.Sprintf("%v", this.Zones) + `,`,
		`SKU:` + strings.Replace(this.SKU.String(), "AKSInstanceSKU", "AKSInstanceSKU", 1) + `,`,
		`VirtualMachineScaleSetName:` + fmt.Sprintf("%v", this.VirtualMachineScaleSetName) + `,`,
		`AgentPoolName:` + fmt.Sprintf("%v", this.AgentPoolName) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`NetworkInterfaces:` + fmt.Sprintf("%v", this.NetworkInterfaces) + `,`,
		`OSProfile:` + strings.Replace(this.OSProfile.String(), "AKSInstanceOSProfile", "AKSInstanceOSProfile", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AKSInstanceLinuxConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSSHKeys := "[]AKSLinuxInstanceSSHKey{"
	for _, f := range this.SSHKeys {
		repeatedStringForSSHKeys += strings.Replace(strings.Replace(f.String(), "AKSLinuxInstanceSSHKey", "AKSLinuxInstanceSSHKey", 1), `&`, ``, 1) + ","
	}
	repeatedStringForSSHKeys += "}"
	s := strings.Join([]string{`&AKSInstanceLinuxConfiguration{`,
		`SSHKeys:` + repeatedStringForSSHKeys + `,`,
		`DisablePasswordAuthentication:` + fmt.Sprintf("%v", this.DisablePasswordAuthentication) + `,`,
		`ProvisionVMAgent:` + fmt.Sprintf("%v", this.ProvisionVMAgent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AKSInstanceOSProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AKSInstanceOSProfile{`,
		`ComputerName:` + fmt.Sprintf("%v", this.ComputerName) + `,`,
		`AdminUsername:` + fmt.Sprintf("%v", this.AdminUsername) + `,`,
		`LinuxConfiguration:` + strings.Replace(this.LinuxConfiguration.String(), "AKSInstanceLinuxConfiguration", "AKSInstanceLinuxConfiguration", 1) + `,`,
		`WindowsConfiguration:` + strings.Replace(this.WindowsConfiguration.String(), "AKSInstanceWindowsConfiguration", "AKSInstanceWindowsConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AKSInstanceSKU) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AKSInstanceSKU{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Tier:` + fmt.Sprintf("%v", this.Tier) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AKSInstanceWindowsConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForWinRMListeners := "[]AKSWindowsInstanceWinRMListener{"
	for _, f := range this.WinRMListeners {
		repeatedStringForWinRMListeners += strings.Replace(strings.Replace(f.String(), "AKSWindowsInstanceWinRMListener", "AKSWindowsInstanceWinRMListener", 1), `&`, ``, 1) + ","
	}
	repeatedStringForWinRMListeners += "}"
	s := strings.Join([]string{`&AKSInstanceWindowsConfiguration{`,
		`WinRMListeners:` + repeatedStringForWinRMListeners + `,`,
		`EnableAutomaticUpdates:` + fmt.Sprintf("%v", this.EnableAutomaticUpdates) + `,`,
		`ProvisionVMAgent:` + fmt.Sprintf("%v", this.ProvisionVMAgent) + `,`,
		`TimeZone:` + fmt.Sprintf("%v", this.TimeZone) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AKSLinuxInstanceSSHKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AKSLinuxInstanceSSHKey{`,
		`KeyData:` + fmt.Sprintf("%v", this.KeyData) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AKSLoadBalancerProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AKSLoadBalancerProfile{`,
		`AllocatedOutboundPorts:` + fmt.Sprintf("%v", this.AllocatedOutboundPorts) + `,`,
		`ManagedOutboundIPs:` + fmt.Sprintf("%v", this.ManagedOutboundIPs) + `,`,
		`EffectiveOutboundIPs:` + fmt.Sprintf("%v", this.EffectiveOutboundIPs) + `,`,
		`OutboundIPs:` + fmt.Sprintf("%v", this.OutboundIPs) + `,`,
		`OutboundIPPrefixes:` + fmt.Sprintf("%v", this.OutboundIPPrefixes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AKSNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AKSNetwork{`,
		`Plugin:` + fmt.Sprintf("%v", this.Plugin) + `,`,
		`Policy:` + fmt.Sprintf("%v", this.Policy) + `,`,
		`ServiceCIDR:` + fmt.Sprintf("%v", this.ServiceCIDR) + `,`,
		`ContainerCIDR:` + fmt.Sprintf("%v", this.ContainerCIDR) + `,`,
		`DNSServiceIP:` + fmt.Sprintf("%v", this.DNSServiceIP) + `,`,
		`OutboundType:` + fmt.Sprintf("%v", this.OutboundType) + `,`,
		`LoadBalancerSKU:` + fmt.Sprintf("%v", this.LoadBalancerSKU) + `,`,
		`LoadBalancerProfile:` + strings.Replace(this.LoadBalancerProfile.String(), "AKSLoadBalancerProfile", "AKSLoadBalancerProfile", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AKSWindowsInstanceWinRMListener) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AKSWindowsInstanceWinRMListener{`,
		`CertificateURL:` + fmt.Sprintf("%v", this.CertificateURL) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpoint{`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`UsePF9Domain:` + fmt.Sprintf("%v", this.UsePF9Domain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSCloudProviderCredentials) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSCloudProviderCredentials{`,
		`AccessKeyID:` + fmt.Sprintf("%v", this.AccessKeyID) + `,`,
		`SecretAccessKey:` + fmt.Sprintf("%v", this.SecretAccessKey) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSCloudProviderSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSCloudProviderSpec{`,
		`SecretName:` + fmt.Sprintf("%v", this.SecretName) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSCluster{`,
		`SSHKeyName:` + fmt.Sprintf("%v", this.SSHKeyName) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`AZs:` + fmt.Sprintf("%v", this.AZs) + `,`,
		`AMI:` + fmt.Sprintf("%v", this.AMI) + `,`,
		`MasterFlavor:` + fmt.Sprintf("%v", this.MasterFlavor) + `,`,
		`WorkerFlavor:` + fmt.Sprintf("%v", this.WorkerFlavor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSScalingConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSScalingConfig{`,
		`MinSize:` + fmt.Sprintf("%v", this.MinSize) + `,`,
		`MaxSize:` + fmt.Sprintf("%v", this.MaxSize) + `,`,
		`DesiredSize:` + fmt.Sprintf("%v", this.DesiredSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPC) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPC{`,
		`VPCID:` + fmt.Sprintf("%v", this.VPCID) + `,`,
		`SecurityGroup:` + fmt.Sprintf("%v", this.SecurityGroup) + `,`,
		`PublicAccess:` + fmt.Sprintf("%v", this.PublicAccess) + `,`,
		`PrivateAccess:` + fmt.Sprintf("%v", this.PrivateAccess) + `,`,
		`ClusterSecurityGroupID:` + fmt.Sprintf("%v", this.ClusterSecurityGroupID) + `,`,
		`Subnets:` + fmt.Sprintf("%v", this.Subnets) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddonsOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddonsOpts{`,
		`AppCatalog:` + strings.Replace(strings.Replace(this.AppCatalog.String(), "AppCatalogOpts", "AppCatalogOpts", 1), `&`, ``, 1) + `,`,
		`CAS:` + strings.Replace(strings.Replace(this.CAS.String(), "ClusterAutoScalerOpts", "ClusterAutoScalerOpts", 1), `&`, ``, 1) + `,`,
		`Luigi:` + strings.Replace(strings.Replace(this.Luigi.String(), "LuigiOpts", "LuigiOpts", 1), `&`, ``, 1) + `,`,
		`Kubevirt:` + strings.Replace(strings.Replace(this.Kubevirt.String(), "KubeVirtOpts", "KubeVirtOpts", 1), `&`, ``, 1) + `,`,
		`CPUManager:` + strings.Replace(strings.Replace(this.CPUManager.String(), "CPUManagerOpts", "CPUManagerOpts", 1), `&`, ``, 1) + `,`,
		`ProfileAgent:` + strings.Replace(strings.Replace(this.ProfileAgent.String(), "ProfileAgentOpts", "ProfileAgentOpts", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppCatalogOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppCatalogOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Auth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Auth{`,
		`Keystone:` + strings.Replace(strings.Replace(this.Keystone.String(), "KeystoneOpts", "KeystoneOpts", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureCloudProviderCredentials) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureCloudProviderCredentials{`,
		`ClientID:` + fmt.Sprintf("%v", this.ClientID) + `,`,
		`ClientSecret:` + fmt.Sprintf("%v", this.ClientSecret) + `,`,
		`SubscriptionID:` + fmt.Sprintf("%v", this.SubscriptionID) + `,`,
		`TenantID:` + fmt.Sprintf("%v", this.TenantID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureCloudProviderSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureCloudProviderSpec{`,
		`SecretName:` + fmt.Sprintf("%v", this.SecretName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CNIOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CNIOpts{`,
		`Bridge:` + fmt.Sprintf("%v", this.Bridge) + `,`,
		`MTUSize:` + fmt.Sprintf("%v", this.MTUSize) + `,`,
		`IPv6:` + fmt.Sprintf("%v", this.IPv6) + `,`,
		`NetworkPlugin:` + fmt.Sprintf("%v", this.NetworkPlugin) + `,`,
		`Calico:` + strings.Replace(strings.Replace(this.Calico.String(), "CalicoOpts", "CalicoOpts", 1), `&`, ``, 1) + `,`,
		`Flannel:` + strings.Replace(strings.Replace(this.Flannel.String(), "FlannelOpts", "FlannelOpts", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CPUManagerOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPUManagerOpts{`,
		`CPUManagerPolicy:` + fmt.Sprintf("%v", this.CPUManagerPolicy) + `,`,
		`TopologyManagerPolicy:` + fmt.Sprintf("%v", this.TopologyManagerPolicy) + `,`,
		`ReservedCPUs:` + fmt.Sprintf("%v", this.ReservedCPUs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CalicoOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CalicoOpts{`,
		`IPIPMode:` + fmt.Sprintf("%v", this.IPIPMode) + `,`,
		`IPv4BlkSize:` + fmt.Sprintf("%v", this.IPv4BlkSize) + `,`,
		`NatOutgoing:` + fmt.Sprintf("%v", this.NatOutgoing) + `,`,
		`IPv4Mode:` + fmt.Sprintf("%v", this.IPv4Mode) + `,`,
		`IPv4DetectionMethod:` + fmt.Sprintf("%v", this.IPv4DetectionMethod) + `,`,
		`IPv6Mode:` + fmt.Sprintf("%v", this.IPv6Mode) + `,`,
		`IPv6BlkSize:` + fmt.Sprintf("%v", this.IPv6BlkSize) + `,`,
		`IPv6PoolCIDR:` + fmt.Sprintf("%v", this.IPv6PoolCIDR) + `,`,
		`IPv6PoolNAT:` + fmt.Sprintf("%v", this.IPv6PoolNAT) + `,`,
		`IPv6DetectionMethod:` + fmt.Sprintf("%v", this.IPv6DetectionMethod) + `,`,
		`RouterID:` + fmt.Sprintf("%v", this.RouterID) + `,`,
		`FelixIPv6Support:` + fmt.Sprintf("%v", this.FelixIPv6Support) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloudProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloudProvider{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "CloudProviderSpec", "CloudProviderSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "CloudProviderStatus", "CloudProviderStatus", 1), `&`, ``, 1) + `,`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloudProviderList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]CloudProvider{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "CloudProvider", "CloudProvider", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&CloudProviderList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloudProviderSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloudProviderSpec{`,
		`AWS:` + strings.Replace(this.AWS.String(), "AWSCloudProviderSpec", "AWSCloudProviderSpec", 1) + `,`,
		`Azure:` + strings.Replace(this.Azure.String(), "AzureCloudProviderSpec", "AzureCloudProviderSpec", 1) + `,`,
		`Local:` + strings.Replace(this.Local.String(), "LocalCloudProviderSpec", "LocalCloudProviderSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloudProviderStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]Condition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(strings.Replace(f.String(), "Condition", "Condition", 1), `&`, ``, 1) + ","
	}
	repeatedStringForConditions += "}"
	repeatedStringForRegions := "[]Region{"
	for _, f := range this.Regions {
		repeatedStringForRegions += strings.Replace(strings.Replace(f.String(), "Region", "Region", 1), `&`, ``, 1) + ","
	}
	repeatedStringForRegions += "}"
	s := strings.Join([]string{`&CloudProviderStatus{`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`Regions:` + repeatedStringForRegions + `,`,
		`LastChecked:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.LastChecked), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ClusterSpec", "ClusterSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "ClusterStatus", "ClusterStatus", 1), `&`, ``, 1) + `,`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterAddon) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterAddon{`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ClusterAddonSpec", "ClusterAddonSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "ClusterAddonStatus", "ClusterAddonStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterAddonList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]ClusterAddon{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "ClusterAddon", "ClusterAddon", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ClusterAddonList{`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterAddonSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterAddonSpec{`,
		`ClusterID:` + fmt.Sprintf("%v", this.ClusterID) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Override:` + strings.Replace(strings.Replace(this.Override.String(), "Override", "Override", 1), `&`, ``, 1) + `,`,
		`Watch:` + fmt.Sprintf("%v", this.Watch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterAddonStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterAddonStatus{`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`Healthy:` + fmt.Sprintf("%v", this.Healthy) + `,`,
		`LastChecked:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.LastChecked), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterAutoScalerOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterAutoScalerOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`MinWorkers:` + fmt.Sprintf("%v", this.MinWorkers) + `,`,
		`MaxWorkers:` + fmt.Sprintf("%v", this.MaxWorkers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]Cluster{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "Cluster", "Cluster", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ClusterList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterNetwork{`,
		`ServicesCIDR:` + fmt.Sprintf("%v", this.ServicesCIDR) + `,`,
		`PodsCIDR:` + fmt.Sprintf("%v", this.PodsCIDR) + `,`,
		`ServiceDomain:` + fmt.Sprintf("%v", this.ServiceDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterProfile{`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ClusterProfileSpec", "ClusterProfileSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "ClusterProfileStatus", "ClusterProfileStatus", 1), `&`, ``, 1) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterProfileBinding) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterProfileBinding{`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ClusterProfileBindingSpec", "ClusterProfileBindingSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "ClusterProfileBindingStatus", "ClusterProfileBindingStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterProfileBindingDetail) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterProfileBindingDetail{`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Analysis:` + fmt.Sprintf("%v", this.Analysis) + `,`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterProfileBindingList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]ClusterProfileBinding{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "ClusterProfileBinding", "ClusterProfileBinding", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ClusterProfileBindingList{`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterProfileBindingSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterProfileBindingSpec{`,
		`ClusterRef:` + fmt.Sprintf("%v", this.ClusterRef) + `,`,
		`ProfileRef:` + fmt.Sprintf("%v", this.ProfileRef) + `,`,
		`DryRun:` + fmt.Sprintf("%v", this.DryRun) + `,`,
		`ReapInterval:` + fmt.Sprintf("%v", this.ReapInterval) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterProfileBindingStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterProfileBindingStatus{`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`RetryCount:` + fmt.Sprintf("%v", this.RetryCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterProfileDetail) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterProfileDetail{`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterProfileList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]ClusterProfile{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "ClusterProfile", "ClusterProfile", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ClusterProfileList{`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterProfileSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterProfileSpec{`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`CloneFrom:` + fmt.Sprintf("%v", this.CloneFrom) + `,`,
		`NamespaceScopedResources:` + fmt.Sprintf("%v", this.NamespaceScopedResources) + `,`,
		`ClusterScopedResources:` + fmt.Sprintf("%v", this.ClusterScopedResources) + `,`,
		`ReapInterval:` + fmt.Sprintf("%v", this.ReapInterval) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterProfileStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]Condition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(strings.Replace(f.String(), "Condition", "Condition", 1), `&`, ``, 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&ClusterProfileStatus{`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`RetryCount:` + fmt.Sprintf("%v", this.RetryCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterSpec{`,
		`Debug:` + fmt.Sprintf("%v", this.Debug) + `,`,
		`CloudProviderID:` + fmt.Sprintf("%v", this.CloudProviderID) + `,`,
		`ProjectID:` + fmt.Sprintf("%v", this.ProjectID) + `,`,
		`KubeVersion:` + fmt.Sprintf("%v", this.KubeVersion) + `,`,
		`ClusterNetwork:` + strings.Replace(strings.Replace(this.ClusterNetwork.String(), "ClusterNetwork", "ClusterNetwork", 1), `&`, ``, 1) + `,`,
		`KubeProxy:` + strings.Replace(strings.Replace(this.KubeProxy.String(), "KubeProxyOpts", "KubeProxyOpts", 1), `&`, ``, 1) + `,`,
		`Kubelet:` + strings.Replace(strings.Replace(this.Kubelet.String(), "KubeletOpts", "KubeletOpts", 1), `&`, ``, 1) + `,`,
		`ContainerRuntime:` + strings.Replace(strings.Replace(this.ContainerRuntime.String(), "ContainerRuntime", "ContainerRuntime", 1), `&`, ``, 1) + `,`,
		`LoadBalancer:` + strings.Replace(strings.Replace(this.LoadBalancer.String(), "LoadBalancer", "LoadBalancer", 1), `&`, ``, 1) + `,`,
		`StorageBackend:` + strings.Replace(strings.Replace(this.StorageBackend.String(), "StorageBackend", "StorageBackend", 1), `&`, ``, 1) + `,`,
		`Auth:` + strings.Replace(strings.Replace(this.Auth.String(), "Auth", "Auth", 1), `&`, ``, 1) + `,`,
		`HA:` + strings.Replace(strings.Replace(this.HA.String(), "HA", "HA", 1), `&`, ``, 1) + `,`,
		`Scheduler:` + strings.Replace(strings.Replace(this.Scheduler.String(), "KubeSchedulerOpts", "KubeSchedulerOpts", 1), `&`, ``, 1) + `,`,
		`ControllerManager:` + strings.Replace(strings.Replace(this.ControllerManager.String(), "KubeControllerManagerOpts", "KubeControllerManagerOpts", 1), `&`, ``, 1) + `,`,
		`Apiserver:` + strings.Replace(strings.Replace(this.Apiserver.String(), "KubeApiserverOpts", "KubeApiserverOpts", 1), `&`, ``, 1) + `,`,
		`CNI:` + strings.Replace(strings.Replace(this.CNI.String(), "CNIOpts", "CNIOpts", 1), `&`, ``, 1) + `,`,
		`Addons:` + strings.Replace(strings.Replace(this.Addons.String(), "AddonsOpts", "AddonsOpts", 1), `&`, ``, 1) + `,`,
		`AllowWorkloadsOnMasters:` + fmt.Sprintf("%v", this.AllowWorkloadsOnMasters) + `,`,
		`VaultToken:` + fmt.Sprintf("%v", this.VaultToken) + `,`,
		`PF9:` + strings.Replace(strings.Replace(this.PF9.String(), "PF9", "PF9", 1), `&`, ``, 1) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`ControlPlaneEndpoint:` + strings.Replace(strings.Replace(this.ControlPlaneEndpoint.String(), "APIEndpoint", "APIEndpoint", 1), `&`, ``, 1) + `,`,
		`AWS:` + strings.Replace(this.AWS.String(), "AWSCluster", "AWSCluster", 1) + `,`,
		`External:` + fmt.Sprintf("%v", this.External) + `,`,
		`EKS:` + strings.Replace(this.EKS.String(), "EKSCluster", "EKSCluster", 1) + `,`,
		`DockerPrivateRegistry:` + fmt.Sprintf("%v", this.DockerPrivateRegistry) + `,`,
		`QuayPrivateRegistry:` + fmt.Sprintf("%v", this.QuayPrivateRegistry) + `,`,
		`GCRPrivateRegistry:` + fmt.Sprintf("%v", this.GCRPrivateRegistry) + `,`,
		`K8SPrivateRegistry:` + fmt.Sprintf("%v", this.K8SPrivateRegistry) + `,`,
		`UseHostname:` + fmt.Sprintf("%v", this.UseHostname) + `,`,
		`AKS:` + strings.Replace(this.AKS.String(), "AKSCluster", "AKSCluster", 1) + `,`,
		`GKE:` + strings.Replace(this.GKE.String(), "GKECluster", "GKECluster", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]Condition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(strings.Replace(f.String(), "Condition", "Condition", 1), `&`, ``, 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&ClusterStatus{`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Masters:` + fmt.Sprintf("%v", this.Masters) + `,`,
		`Workers:` + fmt.Sprintf("%v", this.Workers) + `,`,
		`ControlPlaneEndpoint:` + fmt.Sprintf("%v", this.ControlPlaneEndpoint) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Condition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Condition{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Severity:` + fmt.Sprintf("%v", this.Severity) + `,`,
		`LastTransitionTime:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.LastTransitionTime), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerRuntime) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerRuntime{`,
		`Docker:` + strings.Replace(strings.Replace(this.Docker.String(), "DockerOpts", "DockerOpts", 1), `&`, ``, 1) + `,`,
		`Runtime:` + fmt.Sprintf("%v", this.Runtime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DockerOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DockerOpts{`,
		`LiveRestore:` + fmt.Sprintf("%v", this.LiveRestore) + `,`,
		`RootDir:` + fmt.Sprintf("%v", this.RootDir) + `,`,
		`DockerhubID:` + fmt.Sprintf("%v", this.DockerhubID) + `,`,
		`DockerhubPassword:` + fmt.Sprintf("%v", this.DockerhubPassword) + `,`,
		`RegistryMirrors:` + fmt.Sprintf("%v", this.RegistryMirrors) + `,`,
		`DockerCentosPackageRepoUrl:` + fmt.Sprintf("%v", this.DockerCentosPackageRepoUrl) + `,`,
		`DockerUbuntuPackageRepoUrl:` + fmt.Sprintf("%v", this.DockerUbuntuPackageRepoUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EC2Instance) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EC2Instance{`,
		`InstanceID:` + fmt.Sprintf("%v", this.InstanceID) + `,`,
		`AvailabilityZone:` + fmt.Sprintf("%v", this.AvailabilityZone) + `,`,
		`InstanceType:` + fmt.Sprintf("%v", this.InstanceType) + `,`,
		`Network:` + strings.Replace(this.Network.String(), "EC2InstanceNetwork", "EC2InstanceNetwork", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EC2InstanceNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EC2InstanceNetwork{`,
		`PrivateDNSName:` + fmt.Sprintf("%v", this.PrivateDNSName) + `,`,
		`PublicDNSName:` + fmt.Sprintf("%v", this.PublicDNSName) + `,`,
		`PrivateIPAddress:` + fmt.Sprintf("%v", this.PrivateIPAddress) + `,`,
		`PublicIPAddress:` + fmt.Sprintf("%v", this.PublicIPAddress) + `,`,
		`Subnet:` + fmt.Sprintf("%v", this.Subnet) + `,`,
		`VPCID:` + fmt.Sprintf("%v", this.VPCID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EKSCluster) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodeGroups := "[]EKSNodeGroup{"
	for _, f := range this.NodeGroups {
		repeatedStringForNodeGroups += strings.Replace(strings.Replace(f.String(), "EKSNodeGroup", "EKSNodeGroup", 1), `&`, ``, 1) + ","
	}
	repeatedStringForNodeGroups += "}"
	keysForTags := make([]string, 0, len(this.Tags))
	for k := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&EKSCluster{`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`KubernetesVersion:` + fmt.Sprintf("%v", this.KubernetesVersion) + `,`,
		`EKSVersion:` + fmt.Sprintf("%v", this.EKSVersion) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`CA:` + fmt.Sprintf("%v", this.CA) + `,`,
		`IAMRole:` + fmt.Sprintf("%v", this.IAMRole) + `,`,
		`Network:` + strings.Replace(this.Network.String(), "EKSNetwork", "EKSNetwork", 1) + `,`,
		`Logging:` + strings.Replace(this.Logging.String(), "EKSLogging", "EKSLogging", 1) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`NodeGroups:` + repeatedStringForNodeGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *EKSClusterLogging) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EKSClusterLogging{`,
		`Types:` + fmt.Sprintf("%v", this.Types) + `,`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EKSLogging) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEKSClusterLogging := "[]EKSClusterLogging{"
	for _, f := range this.EKSClusterLogging {
		repeatedStringForEKSClusterLogging += strings.Replace(strings.Replace(f.String(), "EKSClusterLogging", "EKSClusterLogging", 1), `&`, ``, 1) + ","
	}
	repeatedStringForEKSClusterLogging += "}"
	s := strings.Join([]string{`&EKSLogging{`,
		`EKSClusterLogging:` + repeatedStringForEKSClusterLogging + `,`,
		`}`,
	}, "")
	return s
}
func (this *EKSNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EKSNetwork{`,
		`ContainerCIDR:` + fmt.Sprintf("%v", this.ContainerCIDR) + `,`,
		`ServicesCIDR:` + fmt.Sprintf("%v", this.ServicesCIDR) + `,`,
		`VPC:` + strings.Replace(this.VPC.String(), "AWSVPC", "AWSVPC", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EKSNodeGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInstances := "[]EC2Instance{"
	for _, f := range this.Instances {
		repeatedStringForInstances += strings.Replace(strings.Replace(f.String(), "EC2Instance", "EC2Instance", 1), `&`, ``, 1) + ","
	}
	repeatedStringForInstances += "}"
	keysForTags := make([]string, 0, len(this.Tags))
	for k := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	keysForLabels := make([]string, 0, len(this.Labels))
	for k := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&EKSNodeGroup{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ARN:` + fmt.Sprintf("%v", this.ARN) + `,`,
		`KubernetesVersion:` + fmt.Sprintf("%v", this.KubernetesVersion) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`CapacityType:` + fmt.Sprintf("%v", this.CapacityType) + `,`,
		`InstanceTypes:` + fmt.Sprintf("%v", this.InstanceTypes) + `,`,
		`Subnets:` + fmt.Sprintf("%v", this.Subnets) + `,`,
		`AMI:` + fmt.Sprintf("%v", this.AMI) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`SSHKey:` + fmt.Sprintf("%v", this.SSHKey) + `,`,
		`ScalingConfig:` + strings.Replace(this.ScalingConfig.String(), "AWSScalingConfig", "AWSScalingConfig", 1) + `,`,
		`DiskSizeInGB:` + fmt.Sprintf("%v", this.DiskSizeInGB) + `,`,
		`IAMRole:` + fmt.Sprintf("%v", this.IAMRole) + `,`,
		`Instances:` + repeatedStringForInstances + `,`,
		`}`,
	}, "")
	return s
}
func (this *EtcdOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EtcdOpts{`,
		`DataDir:` + fmt.Sprintf("%v", this.DataDir) + `,`,
		`DiscoveryURL:` + fmt.Sprintf("%v", this.DiscoveryURL) + `,`,
		`ElectionTimeout:` + fmt.Sprintf("%v", this.ElectionTimeout) + `,`,
		`Env:` + fmt.Sprintf("%v", this.Env) + `,`,
		`HeartbeatIntervalMs:` + fmt.Sprintf("%v", this.HeartbeatIntervalMs) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlannelOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlannelOpts{`,
		`InterfaceLabel:` + fmt.Sprintf("%v", this.InterfaceLabel) + `,`,
		`PublicInterfaceLabel:` + fmt.Sprintf("%v", this.PublicInterfaceLabel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GKECluster) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodePools := "[]GKENodePool{"
	for _, f := range this.NodePools {
		repeatedStringForNodePools += strings.Replace(strings.Replace(f.String(), "GKENodePool", "GKENodePool", 1), `&`, ``, 1) + ","
	}
	repeatedStringForNodePools += "}"
	s := strings.Join([]string{`&GKECluster{`,
		`Locations:` + fmt.Sprintf("%v", this.Locations) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ClusterCACertificate:` + fmt.Sprintf("%v", this.ClusterCACertificate) + `,`,
		`InitialClusterVersion:` + fmt.Sprintf("%v", this.InitialClusterVersion) + `,`,
		`ReleaseChannel:` + fmt.Sprintf("%v", this.ReleaseChannel) + `,`,
		`DatabaseEncryption:` + fmt.Sprintf("%v", this.DatabaseEncryption) + `,`,
		`Network:` + strings.Replace(this.Network.String(), "GKEClusterNetwork", "GKEClusterNetwork", 1) + `,`,
		`NodePools:` + repeatedStringForNodePools + `,`,
		`PrivateCluster:` + valueToStringGenerated(this.PrivateCluster) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GKEClusterNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GKEClusterNetwork{`,
		`UseIpAliases:` + fmt.Sprintf("%v", this.UseIpAliases) + `,`,
		`Network:` + fmt.Sprintf("%v", this.Network) + `,`,
		`Subnetwork:` + fmt.Sprintf("%v", this.Subnetwork) + `,`,
		`PodIpv4CIDR:` + fmt.Sprintf("%v", this.PodIpv4CIDR) + `,`,
		`ServicesIpv4CIDR:` + fmt.Sprintf("%v", this.ServicesIpv4CIDR) + `,`,
		`NetworkPolicyConfig:` + fmt.Sprintf("%v", this.NetworkPolicyConfig) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GKEInstance) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GKEInstance{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`InstanceTemplate:` + fmt.Sprintf("%v", this.InstanceTemplate) + `,`,
		`InstanceGroupName:` + fmt.Sprintf("%v", this.InstanceGroupName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GKENodePool) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInstances := "[]GKEInstance{"
	for _, f := range this.Instances {
		repeatedStringForInstances += strings.Replace(strings.Replace(f.String(), "GKEInstance", "GKEInstance", 1), `&`, ``, 1) + ","
	}
	repeatedStringForInstances += "}"
	s := strings.Join([]string{`&GKENodePool{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DiskSizeGb:` + fmt.Sprintf("%v", this.DiskSizeGb) + `,`,
		`MachineType:` + fmt.Sprintf("%v", this.MachineType) + `,`,
		`ImageType:` + fmt.Sprintf("%v", this.ImageType) + `,`,
		`DiskType:` + fmt.Sprintf("%v", this.DiskType) + `,`,
		`NodeCount:` + fmt.Sprintf("%v", this.NodeCount) + `,`,
		`MaxPodsPerNode:` + fmt.Sprintf("%v", this.MaxPodsPerNode) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`K8sVersion:` + fmt.Sprintf("%v", this.K8sVersion) + `,`,
		`Locations:` + fmt.Sprintf("%v", this.Locations) + `,`,
		`Instances:` + repeatedStringForInstances + `,`,
		`}`,
	}, "")
	return s
}
func (this *HA) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HA{`,
		`Keepalived:` + strings.Replace(strings.Replace(this.Keepalived.String(), "KeepalivedOpts", "KeepalivedOpts", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Host) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Host{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "HostSpec", "HostSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "HostStatus", "HostStatus", 1), `&`, ``, 1) + `,`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]Host{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "Host", "Host", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&HostList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostPhase) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostPhase{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`StartedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.StartedAt), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`Operation:` + fmt.Sprintf("%v", this.Operation) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostSpec{`,
		`ClusterID:` + fmt.Sprintf("%v", this.ClusterID) + `,`,
		`ClusterRole:` + fmt.Sprintf("%v", this.ClusterRole) + `,`,
		`KubeServiceState:` + fmt.Sprintf("%v", this.KubeServiceState) + `,`,
		`Debug:` + fmt.Sprintf("%v", this.Debug) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPhases := "[]HostPhase{"
	for _, f := range this.Phases {
		repeatedStringForPhases += strings.Replace(strings.Replace(f.String(), "HostPhase", "HostPhase", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPhases += "}"
	repeatedStringForConditions := "[]Condition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(strings.Replace(f.String(), "Condition", "Condition", 1), `&`, ``, 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&HostStatus{`,
		`HostState:` + fmt.Sprintf("%v", this.HostState) + `,`,
		`ClusterRole:` + fmt.Sprintf("%v", this.ClusterRole) + `,`,
		`ServiceState:` + fmt.Sprintf("%v", this.ServiceState) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`Nodelet:` + strings.Replace(strings.Replace(this.Nodelet.String(), "NodeletStatus", "NodeletStatus", 1), `&`, ``, 1) + `,`,
		`Phases:` + repeatedStringForPhases + `,`,
		`PhaseCompleted:` + fmt.Sprintf("%v", this.PhaseCompleted) + `,`,
		`LastFailedPhase:` + fmt.Sprintf("%v", this.LastFailedPhase) + `,`,
		`StartAttempts:` + fmt.Sprintf("%v", this.StartAttempts) + `,`,
		`CurrentPhase:` + fmt.Sprintf("%v", this.CurrentPhase) + `,`,
		`AllStatusChecks:` + fmt.Sprintf("%v", this.AllStatusChecks) + `,`,
		`LastFailedCheck:` + fmt.Sprintf("%v", this.LastFailedCheck) + `,`,
		`LastFailedCheckTime:` + fmt.Sprintf("%v", this.LastFailedCheckTime) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`KubeVersion:` + fmt.Sprintf("%v", this.KubeVersion) + `,`,
		`PrimaryIP:` + fmt.Sprintf("%v", this.PrimaryIP) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeepalivedOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeepalivedOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`MasterVIPInterface:` + fmt.Sprintf("%v", this.MasterVIPInterface) + `,`,
		`MasterVIPPriority:` + fmt.Sprintf("%v", this.MasterVIPPriority) + `,`,
		`MasterVIPRouterID:` + fmt.Sprintf("%v", this.MasterVIPRouterID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeystoneOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeystoneOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`AuthURL:` + fmt.Sprintf("%v", this.AuthURL) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`ProjectDomainName:` + fmt.Sprintf("%v", this.ProjectDomainName) + `,`,
		`ProjectName:` + fmt.Sprintf("%v", this.ProjectName) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`UserDomainName:` + fmt.Sprintf("%v", this.UserDomainName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeApiserverOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeApiserverOpts{`,
		`StorageBackend:` + fmt.Sprintf("%v", this.StorageBackend) + `,`,
		`Privileged:` + fmt.Sprintf("%v", this.Privileged) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Authz:` + fmt.Sprintf("%v", this.Authz) + `,`,
		`RuntimeConfig:` + fmt.Sprintf("%v", this.RuntimeConfig) + `,`,
		`ExtraArgs:` + fmt.Sprintf("%v", this.ExtraArgs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeControllerManagerOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeControllerManagerOpts{`,
		`ExtraArgs:` + fmt.Sprintf("%v", this.ExtraArgs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeProxyOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeProxyOpts{`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeSchedulerOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeSchedulerOpts{`,
		`ExtraArgs:` + fmt.Sprintf("%v", this.ExtraArgs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeVirtOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeVirtOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeletOpts{`,
		`CloudCfg:` + fmt.Sprintf("%v", this.CloudCfg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadBalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadBalancer{`,
		`MetalLB:` + strings.Replace(strings.Replace(this.MetalLB.String(), "MetalLBOpts", "MetalLBOpts", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalCloudProviderSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalCloudProviderSpec{`,
		`}`,
	}, "")
	return s
}
func (this *LuigiOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LuigiOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetalLBOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetalLBOpts{`,
		`CIDR:` + fmt.Sprintf("%v", this.CIDR) + `,`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeletStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeletStatus{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Override) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForParams := "[]Params{"
	for _, f := range this.Params {
		repeatedStringForParams += strings.Replace(strings.Replace(f.String(), "Params", "Params", 1), `&`, ``, 1) + ","
	}
	repeatedStringForParams += "}"
	s := strings.Join([]string{`&Override{`,
		`Params:` + repeatedStringForParams + `,`,
		`}`,
	}, "")
	return s
}
func (this *PF9) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PF9{`,
		`Masterless:` + fmt.Sprintf("%v", this.Masterless) + `,`,
		`BouncerSlowReqWebhook:` + fmt.Sprintf("%v", this.BouncerSlowReqWebhook) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Params) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Params{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProfileAgentOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfileAgentOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Region) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Region{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageBackend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageBackend{`,
		`Etcd:` + strings.Replace(strings.Replace(this.Etcd.String(), "EtcdOpts", "EtcdOpts", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AKSAgentPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AKSAgentPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AKSAgentPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VMSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VMSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OSDiskSizeGB", wireType)
			}
			m.OSDiskSizeGB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OSDiskSizeGB |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OSDiskType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OSDiskType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPods", wireType)
			}
			m.MaxPods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPods |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityZone = append(m.AvailabilityZone, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisioningState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvisioningState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OSType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeImageVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeImageVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnetSubnetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VnetSubnetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AKSCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AKSCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AKSCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisioningState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvisioningState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableRBAC", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableRBAC = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAgentPools", wireType)
			}
			m.MaxAgentPools = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAgentPools |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Network == nil {
				m.Network = &AKSNetwork{}
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentPools = append(m.AgentPools, AKSAgentPool{})
			if err := m.AgentPools[len(m.AgentPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, AKSInstance{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePrincipalClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicePrincipalClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePrivateCluster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.EnablePrivateCluster = &b
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNSPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DNSPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FQDN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FQDN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AKSInstance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AKSInstance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AKSInstance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VMID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VMID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SKU", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SKU == nil {
				m.SKU = &AKSInstanceSKU{}
			}
			if err := m.SKU.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualMachineScaleSetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualMachineScaleSetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInterfaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkInterfaces = append(m.NetworkInterfaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OSProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OSProfile == nil {
				m.OSProfile = &AKSInstanceOSProfile{}
			}
			if err := m.OSProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AKSInstanceLinuxConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AKSInstanceLinuxConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AKSInstanceLinuxConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSHKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SSHKeys = append(m.SSHKeys, AKSLinuxInstanceSSHKey{})
			if err := m.SSHKeys[len(m.SSHKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePasswordAuthentication", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisablePasswordAuthentication = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionVMAgent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProvisionVMAgent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AKSInstanceOSProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AKSInstanceOSProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AKSInstanceOSProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComputerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinuxConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LinuxConfiguration == nil {
				m.LinuxConfiguration = &AKSInstanceLinuxConfiguration{}
			}
			if err := m.LinuxConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowsConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WindowsConfiguration == nil {
				m.WindowsConfiguration = &AKSInstanceWindowsConfiguration{}
			}
			if err := m.WindowsConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AKSInstanceSKU) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AKSInstanceSKU: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AKSInstanceSKU: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AKSInstanceWindowsConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AKSInstanceWindowsConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AKSInstanceWindowsConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinRMListeners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinRMListeners = append(m.WinRMListeners, AKSWindowsInstanceWinRMListener{})
			if err := m.WinRMListeners[len(m.WinRMListeners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableAutomaticUpdates", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableAutomaticUpdates = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionVMAgent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProvisionVMAgent = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AKSLinuxInstanceSSHKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AKSLinuxInstanceSSHKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AKSLinuxInstanceSSHKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AKSLoadBalancerProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AKSLoadBalancerProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AKSLoadBalancerProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedOutboundPorts", wireType)
			}
			m.AllocatedOutboundPorts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocatedOutboundPorts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagedOutboundIPs", wireType)
			}
			m.ManagedOutboundIPs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManagedOutboundIPs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveOutboundIPs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveOutboundIPs = append(m.EffectiveOutboundIPs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundIPs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundIPs = append(m.OutboundIPs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundIPPrefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundIPPrefixes = append(m.OutboundIPPrefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AKSNetwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AKSNetwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AKSNetwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plugin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNSServiceIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DNSServiceIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerSKU", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadBalancerSKU = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadBalancerProfile == nil {
				m.LoadBalancerProfile = &AKSLoadBalancerProfile{}
			}
			if err := m.LoadBalancerProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AKSWindowsInstanceWinRMListener) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AKSWindowsInstanceWinRMListener: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AKSWindowsInstanceWinRMListener: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsePF9Domain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsePF9Domain = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSCloudProviderCredentials) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSCloudProviderCredentials: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSCloudProviderCredentials: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessKeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessKeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretAccessKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretAccessKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSCloudProviderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSCloudProviderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSCloudProviderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSHKeyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SSHKeyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AZs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AZs = append(m.AZs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AMI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AMI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterFlavor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterFlavor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerFlavor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerFlavor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSScalingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSScalingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSScalingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSize", wireType)
			}
			m.MinSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredSize", wireType)
			}
			m.DesiredSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DesiredSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSVPC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSVPC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSVPC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VPCID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VPCID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroup = append(m.SecurityGroup, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PublicAccess = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateAccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrivateAccess = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterSecurityGroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterSecurityGroupID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnets = append(m.Subnets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddonsOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddonsOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddonsOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppCatalog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppCatalog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CAS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Luigi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Luigi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubevirt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Kubevirt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUManager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CPUManager.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileAgent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProfileAgent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppCatalogOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppCatalogOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppCatalogOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Auth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keystone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Keystone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureCloudProviderCredentials) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureCloudProviderCredentials: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureCloudProviderCredentials: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureCloudProviderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureCloudProviderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureCloudProviderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CNIOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNIOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNIOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bridge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bridge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTUSize", wireType)
			}
			m.MTUSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTUSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IPv6 = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPlugin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkPlugin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calico", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Calico.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Flannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPUManagerOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPUManagerOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPUManagerOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUManagerPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPUManagerPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopologyManagerPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopologyManagerPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedCPUs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedCPUs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalicoOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalicoOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalicoOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPIPMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPIPMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4BlkSize", wireType)
			}
			m.IPv4BlkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IPv4BlkSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatOutgoing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NatOutgoing = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4DetectionMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4DetectionMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6BlkSize", wireType)
			}
			m.IPv6BlkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IPv6BlkSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6PoolCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6PoolCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6PoolNAT", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IPv6PoolNAT = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6DetectionMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6DetectionMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FelixIPv6Support", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FelixIPv6Support = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudProviderList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudProviderList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudProviderList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, CloudProvider{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudProviderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudProviderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudProviderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AWS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AWS == nil {
				m.AWS = &AWSCloudProviderSpec{}
			}
			if err := m.AWS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Azure == nil {
				m.Azure = &AzureCloudProviderSpec{}
			}
			if err := m.Azure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Local", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Local == nil {
				m.Local = &LocalCloudProviderSpec{}
			}
			if err := m.Local.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudProviderStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudProviderStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudProviderStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = CloudProviderPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = CloudProviderType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regions = append(m.Regions, Region{})
			if err := m.Regions[len(m.Regions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastChecked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastChecked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterAddon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterAddon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterAddon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterAddonList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterAddonList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterAddonList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, ClusterAddon{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterAddonSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterAddonSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterAddonSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Override", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Override.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Watch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterAddonStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterAddonStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterAddonStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = AddonPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Healthy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Healthy = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastChecked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastChecked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterAutoScalerOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterAutoScalerOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterAutoScalerOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinWorkers", wireType)
			}
			m.MinWorkers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinWorkers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWorkers", wireType)
			}
			m.MaxWorkers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxWorkers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, Cluster{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterNetwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterNetwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterNetwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicesCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicesCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodsCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodsCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterProfileBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterProfileBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterProfileBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterProfileBindingDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterProfileBindingDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterProfileBindingDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Analysis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Analysis = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterProfileBindingList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterProfileBindingList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterProfileBindingList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, ClusterProfileBinding{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterProfileBindingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterProfileBindingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterProfileBindingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterRef = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileRef = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DryRun", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DryRun = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReapInterval", wireType)
			}
			m.ReapInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReapInterval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterProfileBindingStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterProfileBindingStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterProfileBindingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = ClusterProfileBindingPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryCount", wireType)
			}
			m.RetryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterProfileDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterProfileDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterProfileDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterProfileList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterProfileList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterProfileList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, ClusterProfile{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterProfileSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterProfileSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterProfileSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloneFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloneFrom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceScopedResources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceScopedResources = append(m.NamespaceScopedResources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterScopedResources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterScopedResources = append(m.ClusterScopedResources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReapInterval", wireType)
			}
			m.ReapInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReapInterval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterProfileStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterProfileStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterProfileStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = ClusterProfilePhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryCount", wireType)
			}
			m.RetryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Debug = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudProviderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudProviderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterNetwork.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KubeProxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubelet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Kubelet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerRuntime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContainerRuntime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LoadBalancer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageBackend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StorageBackend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheduler", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Scheduler.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerManager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ControllerManager.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apiserver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Apiserver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CNI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Addons.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowWorkloadsOnMasters", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowWorkloadsOnMasters = bool(v != 0)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PF9", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PF9.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlPlaneEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ControlPlaneEndpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AWS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AWS == nil {
				m.AWS = &AWSCluster{}
			}
			if err := m.AWS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field External", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.External = bool(v != 0)
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EKS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EKS == nil {
				m.EKS = &EKSCluster{}
			}
			if err := m.EKS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerPrivateRegistry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerPrivateRegistry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuayPrivateRegistry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuayPrivateRegistry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCRPrivateRegistry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GCRPrivateRegistry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SPrivateRegistry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K8SPrivateRegistry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseHostname", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseHostname = bool(v != 0)
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AKS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AKS == nil {
				m.AKS = &AKSCluster{}
			}
			if err := m.AKS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GKE", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GKE == nil {
				m.GKE = &GKECluster{}
			}
			if err := m.GKE.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = ClusterPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masters", wireType)
			}
			m.Masters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Masters |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
			}
			m.Workers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Workers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlPlaneEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlPlaneEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = CloudProviderType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Condition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Condition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Condition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = ConditionType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Severity = ConditionSeverity(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerRuntime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRuntime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRuntime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Docker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveRestore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LiveRestore = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerhubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerhubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerhubPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerhubPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryMirrors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryMirrors = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerCentosPackageRepoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerCentosPackageRepoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerUbuntuPackageRepoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerUbuntuPackageRepoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EC2Instance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EC2Instance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EC2Instance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Network == nil {
				m.Network = &EC2InstanceNetwork{}
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EC2InstanceNetwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EC2InstanceNetwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EC2InstanceNetwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateDNSName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateDNSName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicDNSName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicDNSName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VPCID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VPCID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EKSCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EKSCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EKSCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EKSVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EKSVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IAMRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IAMRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Network == nil {
				m.Network = &EKSNetwork{}
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logging", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logging == nil {
				m.Logging = &EKSLogging{}
			}
			if err := m.Logging.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeGroups = append(m.NodeGroups, EKSNodeGroup{})
			if err := m.NodeGroups[len(m.NodeGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EKSClusterLogging) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EKSClusterLogging: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EKSClusterLogging: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EKSLogging) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EKSLogging: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EKSLogging: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EKSClusterLogging", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EKSClusterLogging = append(m.EKSClusterLogging, EKSClusterLogging{})
			if err := m.EKSClusterLogging[len(m.EKSClusterLogging)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EKSNetwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EKSNetwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EKSNetwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerCIDR = append(m.ContainerCIDR, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicesCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicesCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VPC == nil {
				m.VPC = &AWSVPC{}
			}
			if err := m.VPC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EKSNodeGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EKSNodeGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EKSNodeGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ARN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ARN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapacityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CapacityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceTypes = append(m.InstanceTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnets = append(m.Subnets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AMI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AMI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSHKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SSHKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScalingConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScalingConfig == nil {
				m.ScalingConfig = &AWSScalingConfig{}
			}
			if err := m.ScalingConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSizeInGB", wireType)
			}
			m.DiskSizeInGB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSizeInGB |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IAMRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IAMRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, EC2Instance{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EtcdOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EtcdOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EtcdOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoveryURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionTimeout", wireType)
			}
			m.ElectionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElectionTimeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatIntervalMs", wireType)
			}
			m.HeartbeatIntervalMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatIntervalMs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlannelOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlannelOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlannelOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicInterfaceLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicInterfaceLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GKECluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GKECluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GKECluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterCACertificate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterCACertificate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialClusterVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialClusterVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleaseChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseEncryption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseEncryption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Network == nil {
				m.Network = &GKEClusterNetwork{}
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePools = append(m.NodePools, GKENodePool{})
			if err := m.NodePools[len(m.NodePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateCluster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PrivateCluster = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GKEClusterNetwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GKEClusterNetwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GKEClusterNetwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseIpAliases", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseIpAliases = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnetwork", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnetwork = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodIpv4CIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodIpv4CIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicesIpv4CIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicesIpv4CIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPolicyConfig", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NetworkPolicyConfig = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GKEInstance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GKEInstance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GKEInstance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceTemplate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceTemplate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GKENodePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GKENodePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GKENodePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSizeGb", wireType)
			}
			m.DiskSizeGb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSizeGb |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiskType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeCount", wireType)
			}
			m.NodeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPodsPerNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPodsPerNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8sVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K8sVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, GKEInstance{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keepalived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Keepalived.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Host) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Host: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Host: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, Host{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostPhase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostPhase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostPhase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeServiceState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeServiceState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Debug = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostState = HostState(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceState = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodelet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nodelet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phases = append(m.Phases, HostPhase{})
			if err := m.Phases[len(m.Phases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhaseCompleted", wireType)
			}
			m.PhaseCompleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhaseCompleted |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailedPhase", wireType)
			}
			m.LastFailedPhase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastFailedPhase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAttempts", wireType)
			}
			m.StartAttempts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAttempts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPhase", wireType)
			}
			m.CurrentPhase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPhase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllStatusChecks = append(m.AllStatusChecks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenerated
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenerated
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AllStatusChecks) == 0 {
					m.AllStatusChecks = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllStatusChecks = append(m.AllStatusChecks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllStatusChecks", wireType)
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailedCheck", wireType)
			}
			m.LastFailedCheck = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastFailedCheck |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailedCheckTime", wireType)
			}
			m.LastFailedCheckTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastFailedCheckTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeepalivedOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeepalivedOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeepalivedOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterVIPInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterVIPInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterVIPPriority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterVIPPriority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterVIPRouterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterVIPRouterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeystoneOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeystoneOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeystoneOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectDomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectDomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserDomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeApiserverOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeApiserverOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeApiserverOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageBackend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageBackend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Privileged = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authz", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Authz = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeControllerManagerOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeControllerManagerOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeControllerManagerOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeProxyOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeProxyOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeProxyOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeSchedulerOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeSchedulerOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeSchedulerOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeVirtOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeVirtOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeVirtOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCfg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudCfg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadBalancer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadBalancer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadBalancer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetalLB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MetalLB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalCloudProviderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalCloudProviderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalCloudProviderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LuigiOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LuigiOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LuigiOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetalLBOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetalLBOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetalLBOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeletStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeletStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeletStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Override) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Override: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Override: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, Params{})
			if err := m.Params[len(m.Params)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PF9) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PF9: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PF9: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masterless", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masterless = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BouncerSlowReqWebhook", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BouncerSlowReqWebhook = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileAgentOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileAgentOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileAgentOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Region) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Region: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Region: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageBackend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageBackend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageBackend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etcd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Etcd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
