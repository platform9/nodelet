/*
Copyright (C) 2015-2020 Platform9 Systems, Inc.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/platform9/pf9-qbert/sunpike/apiserver/pkg/apis/sunpike/v1alpha1/generated.proto

package v1alpha1

import (
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *AWSOpts) Reset()      { *m = AWSOpts{} }
func (*AWSOpts) ProtoMessage() {}
func (*AWSOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{0}
}
func (m *AWSOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSOpts.Merge(m, src)
}
func (m *AWSOpts) XXX_Size() int {
	return m.Size()
}
func (m *AWSOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSOpts.DiscardUnknown(m)
}

var xxx_messageInfo_AWSOpts proto.InternalMessageInfo

func (m *AddonOperatorOpts) Reset()      { *m = AddonOperatorOpts{} }
func (*AddonOperatorOpts) ProtoMessage() {}
func (*AddonOperatorOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{1}
}
func (m *AddonOperatorOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddonOperatorOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AddonOperatorOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddonOperatorOpts.Merge(m, src)
}
func (m *AddonOperatorOpts) XXX_Size() int {
	return m.Size()
}
func (m *AddonOperatorOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_AddonOperatorOpts.DiscardUnknown(m)
}

var xxx_messageInfo_AddonOperatorOpts proto.InternalMessageInfo

func (m *AddonsOpts) Reset()      { *m = AddonsOpts{} }
func (*AddonsOpts) ProtoMessage() {}
func (*AddonsOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{2}
}
func (m *AddonsOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddonsOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AddonsOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddonsOpts.Merge(m, src)
}
func (m *AddonsOpts) XXX_Size() int {
	return m.Size()
}
func (m *AddonsOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_AddonsOpts.DiscardUnknown(m)
}

var xxx_messageInfo_AddonsOpts proto.InternalMessageInfo

func (m *AppCatalogOpts) Reset()      { *m = AppCatalogOpts{} }
func (*AppCatalogOpts) ProtoMessage() {}
func (*AppCatalogOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{3}
}
func (m *AppCatalogOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppCatalogOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppCatalogOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppCatalogOpts.Merge(m, src)
}
func (m *AppCatalogOpts) XXX_Size() int {
	return m.Size()
}
func (m *AppCatalogOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_AppCatalogOpts.DiscardUnknown(m)
}

var xxx_messageInfo_AppCatalogOpts proto.InternalMessageInfo

func (m *CNIOpts) Reset()      { *m = CNIOpts{} }
func (*CNIOpts) ProtoMessage() {}
func (*CNIOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{4}
}
func (m *CNIOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CNIOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CNIOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNIOpts.Merge(m, src)
}
func (m *CNIOpts) XXX_Size() int {
	return m.Size()
}
func (m *CNIOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CNIOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CNIOpts proto.InternalMessageInfo

func (m *CPUManagerOpts) Reset()      { *m = CPUManagerOpts{} }
func (*CPUManagerOpts) ProtoMessage() {}
func (*CPUManagerOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{5}
}
func (m *CPUManagerOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPUManagerOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CPUManagerOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPUManagerOpts.Merge(m, src)
}
func (m *CPUManagerOpts) XXX_Size() int {
	return m.Size()
}
func (m *CPUManagerOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CPUManagerOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CPUManagerOpts proto.InternalMessageInfo

func (m *CalicoOpts) Reset()      { *m = CalicoOpts{} }
func (*CalicoOpts) ProtoMessage() {}
func (*CalicoOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{6}
}
func (m *CalicoOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalicoOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CalicoOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalicoOpts.Merge(m, src)
}
func (m *CalicoOpts) XXX_Size() int {
	return m.Size()
}
func (m *CalicoOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CalicoOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CalicoOpts proto.InternalMessageInfo

func (m *CatapultMonitoringOpts) Reset()      { *m = CatapultMonitoringOpts{} }
func (*CatapultMonitoringOpts) ProtoMessage() {}
func (*CatapultMonitoringOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{7}
}
func (m *CatapultMonitoringOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CatapultMonitoringOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CatapultMonitoringOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatapultMonitoringOpts.Merge(m, src)
}
func (m *CatapultMonitoringOpts) XXX_Size() int {
	return m.Size()
}
func (m *CatapultMonitoringOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CatapultMonitoringOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CatapultMonitoringOpts proto.InternalMessageInfo

func (m *ClusterAutoScalerOpts) Reset()      { *m = ClusterAutoScalerOpts{} }
func (*ClusterAutoScalerOpts) ProtoMessage() {}
func (*ClusterAutoScalerOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{8}
}
func (m *ClusterAutoScalerOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterAutoScalerOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterAutoScalerOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterAutoScalerOpts.Merge(m, src)
}
func (m *ClusterAutoScalerOpts) XXX_Size() int {
	return m.Size()
}
func (m *ClusterAutoScalerOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterAutoScalerOpts.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterAutoScalerOpts proto.InternalMessageInfo

func (m *DockerOpts) Reset()      { *m = DockerOpts{} }
func (*DockerOpts) ProtoMessage() {}
func (*DockerOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{9}
}
func (m *DockerOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DockerOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DockerOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerOpts.Merge(m, src)
}
func (m *DockerOpts) XXX_Size() int {
	return m.Size()
}
func (m *DockerOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerOpts.DiscardUnknown(m)
}

var xxx_messageInfo_DockerOpts proto.InternalMessageInfo

func (m *EtcdOpts) Reset()      { *m = EtcdOpts{} }
func (*EtcdOpts) ProtoMessage() {}
func (*EtcdOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{10}
}
func (m *EtcdOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EtcdOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EtcdOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EtcdOpts.Merge(m, src)
}
func (m *EtcdOpts) XXX_Size() int {
	return m.Size()
}
func (m *EtcdOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_EtcdOpts.DiscardUnknown(m)
}

var xxx_messageInfo_EtcdOpts proto.InternalMessageInfo

func (m *FlannelOpts) Reset()      { *m = FlannelOpts{} }
func (*FlannelOpts) ProtoMessage() {}
func (*FlannelOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{11}
}
func (m *FlannelOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlannelOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FlannelOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlannelOpts.Merge(m, src)
}
func (m *FlannelOpts) XXX_Size() int {
	return m.Size()
}
func (m *FlannelOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_FlannelOpts.DiscardUnknown(m)
}

var xxx_messageInfo_FlannelOpts proto.InternalMessageInfo

func (m *Host) Reset()      { *m = Host{} }
func (*Host) ProtoMessage() {}
func (*Host) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{12}
}
func (m *Host) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Host) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Host) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host.Merge(m, src)
}
func (m *Host) XXX_Size() int {
	return m.Size()
}
func (m *Host) XXX_DiscardUnknown() {
	xxx_messageInfo_Host.DiscardUnknown(m)
}

var xxx_messageInfo_Host proto.InternalMessageInfo

func (m *HostList) Reset()      { *m = HostList{} }
func (*HostList) ProtoMessage() {}
func (*HostList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{13}
}
func (m *HostList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HostList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostList.Merge(m, src)
}
func (m *HostList) XXX_Size() int {
	return m.Size()
}
func (m *HostList) XXX_DiscardUnknown() {
	xxx_messageInfo_HostList.DiscardUnknown(m)
}

var xxx_messageInfo_HostList proto.InternalMessageInfo

func (m *HostPhase) Reset()      { *m = HostPhase{} }
func (*HostPhase) ProtoMessage() {}
func (*HostPhase) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{14}
}
func (m *HostPhase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostPhase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HostPhase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostPhase.Merge(m, src)
}
func (m *HostPhase) XXX_Size() int {
	return m.Size()
}
func (m *HostPhase) XXX_DiscardUnknown() {
	xxx_messageInfo_HostPhase.DiscardUnknown(m)
}

var xxx_messageInfo_HostPhase proto.InternalMessageInfo

func (m *HostSpec) Reset()      { *m = HostSpec{} }
func (*HostSpec) ProtoMessage() {}
func (*HostSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{15}
}
func (m *HostSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HostSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostSpec.Merge(m, src)
}
func (m *HostSpec) XXX_Size() int {
	return m.Size()
}
func (m *HostSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_HostSpec.DiscardUnknown(m)
}

var xxx_messageInfo_HostSpec proto.InternalMessageInfo

func (m *HostStatus) Reset()      { *m = HostStatus{} }
func (*HostStatus) ProtoMessage() {}
func (*HostStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{16}
}
func (m *HostStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HostStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostStatus.Merge(m, src)
}
func (m *HostStatus) XXX_Size() int {
	return m.Size()
}
func (m *HostStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_HostStatus.DiscardUnknown(m)
}

var xxx_messageInfo_HostStatus proto.InternalMessageInfo

func (m *KeepalivedOpts) Reset()      { *m = KeepalivedOpts{} }
func (*KeepalivedOpts) ProtoMessage() {}
func (*KeepalivedOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{17}
}
func (m *KeepalivedOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeepalivedOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KeepalivedOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepalivedOpts.Merge(m, src)
}
func (m *KeepalivedOpts) XXX_Size() int {
	return m.Size()
}
func (m *KeepalivedOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepalivedOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KeepalivedOpts proto.InternalMessageInfo

func (m *KeystoneOpts) Reset()      { *m = KeystoneOpts{} }
func (*KeystoneOpts) ProtoMessage() {}
func (*KeystoneOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{18}
}
func (m *KeystoneOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeystoneOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KeystoneOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeystoneOpts.Merge(m, src)
}
func (m *KeystoneOpts) XXX_Size() int {
	return m.Size()
}
func (m *KeystoneOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KeystoneOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KeystoneOpts proto.InternalMessageInfo

func (m *KubeApiserverOpts) Reset()      { *m = KubeApiserverOpts{} }
func (*KubeApiserverOpts) ProtoMessage() {}
func (*KubeApiserverOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{19}
}
func (m *KubeApiserverOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeApiserverOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeApiserverOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeApiserverOpts.Merge(m, src)
}
func (m *KubeApiserverOpts) XXX_Size() int {
	return m.Size()
}
func (m *KubeApiserverOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeApiserverOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KubeApiserverOpts proto.InternalMessageInfo

func (m *KubeClusterOpts) Reset()      { *m = KubeClusterOpts{} }
func (*KubeClusterOpts) ProtoMessage() {}
func (*KubeClusterOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{20}
}
func (m *KubeClusterOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeClusterOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeClusterOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeClusterOpts.Merge(m, src)
}
func (m *KubeClusterOpts) XXX_Size() int {
	return m.Size()
}
func (m *KubeClusterOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeClusterOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KubeClusterOpts proto.InternalMessageInfo

func (m *KubeControllerManagerOpts) Reset()      { *m = KubeControllerManagerOpts{} }
func (*KubeControllerManagerOpts) ProtoMessage() {}
func (*KubeControllerManagerOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{21}
}
func (m *KubeControllerManagerOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeControllerManagerOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeControllerManagerOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeControllerManagerOpts.Merge(m, src)
}
func (m *KubeControllerManagerOpts) XXX_Size() int {
	return m.Size()
}
func (m *KubeControllerManagerOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeControllerManagerOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KubeControllerManagerOpts proto.InternalMessageInfo

func (m *KubeProxyOpts) Reset()      { *m = KubeProxyOpts{} }
func (*KubeProxyOpts) ProtoMessage() {}
func (*KubeProxyOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{22}
}
func (m *KubeProxyOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeProxyOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeProxyOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeProxyOpts.Merge(m, src)
}
func (m *KubeProxyOpts) XXX_Size() int {
	return m.Size()
}
func (m *KubeProxyOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeProxyOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KubeProxyOpts proto.InternalMessageInfo

func (m *KubeSchedulerOpts) Reset()      { *m = KubeSchedulerOpts{} }
func (*KubeSchedulerOpts) ProtoMessage() {}
func (*KubeSchedulerOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{23}
}
func (m *KubeSchedulerOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeSchedulerOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeSchedulerOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeSchedulerOpts.Merge(m, src)
}
func (m *KubeSchedulerOpts) XXX_Size() int {
	return m.Size()
}
func (m *KubeSchedulerOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeSchedulerOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KubeSchedulerOpts proto.InternalMessageInfo

func (m *KubeVirtOpts) Reset()      { *m = KubeVirtOpts{} }
func (*KubeVirtOpts) ProtoMessage() {}
func (*KubeVirtOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{24}
}
func (m *KubeVirtOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeVirtOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeVirtOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeVirtOpts.Merge(m, src)
}
func (m *KubeVirtOpts) XXX_Size() int {
	return m.Size()
}
func (m *KubeVirtOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeVirtOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KubeVirtOpts proto.InternalMessageInfo

func (m *KubeletOpts) Reset()      { *m = KubeletOpts{} }
func (*KubeletOpts) ProtoMessage() {}
func (*KubeletOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{25}
}
func (m *KubeletOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeletOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeletOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeletOpts.Merge(m, src)
}
func (m *KubeletOpts) XXX_Size() int {
	return m.Size()
}
func (m *KubeletOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeletOpts.DiscardUnknown(m)
}

var xxx_messageInfo_KubeletOpts proto.InternalMessageInfo

func (m *LuigiOpts) Reset()      { *m = LuigiOpts{} }
func (*LuigiOpts) ProtoMessage() {}
func (*LuigiOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{26}
}
func (m *LuigiOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LuigiOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LuigiOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LuigiOpts.Merge(m, src)
}
func (m *LuigiOpts) XXX_Size() int {
	return m.Size()
}
func (m *LuigiOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_LuigiOpts.DiscardUnknown(m)
}

var xxx_messageInfo_LuigiOpts proto.InternalMessageInfo

func (m *MetalLBOpts) Reset()      { *m = MetalLBOpts{} }
func (*MetalLBOpts) ProtoMessage() {}
func (*MetalLBOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{27}
}
func (m *MetalLBOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetalLBOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MetalLBOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetalLBOpts.Merge(m, src)
}
func (m *MetalLBOpts) XXX_Size() int {
	return m.Size()
}
func (m *MetalLBOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_MetalLBOpts.DiscardUnknown(m)
}

var xxx_messageInfo_MetalLBOpts proto.InternalMessageInfo

func (m *NetworkInterface) Reset()      { *m = NetworkInterface{} }
func (*NetworkInterface) ProtoMessage() {}
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{28}
}
func (m *NetworkInterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NetworkInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInterface.Merge(m, src)
}
func (m *NetworkInterface) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInterface.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInterface proto.InternalMessageInfo

func (m *NodeletStatus) Reset()      { *m = NodeletStatus{} }
func (*NodeletStatus) ProtoMessage() {}
func (*NodeletStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{29}
}
func (m *NodeletStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeletStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeletStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeletStatus.Merge(m, src)
}
func (m *NodeletStatus) XXX_Size() int {
	return m.Size()
}
func (m *NodeletStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeletStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NodeletStatus proto.InternalMessageInfo

func (m *PF9Opts) Reset()      { *m = PF9Opts{} }
func (*PF9Opts) ProtoMessage() {}
func (*PF9Opts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{30}
}
func (m *PF9Opts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PF9Opts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PF9Opts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PF9Opts.Merge(m, src)
}
func (m *PF9Opts) XXX_Size() int {
	return m.Size()
}
func (m *PF9Opts) XXX_DiscardUnknown() {
	xxx_messageInfo_PF9Opts.DiscardUnknown(m)
}

var xxx_messageInfo_PF9Opts proto.InternalMessageInfo

func (m *ProfileAgentOpts) Reset()      { *m = ProfileAgentOpts{} }
func (*ProfileAgentOpts) ProtoMessage() {}
func (*ProfileAgentOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d748088f0d833d7e, []int{31}
}
func (m *ProfileAgentOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileAgentOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProfileAgentOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileAgentOpts.Merge(m, src)
}
func (m *ProfileAgentOpts) XXX_Size() int {
	return m.Size()
}
func (m *ProfileAgentOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileAgentOpts.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileAgentOpts proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AWSOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.AWSOpts")
	proto.RegisterType((*AddonOperatorOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.AddonOperatorOpts")
	proto.RegisterType((*AddonsOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.AddonsOpts")
	proto.RegisterType((*AppCatalogOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.AppCatalogOpts")
	proto.RegisterType((*CNIOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.CNIOpts")
	proto.RegisterType((*CPUManagerOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.CPUManagerOpts")
	proto.RegisterType((*CalicoOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.CalicoOpts")
	proto.RegisterType((*CatapultMonitoringOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.CatapultMonitoringOpts")
	proto.RegisterType((*ClusterAutoScalerOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.ClusterAutoScalerOpts")
	proto.RegisterType((*DockerOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.DockerOpts")
	proto.RegisterType((*EtcdOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.EtcdOpts")
	proto.RegisterType((*FlannelOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.FlannelOpts")
	proto.RegisterType((*Host)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.Host")
	proto.RegisterType((*HostList)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.HostList")
	proto.RegisterType((*HostPhase)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.HostPhase")
	proto.RegisterType((*HostSpec)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.HostSpec")
	proto.RegisterMapType((map[string]string)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.HostSpec.ExtraCfgEntry")
	proto.RegisterType((*HostStatus)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.HostStatus")
	proto.RegisterType((*KeepalivedOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.KeepalivedOpts")
	proto.RegisterType((*KeystoneOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.KeystoneOpts")
	proto.RegisterType((*KubeApiserverOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.KubeApiserverOpts")
	proto.RegisterType((*KubeClusterOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.KubeClusterOpts")
	proto.RegisterType((*KubeControllerManagerOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.KubeControllerManagerOpts")
	proto.RegisterType((*KubeProxyOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.KubeProxyOpts")
	proto.RegisterType((*KubeSchedulerOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.KubeSchedulerOpts")
	proto.RegisterType((*KubeVirtOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.KubeVirtOpts")
	proto.RegisterType((*KubeletOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.KubeletOpts")
	proto.RegisterMapType((map[string]string)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.KubeletOpts.NodeLabelsEntry")
	proto.RegisterMapType((map[string]string)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.KubeletOpts.NodeTaintsEntry")
	proto.RegisterType((*LuigiOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.LuigiOpts")
	proto.RegisterType((*MetalLBOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.MetalLBOpts")
	proto.RegisterType((*NetworkInterface)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.NetworkInterface")
	proto.RegisterType((*NodeletStatus)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.NodeletStatus")
	proto.RegisterType((*PF9Opts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.PF9Opts")
	proto.RegisterType((*ProfileAgentOpts)(nil), "github.com.platform9.pf9_qbert.sunpike.apiserver.pkg.apis.sunpike.v1alpha1.ProfileAgentOpts")
}

func init() {
	proto.RegisterFile("github.com/platform9/pf9-qbert/sunpike/apiserver/pkg/apis/sunpike/v1alpha1/generated.proto", fileDescriptor_d748088f0d833d7e)
}

var fileDescriptor_d748088f0d833d7e = []byte{
	// 3662 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0x4d, 0x8c, 0x23, 0x49,
	0x56, 0x6e, 0x97, 0xab, 0xda, 0x76, 0xd4, 0x4f, 0x57, 0x65, 0xff, 0xac, 0xa7, 0x60, 0x6b, 0x5b,
	0x46, 0x8c, 0x1a, 0xb4, 0xeb, 0x62, 0x5a, 0x43, 0xa9, 0x7b, 0x9b, 0x41, 0xf2, 0x4f, 0xf5, 0x8c,
	0xa7, 0xca, 0xd5, 0xe6, 0xb9, 0xaa, 0x1b, 0x66, 0x67, 0x05, 0xe1, 0xcc, 0x28, 0x57, 0xae, 0xd3,
	0x19, 0x39, 0x91, 0x91, 0xee, 0xae, 0x96, 0x40, 0x08, 0x21, 0x0e, 0x1c, 0x86, 0x3d, 0x21, 0x01,
	0x07, 0xc4, 0x95, 0x03, 0x17, 0x0e, 0x5c, 0x00, 0x89, 0xdb, 0x48, 0x5c, 0x46, 0x9c, 0x56, 0x1c,
	0x56, 0x4c, 0xc3, 0x5e, 0x38, 0x73, 0x81, 0x13, 0x8a, 0xc8, 0xc8, 0xc8, 0x88, 0xb4, 0x7b, 0xbb,
	0x4b, 0x72, 0xdf, 0xec, 0xf7, 0xbe, 0xf7, 0x13, 0x7f, 0x2f, 0xde, 0x7b, 0x19, 0xe8, 0xb3, 0xb1,
	0xcf, 0x2f, 0x92, 0x51, 0xd3, 0xa5, 0xd3, 0xfd, 0x28, 0xc0, 0xfc, 0x9c, 0xb2, 0xe9, 0xc3, 0xfd,
	0xe8, 0xfc, 0xe1, 0xf7, 0xbe, 0x18, 0x11, 0xc6, 0xf7, 0xe3, 0x24, 0x8c, 0xfc, 0x09, 0xd9, 0xc7,
	0x91, 0x1f, 0x13, 0x36, 0x23, 0x6c, 0x3f, 0x9a, 0x8c, 0xe5, 0x3f, 0xcd, 0x9a, 0x7d, 0x80, 0x83,
	0xe8, 0x02, 0x7f, 0xb0, 0x3f, 0x26, 0x21, 0x61, 0x98, 0x13, 0xaf, 0x19, 0x31, 0xca, 0xa9, 0xf3,
	0x69, 0xae, 0xbb, 0xa9, 0x75, 0x37, 0xa3, 0xf3, 0x87, 0xbf, 0x2b, 0x75, 0x37, 0x95, 0x82, 0xa6,
	0xd6, 0xdd, 0x8c, 0x26, 0x63, 0xf9, 0x4f, 0xb3, 0x32, 0xdd, 0xbb, 0xdf, 0x33, 0xfc, 0x1c, 0xd3,
	0x31, 0xdd, 0x97, 0x26, 0x46, 0xc9, 0xb9, 0xfc, 0x27, 0xff, 0xc8, 0x5f, 0xa9, 0xe9, 0xdd, 0x0f,
	0x27, 0x0f, 0xe2, 0xa6, 0x4f, 0x85, 0xa3, 0x53, 0xec, 0x5e, 0xf8, 0x21, 0x61, 0x97, 0xb9, 0xe7,
	0x53, 0xc2, 0xf1, 0xfe, 0x6c, 0xce, 0xe1, 0xdd, 0xfd, 0xd7, 0x49, 0xb1, 0x24, 0xe4, 0xfe, 0x94,
	0xcc, 0x09, 0x1c, 0xbc, 0x49, 0x20, 0x76, 0x2f, 0xc8, 0x14, 0x17, 0xe5, 0x1a, 0x1d, 0x54, 0x69,
	0x3d, 0x1b, 0x3e, 0x89, 0x78, 0xec, 0x3c, 0x40, 0x1b, 0xe4, 0x05, 0x27, 0x2c, 0xc4, 0xc1, 0xf0,
	0xa4, 0x75, 0x5a, 0x2f, 0xdd, 0x2d, 0xdd, 0xab, 0xb6, 0x6f, 0x7d, 0xf5, 0xd3, 0xef, 0x5c, 0x7b,
	0xf5, 0xd3, 0xef, 0x6c, 0x1c, 0x1a, 0x3c, 0xb0, 0x90, 0x8d, 0x16, 0xda, 0x69, 0x79, 0x1e, 0x0d,
	0x9f, 0x44, 0x42, 0x37, 0x65, 0x52, 0xdd, 0x77, 0x51, 0xd5, 0x9f, 0xe2, 0x31, 0x39, 0xc5, 0x63,
	0xa9, 0xaa, 0xd6, 0xde, 0x56, 0xaa, 0xaa, 0x3d, 0x45, 0x07, 0x8d, 0x68, 0xfc, 0x57, 0x05, 0x21,
	0xa9, 0x23, 0x96, 0xc2, 0x5f, 0x96, 0x10, 0xc2, 0x51, 0xd4, 0xc1, 0x1c, 0x07, 0x34, 0x95, 0x5f,
	0xbf, 0xff, 0x59, 0x73, 0x79, 0xcb, 0xd8, 0x6c, 0x69, 0xed, 0xc2, 0x60, 0xdb, 0x51, 0xbe, 0xa1,
	0x9c, 0x0e, 0x86, 0x07, 0xce, 0x25, 0x2a, 0x77, 0x5a, 0xc3, 0xfa, 0x8a, 0x74, 0x04, 0x2f, 0xd3,
	0x91, 0x4e, 0x90, 0xc4, 0x9c, 0xb0, 0x56, 0xc2, 0xe9, 0xd0, 0xc5, 0x01, 0x91, 0xb3, 0xd7, 0x5e,
	0x15, 0xfe, 0x80, 0xb0, 0xe9, 0xbc, 0x44, 0x6b, 0x41, 0xe2, 0x8f, 0xfd, 0x7a, 0x59, 0x1a, 0x3f,
	0x5b, 0xa6, 0xf1, 0x63, 0xa1, 0x58, 0x1a, 0xdc, 0x54, 0x13, 0xb0, 0x26, 0x49, 0x90, 0x9a, 0x74,
	0xfe, 0xa4, 0x84, 0xaa, 0x93, 0x64, 0x44, 0x66, 0x3e, 0xe3, 0xf5, 0x55, 0x69, 0xff, 0xb7, 0x97,
	0x69, 0xff, 0x28, 0x19, 0x91, 0xa7, 0x3e, 0xe3, 0xd2, 0x05, 0xbd, 0x3f, 0x8e, 0x94, 0x45, 0xd0,
	0xb6, 0xe5, 0x86, 0x70, 0xa3, 0xa4, 0x8f, 0x43, 0x3c, 0x26, 0xac, 0xbe, 0xb6, 0xfc, 0x0d, 0xd1,
	0x19, 0x9c, 0x29, 0xed, 0xf6, 0x86, 0xc8, 0xe9, 0x60, 0x78, 0xe0, 0xfc, 0x79, 0x09, 0x6d, 0x44,
	0x8c, 0x9e, 0xfb, 0x01, 0x69, 0x8d, 0x49, 0xc8, 0xeb, 0xd7, 0xa5, 0x4b, 0x9f, 0x2f, 0xd3, 0xa5,
	0x81, 0xa1, 0x5f, 0x3a, 0xa5, 0x0f, 0xa3, 0xc9, 0x01, 0xcb, 0x0f, 0xe7, 0x2f, 0x4b, 0x68, 0x13,
	0x9b, 0xa7, 0xb1, 0x5e, 0x91, 0x9e, 0xfd, 0x70, 0xa9, 0xa7, 0xa7, 0x78, 0xdc, 0xdb, 0xb7, 0x95,
	0x6b, 0x9b, 0x16, 0x0b, 0x6c, 0x57, 0x1a, 0x8f, 0xd0, 0x96, 0x7d, 0xf0, 0x9c, 0x5f, 0x41, 0x15,
	0x12, 0xe2, 0x51, 0x40, 0x3c, 0x15, 0x70, 0x6e, 0x28, 0x45, 0x95, 0xc3, 0x94, 0x0c, 0x19, 0xbf,
	0xf1, 0x37, 0xab, 0xa8, 0xd2, 0x39, 0xe9, 0x49, 0xb1, 0xf7, 0xd1, 0xf5, 0x11, 0xf3, 0xbd, 0x31,
	0x51, 0xb1, 0x65, 0x4b, 0x49, 0x5d, 0x6f, 0x4b, 0x2a, 0x28, 0xae, 0xb3, 0x87, 0x2a, 0xfd, 0xd3,
	0xb3, 0xa1, 0xff, 0x92, 0xc8, 0xb3, 0xbb, 0xa6, 0x0e, 0x56, 0x46, 0x74, 0xea, 0x68, 0xb5, 0x37,
	0x98, 0x1d, 0xc8, 0xb3, 0x55, 0x55, 0x4c, 0x49, 0x71, 0x1e, 0xa1, 0xcd, 0x90, 0xf0, 0xe7, 0x94,
	0x4d, 0x06, 0x41, 0x32, 0xf6, 0x43, 0xb9, 0xfd, 0x6b, 0xf9, 0x38, 0x4f, 0x4c, 0x26, 0xd8, 0x58,
	0xe7, 0x0f, 0xd0, 0x75, 0x17, 0x07, 0xbe, 0x4b, 0xd5, 0x4e, 0x7d, 0xba, 0xd4, 0x9d, 0x2a, 0x35,
	0xcb, 0x59, 0xd7, 0xc3, 0x4e, 0x69, 0xa0, 0xac, 0x3a, 0x7f, 0x54, 0x42, 0x95, 0xf3, 0x00, 0x87,
	0x21, 0x09, 0xd4, 0xc6, 0x7c, 0xb6, 0x4c, 0x0f, 0x1e, 0xa7, 0xaa, 0xa5, 0x0b, 0x7a, 0xbd, 0x14,
	0x11, 0x32, 0xc3, 0x0e, 0x43, 0x65, 0xfc, 0x3c, 0x56, 0xdb, 0x6f, 0xb8, 0xd4, 0xed, 0x97, 0x5e,
	0x59, 0xed, 0x75, 0x65, 0xbb, 0xdc, 0x7a, 0x36, 0x04, 0x61, 0xac, 0xf1, 0xb3, 0x12, 0xda, 0xb2,
	0x4f, 0xb2, 0xd3, 0x45, 0xdb, 0xf9, 0xb9, 0x1d, 0xd0, 0xc0, 0x77, 0x2f, 0xd5, 0xa6, 0xa9, 0x2b,
	0xf1, 0xed, 0x5c, 0x22, 0xe5, 0xc3, 0x9c, 0x84, 0x33, 0x44, 0xb7, 0x39, 0x8d, 0x68, 0x40, 0xc7,
	0x97, 0xb6, 0xaa, 0x15, 0xa9, 0xea, 0xdb, 0x4a, 0xd5, 0xed, 0xd3, 0x45, 0x20, 0x58, 0x2c, 0x2b,
	0xae, 0x5c, 0x46, 0xe4, 0x68, 0xbd, 0xce, 0xe0, 0x2c, 0x96, 0xbb, 0xb0, 0x96, 0x9f, 0x72, 0x30,
	0x78, 0x60, 0x21, 0x1b, 0xff, 0x52, 0x41, 0x28, 0xdf, 0x07, 0xce, 0x5d, 0x54, 0xed, 0x0d, 0x7a,
	0x83, 0x3e, 0xf5, 0xb2, 0x03, 0x91, 0x6e, 0x65, 0x4d, 0x75, 0xde, 0x47, 0xeb, 0xbd, 0xc1, 0xec,
	0xc3, 0x76, 0x30, 0x99, 0x3b, 0x0c, 0x26, 0x43, 0xe0, 0x4e, 0x30, 0x7f, 0x92, 0xf0, 0x31, 0xf5,
	0xc3, 0xb1, 0x75, 0x2e, 0x4c, 0x46, 0x6a, 0x71, 0xf6, 0xa1, 0xb4, 0xb8, 0x6a, 0x5b, 0x4c, 0xa9,
	0xce, 0x01, 0xba, 0x29, 0x7e, 0x77, 0x09, 0x27, 0x2e, 0xf7, 0x69, 0xd8, 0x27, 0xfc, 0x82, 0x7a,
	0xf2, 0x40, 0x64, 0xe0, 0x45, 0x00, 0xa5, 0xf9, 0x40, 0x6a, 0xbe, 0x5e, 0xd0, 0x7c, 0x60, 0x8c,
	0xe5, 0x20, 0x1b, 0x4b, 0xa5, 0x30, 0x96, 0x8c, 0xe1, 0xdc, 0x43, 0x1b, 0xe2, 0xef, 0x80, 0xd2,
	0xa0, 0xd3, 0xeb, 0x42, 0xbd, 0x6a, 0x68, 0xb3, 0x38, 0x99, 0x46, 0xf1, 0x5f, 0xa4, 0x3e, 0x35,
	0x73, 0xd4, 0x06, 0x43, 0x8d, 0xe9, 0xa0, 0x38, 0x26, 0x54, 0x18, 0x53, 0x11, 0x20, 0x92, 0x21,
	0x46, 0x13, 0x4e, 0x58, 0xaf, 0x5b, 0x5f, 0xb7, 0x93, 0x21, 0x50, 0x74, 0xd0, 0x08, 0xb1, 0x63,
	0xcf, 0x49, 0xe0, 0xbf, 0x10, 0x9a, 0x86, 0x49, 0x14, 0x51, 0xc6, 0xeb, 0x1b, 0xd2, 0x25, 0xbd,
	0x63, 0x1f, 0x17, 0xf8, 0x30, 0x27, 0x21, 0x36, 0x57, 0x48, 0x3d, 0xd2, 0x89, 0x92, 0x63, 0x7f,
	0xea, 0xf3, 0xfa, 0xa6, 0xbd, 0xb9, 0x4e, 0x0c, 0x1e, 0x58, 0x48, 0xa7, 0x85, 0x6e, 0x88, 0xff,
	0x7d, 0x32, 0xa5, 0xec, 0x32, 0x15, 0xde, 0x92, 0xc2, 0xdf, 0x52, 0xc2, 0x37, 0x4e, 0x6c, 0x36,
	0x14, 0xf1, 0x22, 0x7a, 0xf2, 0xcb, 0xe8, 0x02, 0x6b, 0xeb, 0x37, 0xec, 0xe8, 0x79, 0x6a, 0x32,
	0xc1, 0xc6, 0x8a, 0xf1, 0x4b, 0x82, 0xe9, 0xc0, 0xb6, 0x7d, 0x62, 0x4f, 0x0b, 0x7c, 0x98, 0x93,
	0x70, 0x3e, 0x45, 0x8e, 0x4b, 0x43, 0xce, 0x68, 0x10, 0x10, 0xa6, 0xfd, 0xd8, 0x91, 0x7a, 0x76,
	0x95, 0x1e, 0xa7, 0x33, 0x87, 0x80, 0x05, 0x52, 0xe2, 0xf4, 0xe7, 0x54, 0xd3, 0x2d, 0xc7, 0x3e,
	0xfd, 0x9d, 0x45, 0x20, 0x58, 0x2c, 0xdb, 0xe8, 0xa0, 0x3b, 0xe2, 0x26, 0x8c, 0x92, 0x80, 0xf7,
	0x69, 0xe8, 0x73, 0xca, 0xfc, 0xf0, 0xca, 0x97, 0xe2, 0xdf, 0x96, 0xd0, 0xed, 0x85, 0x29, 0xe4,
	0x15, 0x94, 0x38, 0xf7, 0x11, 0x9a, 0xfa, 0xe1, 0x33, 0xca, 0x26, 0x84, 0xc5, 0x2a, 0x36, 0xe8,
	0x04, 0xa8, 0xaf, 0x39, 0x60, 0xa0, 0xa4, 0x0c, 0x7e, 0x91, 0xc9, 0x94, 0x0b, 0x32, 0x9a, 0x03,
	0x06, 0xaa, 0xf1, 0xbf, 0x65, 0x84, 0xba, 0xd4, 0x9d, 0x28, 0x0f, 0x7f, 0x1d, 0xad, 0x07, 0xfe,
	0x8c, 0x00, 0x89, 0x39, 0x65, 0x44, 0x79, 0x79, 0x53, 0xe9, 0x58, 0x3f, 0xce, 0x59, 0x60, 0xe2,
	0xc4, 0xc0, 0x18, 0xa5, 0xbc, 0xeb, 0x33, 0x15, 0x7c, 0xf5, 0xc0, 0x20, 0x25, 0x43, 0xc6, 0x17,
	0x16, 0x3c, 0x69, 0xef, 0x22, 0x19, 0xf5, 0xba, 0x2a, 0xbe, 0x6a, 0x0b, 0xdd, 0x9c, 0x05, 0x26,
	0xce, 0xf9, 0x18, 0xed, 0xe8, 0xbf, 0x03, 0x1c, 0xc7, 0xcf, 0x29, 0xf3, 0x54, 0x94, 0x7b, 0x4f,
	0x09, 0xef, 0x74, 0x8b, 0x00, 0x98, 0x97, 0x11, 0x27, 0x89, 0x91, 0xb1, 0x1f, 0x73, 0x76, 0xd9,
	0xf7, 0x19, 0xa3, 0x2c, 0x56, 0xf1, 0x4f, 0x9f, 0x24, 0xb0, 0xd9, 0x50, 0xc4, 0x3b, 0x23, 0xb4,
	0x9b, 0xea, 0xed, 0x90, 0x90, 0xd3, 0x78, 0x80, 0xdd, 0x09, 0x1e, 0x13, 0x20, 0x11, 0x3d, 0x63,
	0x81, 0x0a, 0x90, 0x0d, 0xa5, 0x6d, 0xb7, 0xfb, 0x5a, 0x24, 0xfc, 0x1c, 0x2d, 0xb9, 0x8d, 0xb3,
	0x51, 0x12, 0xf2, 0xa4, 0x60, 0xa3, 0xb2, 0xc8, 0xc6, 0x22, 0x24, 0xfc, 0x1c, 0x2d, 0x8d, 0x7f,
	0x5d, 0x41, 0xd5, 0x43, 0xee, 0x7a, 0xd9, 0xde, 0xf4, 0x30, 0xc7, 0x62, 0x09, 0x4b, 0xf6, 0x12,
	0x76, 0x53, 0x32, 0x64, 0x7c, 0x11, 0xc6, 0x3c, 0x3f, 0x76, 0xe9, 0x8c, 0xb0, 0xcb, 0x33, 0x38,
	0x56, 0x4b, 0xae, 0xc3, 0x58, 0xd7, 0xe0, 0x81, 0x85, 0x14, 0x93, 0x4f, 0x82, 0x34, 0x0c, 0x9f,
	0xfa, 0x53, 0x42, 0x13, 0xae, 0xb6, 0xa9, 0x9e, 0xfc, 0x43, 0x9b, 0x0d, 0x45, 0xbc, 0xf3, 0x6d,
	0x54, 0x26, 0xe1, 0x4c, 0x2d, 0xbd, 0xce, 0x36, 0x0e, 0xc3, 0x19, 0x08, 0xba, 0xd3, 0x47, 0x37,
	0x2f, 0x08, 0x66, 0x7c, 0x44, 0x30, 0xef, 0x85, 0x9c, 0xb0, 0x19, 0x0e, 0xfa, 0xe9, 0x12, 0xaf,
	0xb5, 0x7f, 0x41, 0xc1, 0x6f, 0x7e, 0x32, 0x0f, 0x81, 0x45, 0x72, 0x62, 0x56, 0x66, 0x84, 0xc5,
	0x3e, 0x0d, 0xd5, 0xba, 0xea, 0x59, 0x79, 0x9a, 0x92, 0x21, 0xe3, 0x37, 0xfe, 0xba, 0x84, 0xd6,
	0x8d, 0x2c, 0xcc, 0xf9, 0x4d, 0xb4, 0xe5, 0x0b, 0x45, 0xe7, 0xd8, 0x25, 0xc7, 0x78, 0x44, 0x02,
	0x35, 0xaf, 0x77, 0x94, 0x86, 0xad, 0x9e, 0xc5, 0x85, 0x02, 0xda, 0x19, 0xa0, 0x5b, 0x51, 0x32,
	0x0a, 0x7c, 0xd7, 0xc6, 0xa9, 0xd9, 0xfe, 0x45, 0xa5, 0xe5, 0xd6, 0x60, 0x01, 0x06, 0x16, 0x4a,
	0x36, 0xfe, 0xb9, 0x8c, 0x56, 0x3f, 0xa1, 0x31, 0x77, 0x3e, 0x47, 0x55, 0x7e, 0x19, 0x91, 0x3e,
	0xe1, 0x58, 0x95, 0x90, 0xcd, 0x66, 0xda, 0xad, 0x68, 0x9a, 0xdd, 0x8a, 0x3c, 0xdd, 0x9b, 0x12,
	0x8e, 0x9b, 0xb3, 0x0f, 0x9a, 0xa7, 0x4a, 0x2a, 0xbf, 0x2b, 0x33, 0x0a, 0x68, 0x8d, 0xce, 0xef,
	0xa1, 0xaa, 0xc0, 0x8b, 0xdd, 0xa2, 0xda, 0x04, 0xbf, 0xf6, 0x76, 0xda, 0x9f, 0x8c, 0x7e, 0x44,
	0x5c, 0x2e, 0xf5, 0xeb, 0xb0, 0x95, 0xd3, 0x40, 0x6b, 0x75, 0x66, 0x68, 0x35, 0x8e, 0x88, 0xab,
	0x6a, 0xff, 0xd3, 0x65, 0xe6, 0xb1, 0x62, 0x7e, 0x86, 0x11, 0x71, 0xdb, 0x1b, 0xca, 0x83, 0x55,
	0xf1, 0x0f, 0xa4, 0x3d, 0x51, 0x43, 0xc4, 0x1c, 0xf3, 0x24, 0x56, 0x85, 0xff, 0xd3, 0xa5, 0x5b,
	0x96, 0xda, 0xf3, 0x1a, 0x22, 0xfd, 0x0f, 0xca, 0x6a, 0xe3, 0x9f, 0x56, 0x50, 0x55, 0xc0, 0x8e,
	0xfd, 0xc2, 0x22, 0x96, 0x97, 0xbe, 0x88, 0x9f, 0xcf, 0x2d, 0xe2, 0x5b, 0x6a, 0x17, 0xbe, 0xd9,
	0xda, 0x33, 0x8a, 0xb1, 0x80, 0x09, 0x5a, 0xf3, 0x39, 0x99, 0x8a, 0x8b, 0xad, 0x7c, 0x6f, 0xfd,
	0xfe, 0x60, 0xd9, 0xf3, 0x98, 0xf7, 0x4e, 0x7a, 0xc2, 0x0c, 0xa4, 0xd6, 0x1a, 0x7f, 0xbf, 0x82,
	0x6a, 0x82, 0x3d, 0xb8, 0xc0, 0x31, 0x71, 0xee, 0xa2, 0xd5, 0x10, 0x4f, 0xb3, 0xec, 0x5c, 0xaf,
	0xf7, 0x09, 0x9e, 0x12, 0x90, 0x1c, 0xe7, 0x97, 0xd0, 0x1a, 0x65, 0x1e, 0x61, 0xea, 0xfe, 0xd5,
	0x4a, 0x9f, 0x08, 0x22, 0xa4, 0x3c, 0xe7, 0x07, 0xa8, 0x16, 0x73, 0xcc, 0x38, 0xf1, 0x5a, 0x5c,
	0x2d, 0xc4, 0xaf, 0xbe, 0xe5, 0x42, 0xf8, 0x53, 0xd2, 0xde, 0x51, 0x4a, 0x6b, 0xc3, 0x4c, 0x09,
	0xe4, 0xfa, 0x9c, 0x7d, 0x54, 0xa3, 0xb2, 0x52, 0x17, 0x11, 0x28, 0x8d, 0x79, 0x5a, 0xe0, 0x49,
	0xc6, 0x80, 0x1c, 0x23, 0xaa, 0x70, 0xb5, 0x45, 0xd7, 0xec, 0x2a, 0xdc, 0xde, 0x4a, 0x22, 0xb0,
	0x4d, 0x49, 0x1c, 0xe3, 0x31, 0x29, 0x06, 0xb6, 0x7e, 0x4a, 0x86, 0x8c, 0xdf, 0xf8, 0xd9, 0x7a,
	0xba, 0xeb, 0xc4, 0x41, 0x70, 0x7e, 0x5c, 0x42, 0x55, 0xf2, 0x82, 0x33, 0xdc, 0x39, 0x1f, 0xd7,
	0x4b, 0x72, 0xf5, 0x46, 0xef, 0xe2, 0xfc, 0x35, 0x0f, 0x95, 0x91, 0xc3, 0x90, 0xb3, 0xcb, 0x7c,
	0x33, 0x65, 0x64, 0xd0, 0x5e, 0x38, 0x09, 0x2a, 0x47, 0xe7, 0x0f, 0x55, 0x30, 0x58, 0x6a, 0x51,
	0x3b, 0x78, 0xfc, 0xd0, 0xae, 0xe9, 0x07, 0x8f, 0x1f, 0x0a, 0xdb, 0xc2, 0x9e, 0xf3, 0x67, 0x25,
	0x84, 0xdc, 0x34, 0xcd, 0x13, 0x73, 0x91, 0xae, 0xfc, 0x0f, 0x96, 0xdd, 0x8a, 0x53, 0x89, 0x64,
	0xa1, 0x01, 0xa6, 0xcd, 0x82, 0xe1, 0x82, 0x08, 0x8b, 0x84, 0xbb, 0x9e, 0x0a, 0xe9, 0x4b, 0x0d,
	0x8b, 0x59, 0x9a, 0x90, 0x1f, 0x13, 0x41, 0x01, 0x69, 0x4f, 0x6c, 0x52, 0xb9, 0x18, 0x02, 0xa0,
	0xb6, 0x9d, 0xde, 0xa4, 0x87, 0x19, 0x03, 0x72, 0x8c, 0x48, 0x20, 0x84, 0x45, 0xdf, 0x25, 0xb1,
	0xac, 0x02, 0xaf, 0xdb, 0x09, 0xc4, 0xd0, 0xe0, 0x81, 0x85, 0x14, 0x97, 0xaa, 0xc8, 0xdc, 0xb1,
	0x38, 0x51, 0xa9, 0x6c, 0xc5, 0xbe, 0x54, 0x3b, 0x16, 0x17, 0x0a, 0x68, 0xe7, 0x29, 0xba, 0x83,
	0x83, 0x80, 0x3e, 0x17, 0xe9, 0x6f, 0x40, 0xb1, 0x17, 0x3f, 0x09, 0xfb, 0x58, 0xcc, 0x9f, 0xac,
	0x44, 0xab, 0xed, 0x3d, 0xa5, 0xe7, 0x4e, 0x6b, 0x21, 0x0a, 0x5e, 0x23, 0x2d, 0xbb, 0x3b, 0x93,
	0x64, 0x44, 0x02, 0xc2, 0x65, 0xa9, 0xba, 0xe4, 0xee, 0xce, 0x51, 0xaa, 0xda, 0xee, 0xee, 0x28,
	0x22, 0x64, 0x86, 0xc5, 0xf5, 0x94, 0x66, 0x7b, 0xb2, 0xfa, 0x5d, 0xf2, 0xf5, 0x94, 0x17, 0x09,
	0xf9, 0x71, 0x48, 0x69, 0xa0, 0xac, 0x8a, 0x92, 0x2c, 0xfd, 0x35, 0x60, 0xfe, 0x0c, 0x73, 0x92,
	0x25, 0xd2, 0xaa, 0xbe, 0xd6, 0x25, 0x59, 0x77, 0x11, 0x08, 0x16, 0xcb, 0x8a, 0x84, 0xee, 0x8b,
	0x04, 0x5f, 0x16, 0x55, 0x6e, 0x48, 0x95, 0x3a, 0xa1, 0xfb, 0xad, 0x79, 0x08, 0x2c, 0x92, 0x13,
	0x25, 0xe8, 0xd8, 0x9d, 0x73, 0x70, 0xd3, 0x2e, 0x41, 0x3f, 0xee, 0x40, 0x51, 0xd9, 0x02, 0x29,
	0xa1, 0x6b, 0xf2, 0x20, 0x2e, 0xea, 0xda, 0xb2, 0x75, 0x1d, 0x3d, 0x18, 0xce, 0xe9, 0x9a, 0x97,
	0x92, 0x2d, 0xb1, 0x6c, 0xab, 0x42, 0xfa, 0x81, 0x48, 0x15, 0xe8, 0x79, 0x4b, 0xac, 0xc0, 0x87,
	0x39, 0x89, 0xdd, 0x47, 0x68, 0xd3, 0x8a, 0x9b, 0xce, 0x36, 0x2a, 0x4f, 0x88, 0x6a, 0xae, 0x81,
	0xf8, 0xe9, 0xdc, 0x42, 0x6b, 0x33, 0x1c, 0x24, 0x69, 0xbf, 0xa9, 0x06, 0xe9, 0x9f, 0xef, 0xaf,
	0x3c, 0x28, 0x35, 0xfe, 0x07, 0x21, 0x94, 0x27, 0x21, 0xce, 0x6f, 0xa0, 0xda, 0x85, 0xfa, 0x97,
	0xdd, 0x91, 0xd9, 0xe9, 0xa8, 0x65, 0x30, 0xf2, 0x7f, 0xe6, 0x1f, 0xc8, 0x05, 0x44, 0x99, 0xa7,
	0x22, 0x13, 0xd0, 0x40, 0x19, 0xcb, 0xcb, 0xbc, 0x4e, 0xce, 0x02, 0x13, 0x27, 0x42, 0x89, 0xfa,
	0xab, 0x6b, 0x43, 0x1d, 0x4a, 0x3a, 0x19, 0x03, 0x72, 0x8c, 0x11, 0x4a, 0x52, 0x47, 0x57, 0xed,
	0x4f, 0x64, 0x43, 0x83, 0x07, 0x16, 0xd2, 0xf9, 0x2e, 0xaa, 0x0a, 0x77, 0x65, 0x0a, 0xb0, 0x66,
	0x37, 0x80, 0x3e, 0x51, 0x74, 0xd0, 0x08, 0xe7, 0x8f, 0x4b, 0xa8, 0x12, 0x52, 0x4f, 0x1e, 0xf0,
	0xb4, 0x7d, 0xfb, 0x3b, 0xcb, 0x3c, 0x5d, 0x27, 0xa9, 0x6a, 0x95, 0xff, 0xe9, 0x23, 0xae, 0xc8,
	0x90, 0x99, 0x76, 0x7e, 0x1f, 0x5d, 0x8f, 0x44, 0xf2, 0x12, 0xd7, 0x91, 0xbc, 0x7b, 0xcf, 0x96,
	0x7d, 0xf7, 0xca, 0xd4, 0xc8, 0xb8, 0xf0, 0xa4, 0x31, 0x50, 0x46, 0x45, 0xf8, 0x95, 0xbf, 0x3a,
	0x74, 0x1a, 0x05, 0x84, 0x13, 0x4f, 0x1e, 0xed, 0xb5, 0x3c, 0xfc, 0x0e, 0x2c, 0x2e, 0x14, 0xd0,
	0xa2, 0xfe, 0x0b, 0x70, 0xcc, 0x1f, 0x63, 0x3f, 0x20, 0x9e, 0xc4, 0xca, 0x83, 0x6c, 0xd4, 0x7f,
	0xc7, 0x36, 0x1b, 0x8a, 0x78, 0xe7, 0x11, 0xda, 0x94, 0xe9, 0x51, 0x8b, 0x73, 0x32, 0x15, 0x17,
	0xce, 0xa6, 0x54, 0xa0, 0xdb, 0x58, 0x43, 0x93, 0x09, 0x36, 0x56, 0xec, 0x16, 0x37, 0x61, 0x8c,
	0x84, 0xe9, 0x38, 0xe5, 0x59, 0x5d, 0xcb, 0x77, 0x4b, 0xc7, 0xe0, 0x81, 0x85, 0x74, 0x3e, 0x42,
	0x37, 0x70, 0x10, 0xa4, 0xeb, 0xd3, 0xb9, 0x20, 0xee, 0x24, 0xae, 0xdf, 0xba, 0x5b, 0xbe, 0xb7,
	0xd6, 0xbe, 0x29, 0xbc, 0x6e, 0xd9, 0x2c, 0x28, 0x62, 0xed, 0x81, 0x4b, 0x5a, 0xfd, 0xf6, 0xeb,
	0x06, 0x2e, 0xd9, 0x50, 0xc4, 0x8b, 0x40, 0x58, 0x20, 0x89, 0xfc, 0xb1, 0x7e, 0xe7, 0x6e, 0xe9,
	0x5e, 0x39, 0x0f, 0x84, 0xc7, 0xf3, 0x10, 0x58, 0x24, 0x27, 0x7b, 0x71, 0xe9, 0x00, 0x0d, 0x47,
	0xeb, 0xdf, 0x92, 0x4e, 0xe5, 0xbd, 0xb8, 0x39, 0x04, 0x2c, 0x90, 0x12, 0xb7, 0xea, 0x3c, 0x55,
	0x7a, 0x57, 0x97, 0xde, 0xe9, 0x5b, 0xb5, 0xb3, 0x10, 0x05, 0xaf, 0x91, 0x16, 0xc9, 0x26, 0xd2,
	0x55, 0x71, 0x5c, 0x7f, 0x4f, 0x6e, 0xf9, 0xa5, 0x7e, 0xcf, 0x53, 0x9f, 0x8c, 0x74, 0xa1, 0x9c,
	0xe7, 0x58, 0x9a, 0x14, 0x83, 0xe1, 0x83, 0xa8, 0xca, 0xad, 0xef, 0x67, 0xaa, 0x0d, 0x50, 0xdf,
	0xb5, 0xab, 0xf2, 0xd6, 0x02, 0x0c, 0x2c, 0x94, 0x6c, 0xfc, 0xc5, 0x0a, 0xda, 0x3a, 0x22, 0x24,
	0xc2, 0x81, 0x3f, 0x23, 0xde, 0x55, 0xfb, 0x84, 0x9f, 0x22, 0x67, 0x2a, 0x53, 0x90, 0xa7, 0xbd,
	0x81, 0x76, 0x59, 0x85, 0x5b, 0xbd, 0x8c, 0xfd, 0x39, 0x04, 0x2c, 0x90, 0x72, 0x3e, 0x46, 0x3b,
	0x9a, 0x3a, 0x60, 0x3e, 0x65, 0x3e, 0xbf, 0x54, 0x41, 0x58, 0xf7, 0xd8, 0xfa, 0x45, 0x00, 0xcc,
	0xcb, 0x58, 0x8a, 0xb2, 0x66, 0x7a, 0xb1, 0x59, 0xd7, 0x2f, 0x02, 0x60, 0x5e, 0xa6, 0xf1, 0x75,
	0x19, 0x6d, 0x1c, 0x91, 0xcb, 0x98, 0xd3, 0x90, 0x5c, 0x75, 0x66, 0xde, 0x17, 0xd9, 0xd0, 0x14,
	0xfb, 0xa1, 0x9a, 0x0d, 0x23, 0x6b, 0x11, 0x54, 0x50, 0x5c, 0xa1, 0x12, 0x27, 0xfc, 0xe2, 0x0c,
	0x8e, 0xd5, 0x58, 0xb5, 0xca, 0x56, 0x4a, 0x86, 0x8c, 0x2f, 0xae, 0x8c, 0xc8, 0xee, 0x3d, 0xea,
	0x2b, 0x43, 0xb7, 0x1c, 0x35, 0x42, 0xa0, 0x93, 0x98, 0xb0, 0x45, 0x17, 0xcc, 0x99, 0xa2, 0x83,
	0x46, 0x88, 0x39, 0x8b, 0x18, 0xfd, 0x11, 0x71, 0x79, 0xea, 0x9f, 0x28, 0x43, 0x55, 0x62, 0xac,
	0xe7, 0x6c, 0x50, 0x04, 0xc0, 0xbc, 0x8c, 0xb8, 0x79, 0x15, 0x51, 0xaa, 0xa8, 0xd8, 0x37, 0xef,
	0x20, 0x67, 0x81, 0x89, 0x13, 0xd3, 0xc5, 0xc8, 0x58, 0x6c, 0xe5, 0xaa, 0x3d, 0x5d, 0x20, 0xa9,
	0xa0, 0xb8, 0xe2, 0x0a, 0x10, 0x3e, 0x1b, 0x4e, 0xd6, 0xec, 0x0c, 0xfc, 0xcc, 0xe2, 0x42, 0x01,
	0xdd, 0xf8, 0xc7, 0x15, 0xb4, 0x23, 0x32, 0xd7, 0x56, 0x76, 0x3a, 0xb3, 0x66, 0x59, 0xcc, 0x29,
	0xc3, 0x63, 0xd2, 0xc6, 0xee, 0x84, 0x84, 0x5e, 0xb1, 0x59, 0x36, 0xb4, 0xb8, 0x50, 0x40, 0x3b,
	0xf7, 0x11, 0x8a, 0x98, 0x3f, 0xf3, 0x03, 0x32, 0x26, 0x9e, 0x5c, 0xf0, 0x6a, 0x7e, 0x94, 0x07,
	0x9a, 0x03, 0x06, 0x4a, 0xd4, 0xff, 0xf2, 0x3b, 0x4e, 0xda, 0x81, 0xd4, 0x85, 0xcd, 0x80, 0x32,
	0x0e, 0x92, 0x23, 0xea, 0x7f, 0xb1, 0xf4, 0x2f, 0x55, 0x56, 0xa1, 0xeb, 0x7f, 0xb1, 0x31, 0x5e,
	0x42, 0xca, 0x13, 0x17, 0x92, 0x7a, 0xd1, 0xd3, 0xa1, 0xe1, 0xb9, 0x3f, 0x56, 0x6b, 0xad, 0x2f,
	0x24, 0x30, 0x99, 0x60, 0x63, 0x75, 0xe9, 0xd4, 0x62, 0xe3, 0x58, 0xad, 0xb6, 0x5d, 0x3a, 0x09,
	0x06, 0xe4, 0x98, 0xc6, 0x7f, 0x57, 0xd1, 0x8d, 0x42, 0x5d, 0xe8, 0x7c, 0x59, 0x42, 0xb5, 0xd8,
	0xbd, 0x20, 0x5e, 0x12, 0x10, 0xa6, 0xba, 0x35, 0x3f, 0x5c, 0x76, 0xf9, 0x31, 0xcc, 0x0c, 0xc8,
	0x12, 0x20, 0xef, 0x5a, 0x64, 0x64, 0xc8, 0x5d, 0x70, 0xfe, 0xae, 0x84, 0x76, 0x8c, 0x0f, 0x2c,
	0xea, 0x85, 0x48, 0x5a, 0xa0, 0x93, 0xa5, 0x57, 0xc8, 0x45, 0x43, 0xd2, 0x41, 0x7d, 0x66, 0xe6,
	0xd8, 0x30, 0xef, 0x9a, 0x9c, 0x41, 0x6d, 0x4f, 0x95, 0xf2, 0x4b, 0x9f, 0x41, 0x6b, 0xc7, 0xe7,
	0x33, 0xa8, 0xc9, 0x90, 0xbb, 0xe0, 0x30, 0x54, 0x76, 0x43, 0x5f, 0x55, 0xf2, 0x4b, 0xed, 0x69,
	0xa8, 0xe7, 0x1a, 0x79, 0xeb, 0xbc, 0x73, 0xd2, 0x03, 0x61, 0x4c, 0x94, 0x8f, 0xf2, 0x82, 0x8a,
	0xdf, 0xc5, 0x0b, 0x89, 0xfc, 0x25, 0x59, 0x1e, 0x59, 0x52, 0x1a, 0x28, 0xab, 0xce, 0x9f, 0x96,
	0x50, 0x4d, 0x94, 0xb2, 0x11, 0xa3, 0x2f, 0x2e, 0xdf, 0x45, 0x92, 0x2d, 0x16, 0x61, 0x20, 0x94,
	0xdb, 0x0b, 0xa0, 0xc9, 0x90, 0x9b, 0x97, 0x05, 0xfd, 0x94, 0x70, 0x1c, 0x04, 0x23, 0xf5, 0x5c,
	0x62, 0xa9, 0x05, 0x7d, 0x5f, 0xa8, 0x3e, 0x6e, 0xdb, 0x05, 0xbd, 0x22, 0x42, 0x66, 0x58, 0x84,
	0xf2, 0x24, 0x26, 0x59, 0x35, 0xa2, 0x5a, 0x14, 0x3a, 0x94, 0x9f, 0xe5, 0x2c, 0x30, 0x71, 0xe2,
	0x2a, 0x11, 0x03, 0x61, 0x21, 0xe1, 0x24, 0xce, 0x12, 0x94, 0x9a, 0x7d, 0x95, 0x1c, 0x15, 0x01,
	0x30, 0x2f, 0xd3, 0x38, 0x46, 0xef, 0xbd, 0xf6, 0x84, 0xd9, 0xa1, 0xab, 0xf4, 0x16, 0xa1, 0xeb,
	0x03, 0xb4, 0x69, 0xad, 0x80, 0x08, 0xc0, 0xd3, 0xfc, 0x79, 0x84, 0x0e, 0xc0, 0x7d, 0xea, 0x11,
	0x90, 0x9c, 0x46, 0x37, 0xbd, 0x2b, 0xac, 0xd8, 0x73, 0x75, 0xc3, 0x0f, 0xd1, 0x86, 0xf9, 0xaa,
	0xed, 0x2a, 0xdf, 0x72, 0xff, 0x7d, 0x15, 0xad, 0x1b, 0xcd, 0x17, 0x71, 0xa7, 0xbb, 0x01, 0x4d,
	0xbc, 0xb4, 0xfb, 0x69, 0xdd, 0xe9, 0x1d, 0x45, 0x07, 0x8d, 0x48, 0x6f, 0x25, 0x3a, 0xf3, 0x3d,
	0x99, 0x00, 0xa5, 0x69, 0x88, 0x71, 0x2b, 0x65, 0x1c, 0x30, 0x50, 0xf6, 0xe8, 0xca, 0x6f, 0x1e,
	0x9d, 0xf3, 0x57, 0x25, 0x84, 0x44, 0x79, 0x28, 0xbf, 0xf1, 0xc4, 0xf5, 0x55, 0x99, 0x24, 0x8f,
	0xdf, 0x51, 0xf7, 0x49, 0x16, 0xaa, 0xa9, 0xa5, 0xb4, 0x31, 0xab, 0x87, 0x93, 0x33, 0xc0, 0x70,
	0x47, 0x7b, 0x77, 0x8a, 0xfd, 0x50, 0x76, 0x07, 0xdf, 0xb9, 0x77, 0xa9, 0xa5, 0x05, 0xde, 0xa5,
	0x0c, 0x30, 0xdc, 0xd9, 0xfd, 0x08, 0xdd, 0x28, 0x0c, 0xe8, 0x2a, 0x1d, 0x93, 0x4c, 0xdc, 0xb0,
	0x78, 0xa5, 0x86, 0xcb, 0x01, 0xaa, 0xe9, 0xd7, 0x9e, 0x57, 0xd9, 0x94, 0x80, 0xd6, 0x8d, 0xf8,
	0xe1, 0xd4, 0xd1, 0xaa, 0xec, 0x84, 0x9a, 0xaf, 0x8c, 0x24, 0xc5, 0xd4, 0xb9, 0xf2, 0x06, 0x9d,
	0xff, 0x50, 0x42, 0xdb, 0xc5, 0x62, 0xe8, 0x2d, 0xbe, 0x90, 0xfc, 0x32, 0xaa, 0xf8, 0x11, 0xf6,
	0x3c, 0x96, 0x7e, 0xca, 0xa9, 0xb5, 0xd7, 0x85, 0xf6, 0xde, 0xa0, 0x25, 0x48, 0x90, 0xf1, 0xe4,
	0xd7, 0x06, 0xec, 0x8a, 0xdf, 0xc5, 0x1c, 0xbb, 0xdf, 0xea, 0x08, 0x2c, 0x64, 0x7c, 0xb1, 0xff,
	0xfd, 0xd8, 0x23, 0xe7, 0x38, 0x09, 0xb8, 0xca, 0xbb, 0xf4, 0xfe, 0xef, 0xc5, 0xdd, 0x94, 0x01,
	0x39, 0xa6, 0xf1, 0x7d, 0xb4, 0x69, 0x75, 0x4f, 0xcc, 0x6f, 0xb6, 0xa5, 0x37, 0x7c, 0xb3, 0xfd,
	0xb7, 0x1a, 0xaa, 0xa8, 0x26, 0xbf, 0x38, 0xac, 0x33, 0xa1, 0xf0, 0x94, 0x4e, 0x48, 0x26, 0xa9,
	0xf7, 0xcf, 0x53, 0xcd, 0x01, 0x03, 0x95, 0xbe, 0xb8, 0x10, 0x79, 0x58, 0x40, 0xe2, 0xb8, 0x98,
	0x76, 0xf6, 0x35, 0x07, 0x0c, 0x94, 0x33, 0x44, 0xb7, 0x47, 0x34, 0x09, 0x5d, 0xc2, 0x86, 0x01,
	0x7d, 0x0e, 0xe4, 0x8b, 0x67, 0x64, 0x74, 0x41, 0xe9, 0x44, 0xcd, 0x8c, 0xee, 0x92, 0xb6, 0x17,
	0x81, 0x60, 0xb1, 0xac, 0x08, 0xf9, 0x32, 0xea, 0x64, 0x41, 0xe5, 0xf4, 0x32, 0x22, 0xc5, 0x8a,
	0xab, 0x53, 0x04, 0xc0, 0xbc, 0x8c, 0xdd, 0x80, 0x5b, 0x7b, 0x8b, 0x06, 0x5c, 0x17, 0x6d, 0xab,
	0x3f, 0xaa, 0xb4, 0xe8, 0x75, 0x55, 0x22, 0x9b, 0x37, 0x2e, 0x0b, 0x7c, 0x98, 0x93, 0x10, 0x99,
	0xb6, 0x47, 0x46, 0xc9, 0x58, 0xde, 0xb5, 0x46, 0xa6, 0xdd, 0x15, 0x44, 0x48, 0x79, 0xc2, 0x94,
	0xb8, 0xa3, 0xcc, 0x9e, 0x9e, 0x2a, 0x56, 0xb4, 0xa9, 0xa3, 0x02, 0x1f, 0xe6, 0x24, 0xe4, 0x1b,
	0x04, 0xf5, 0x54, 0xbe, 0x7b, 0x32, 0x34, 0x2a, 0x98, 0xfc, 0x0d, 0x82, 0xcd, 0x86, 0x22, 0xbe,
	0xd8, 0xdc, 0x44, 0x6f, 0xd9, 0xdc, 0xfc, 0xb2, 0x84, 0xd0, 0x44, 0x57, 0xfa, 0xb2, 0x75, 0xb6,
	0xe4, 0x17, 0xd3, 0x76, 0x1f, 0x21, 0xdf, 0x8a, 0x39, 0x1d, 0x0c, 0x0f, 0xd2, 0xb7, 0xe4, 0xaa,
	0xbc, 0x96, 0x8d, 0xb8, 0x65, 0xbf, 0x25, 0x37, 0x4a, 0x77, 0xe3, 0x2d, 0xb9, 0xa2, 0x82, 0xb6,
	0x2d, 0xae, 0xd5, 0xf4, 0x84, 0xf4, 0x06, 0xaa, 0x17, 0xaf, 0xd1, 0x7d, 0x45, 0x07, 0x8d, 0x30,
	0xa6, 0x5f, 0xae, 0xde, 0xd6, 0xc2, 0xe9, 0x4f, 0x2b, 0x5c, 0x03, 0x27, 0xaa, 0x12, 0xc7, 0x9d,
	0x7b, 0xdd, 0x25, 0xbb, 0xec, 0x4b, 0xfe, 0x88, 0xb9, 0xf8, 0x0d, 0x99, 0xd1, 0x56, 0x9b, 0xe3,
	0xc3, 0x02, 0xcf, 0xc4, 0x38, 0xfd, 0xb8, 0xe5, 0xb3, 0x31, 0x8e, 0x22, 0xe2, 0xc9, 0xf7, 0x76,
	0x46, 0xfa, 0xd7, 0xcb, 0x59, 0x60, 0xe2, 0x1a, 0x1f, 0xa1, 0xed, 0xe2, 0x33, 0xf5, 0x2b, 0xdc,
	0x2e, 0xed, 0xe6, 0x57, 0xdf, 0xec, 0x5d, 0xfb, 0xfa, 0x9b, 0xbd, 0x6b, 0x3f, 0xf9, 0x66, 0xef,
	0xda, 0x1f, 0xbe, 0xda, 0x2b, 0x7d, 0xf5, 0x6a, 0xaf, 0xf4, 0xf5, 0xab, 0xbd, 0xd2, 0x4f, 0x5e,
	0xed, 0x95, 0xfe, 0xe3, 0xd5, 0x5e, 0xe9, 0xc7, 0xff, 0xb9, 0x77, 0xed, 0xb3, 0x6a, 0x36, 0xd8,
	0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x11, 0x76, 0xb1, 0x24, 0x26, 0x34, 0x00, 0x00,
}

func (m *AWSOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.ExternalSNAT {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AddonOperatorOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddonOperatorOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddonOperatorOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ImageTag)
	copy(dAtA[i:], m.ImageTag)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ImageTag)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AddonsOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddonsOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddonsOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AddonOperator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.ProfileAgent.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.CPUManager.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Kubevirt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Luigi.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CAS.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.AppCatalog.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppCatalogOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppCatalogOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppCatalogOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CNIOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNIOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CNIOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AWS.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Flannel.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Calico.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	i -= len(m.NetworkPlugin)
	copy(dAtA[i:], m.NetworkPlugin)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NetworkPlugin)))
	i--
	dAtA[i] = 0x22
	i--
	if m.IPv6 {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.MTUSize))
	i--
	dAtA[i] = 0x10
	i -= len(m.Bridge)
	copy(dAtA[i:], m.Bridge)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Bridge)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CPUManagerOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPUManagerOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPUManagerOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ReservedCPUs)
	copy(dAtA[i:], m.ReservedCPUs)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ReservedCPUs)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.TopologyManagerPolicy)
	copy(dAtA[i:], m.TopologyManagerPolicy)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TopologyManagerPolicy)))
	i--
	dAtA[i] = 0x12
	i -= len(m.CPUManagerPolicy)
	copy(dAtA[i:], m.CPUManagerPolicy)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CPUManagerPolicy)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CalicoOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalicoOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalicoOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ControllerMemoryLimit)
	copy(dAtA[i:], m.ControllerMemoryLimit)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ControllerMemoryLimit)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	i -= len(m.ControllerCpuLimit)
	copy(dAtA[i:], m.ControllerCpuLimit)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ControllerCpuLimit)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	i -= len(m.TyphaMemoryLimit)
	copy(dAtA[i:], m.TyphaMemoryLimit)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TyphaMemoryLimit)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	i -= len(m.TyphaCpuLimit)
	copy(dAtA[i:], m.TyphaCpuLimit)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TyphaCpuLimit)))
	i--
	dAtA[i] = 0x7a
	i -= len(m.NodeMemoryLimit)
	copy(dAtA[i:], m.NodeMemoryLimit)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NodeMemoryLimit)))
	i--
	dAtA[i] = 0x72
	i -= len(m.NodeCpuLimit)
	copy(dAtA[i:], m.NodeCpuLimit)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NodeCpuLimit)))
	i--
	dAtA[i] = 0x6a
	i--
	if m.FelixIPv6Support {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x60
	i -= len(m.RouterID)
	copy(dAtA[i:], m.RouterID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RouterID)))
	i--
	dAtA[i] = 0x5a
	i -= len(m.IPv6DetectionMethod)
	copy(dAtA[i:], m.IPv6DetectionMethod)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPv6DetectionMethod)))
	i--
	dAtA[i] = 0x52
	i--
	if m.IPv6PoolNAT {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x48
	i -= len(m.IPv6PoolCIDR)
	copy(dAtA[i:], m.IPv6PoolCIDR)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPv6PoolCIDR)))
	i--
	dAtA[i] = 0x42
	i = encodeVarintGenerated(dAtA, i, uint64(m.IPv6BlkSize))
	i--
	dAtA[i] = 0x38
	i -= len(m.IPv6Mode)
	copy(dAtA[i:], m.IPv6Mode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPv6Mode)))
	i--
	dAtA[i] = 0x32
	i -= len(m.IPv4DetectionMethod)
	copy(dAtA[i:], m.IPv4DetectionMethod)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPv4DetectionMethod)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.IPv4Mode)
	copy(dAtA[i:], m.IPv4Mode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPv4Mode)))
	i--
	dAtA[i] = 0x22
	i--
	if m.NatOutgoing {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.IPv4BlkSize))
	i--
	dAtA[i] = 0x10
	i -= len(m.IPIPMode)
	copy(dAtA[i:], m.IPIPMode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPIPMode)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CatapultMonitoringOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CatapultMonitoringOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CatapultMonitoringOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ClusterAutoScalerOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterAutoScalerOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterAutoScalerOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxWorkers))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.MinWorkers))
	i--
	dAtA[i] = 0x10
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DockerOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DockerOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.DockerUbuntuPackageRepoUrl)
	copy(dAtA[i:], m.DockerUbuntuPackageRepoUrl)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DockerUbuntuPackageRepoUrl)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.DockerCentosPackageRepoUrl)
	copy(dAtA[i:], m.DockerCentosPackageRepoUrl)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DockerCentosPackageRepoUrl)))
	i--
	dAtA[i] = 0x32
	i -= len(m.RegistryMirrors)
	copy(dAtA[i:], m.RegistryMirrors)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RegistryMirrors)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.DockerhubPassword)
	copy(dAtA[i:], m.DockerhubPassword)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DockerhubPassword)))
	i--
	dAtA[i] = 0x22
	i -= len(m.DockerhubID)
	copy(dAtA[i:], m.DockerhubID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DockerhubID)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.RootDir)
	copy(dAtA[i:], m.RootDir)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RootDir)))
	i--
	dAtA[i] = 0x12
	i--
	if m.LiveRestore {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *EtcdOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EtcdOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EtcdOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0x32
	i = encodeVarintGenerated(dAtA, i, uint64(m.HeartbeatIntervalMs))
	i--
	dAtA[i] = 0x28
	i -= len(m.Env)
	copy(dAtA[i:], m.Env)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Env)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintGenerated(dAtA, i, uint64(m.ElectionTimeout))
	i--
	dAtA[i] = 0x18
	i -= len(m.DiscoveryURL)
	copy(dAtA[i:], m.DiscoveryURL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DiscoveryURL)))
	i--
	dAtA[i] = 0x12
	i -= len(m.DataDir)
	copy(dAtA[i:], m.DataDir)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DataDir)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FlannelOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlannelOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlannelOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.PublicInterfaceLabel)
	copy(dAtA[i:], m.PublicInterfaceLabel)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PublicInterfaceLabel)))
	i--
	dAtA[i] = 0x12
	i -= len(m.InterfaceLabel)
	copy(dAtA[i:], m.InterfaceLabel)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InterfaceLabel)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Host) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Host) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Host) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HostList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HostPhase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostPhase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostPhase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Operation)
	copy(dAtA[i:], m.Operation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Operation)))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.StartedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	i = encodeVarintGenerated(dAtA, i, uint64(m.Order))
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HostSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ContainerRuntime)
	copy(dAtA[i:], m.ContainerRuntime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ContainerRuntime)))
	i--
	dAtA[i] = 0x7a
	i -= len(m.K8SPrivateRegistry)
	copy(dAtA[i:], m.K8SPrivateRegistry)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.K8SPrivateRegistry)))
	i--
	dAtA[i] = 0x72
	i -= len(m.GCRPrivateRegistry)
	copy(dAtA[i:], m.GCRPrivateRegistry)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.GCRPrivateRegistry)))
	i--
	dAtA[i] = 0x6a
	i -= len(m.QuayPrivateRegistry)
	copy(dAtA[i:], m.QuayPrivateRegistry)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.QuayPrivateRegistry)))
	i--
	dAtA[i] = 0x62
	i -= len(m.DockerPrivateRegistry)
	copy(dAtA[i:], m.DockerPrivateRegistry)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DockerPrivateRegistry)))
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.Docker.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.Kubelet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	i--
	if m.AllowWorkloadsOnMaster {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x40
	i -= len(m.ContainersCIDR)
	copy(dAtA[i:], m.ContainersCIDR)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ContainersCIDR)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.ServicesCIDR)
	copy(dAtA[i:], m.ServicesCIDR)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServicesCIDR)))
	i--
	dAtA[i] = 0x32
	i -= len(m.ExtraOpts)
	copy(dAtA[i:], m.ExtraOpts)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExtraOpts)))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Etcd.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.ClusterCfg.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.PF9Cfg.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ExtraCfg) > 0 {
		keysForExtraCfg := make([]string, 0, len(m.ExtraCfg))
		for k := range m.ExtraCfg {
			keysForExtraCfg = append(keysForExtraCfg, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForExtraCfg)
		for iNdEx := len(keysForExtraCfg) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ExtraCfg[string(keysForExtraCfg[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForExtraCfg[iNdEx])
			copy(dAtA[i:], keysForExtraCfg[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForExtraCfg[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HostStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.AddonOperatorVersion)
	copy(dAtA[i:], m.AddonOperatorVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AddonOperatorVersion)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd2
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.CurrentStatusCheckTime))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc0
	i = encodeVarintGenerated(dAtA, i, uint64(m.CurrentStatusCheck))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb8
	i = encodeVarintGenerated(dAtA, i, uint64(m.LastFailedCheckTime))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb0
	i = encodeVarintGenerated(dAtA, i, uint64(m.LastFailedCheck))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	if len(m.AllStatusChecks) > 0 {
		for iNdEx := len(m.AllStatusChecks) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintGenerated(dAtA, i, uint64(m.AllStatusChecks[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.CurrentPhase))
	i--
	dAtA[i] = 0x70
	i = encodeVarintGenerated(dAtA, i, uint64(m.StartAttempts))
	i--
	dAtA[i] = 0x68
	i = encodeVarintGenerated(dAtA, i, uint64(m.LastFailedPhase))
	i--
	dAtA[i] = 0x60
	i = encodeVarintGenerated(dAtA, i, uint64(m.PhaseCompleted))
	i--
	dAtA[i] = 0x58
	if len(m.Phases) > 0 {
		for iNdEx := len(m.Phases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Phases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	{
		size, err := m.Nodelet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	i -= len(m.Hostname)
	copy(dAtA[i:], m.Hostname)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Hostname)))
	i--
	dAtA[i] = 0x2a
	i--
	if m.ServiceState {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i -= len(m.ClusterID)
	copy(dAtA[i:], m.ClusterID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterID)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.ClusterRole)
	copy(dAtA[i:], m.ClusterRole)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterRole)))
	i--
	dAtA[i] = 0x12
	i -= len(m.HostState)
	copy(dAtA[i:], m.HostState)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.HostState)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KeepalivedOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeepalivedOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeepalivedOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.MasterVIPRouterID)
	copy(dAtA[i:], m.MasterVIPRouterID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterVIPRouterID)))
	i--
	dAtA[i] = 0x22
	i -= len(m.MasterVIPPriority)
	copy(dAtA[i:], m.MasterVIPPriority)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterVIPPriority)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.MasterVIPInterface)
	copy(dAtA[i:], m.MasterVIPInterface)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterVIPInterface)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KeystoneOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeystoneOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeystoneOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.UserDomainName)
	copy(dAtA[i:], m.UserDomainName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.UserDomainName)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.Region)
	copy(dAtA[i:], m.Region)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Region)))
	i--
	dAtA[i] = 0x42
	i -= len(m.ProjectName)
	copy(dAtA[i:], m.ProjectName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProjectName)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.ProjectDomainName)
	copy(dAtA[i:], m.ProjectDomainName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProjectDomainName)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Username)
	copy(dAtA[i:], m.Username)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Username)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Password)
	copy(dAtA[i:], m.Password)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Password)))
	i--
	dAtA[i] = 0x22
	i -= len(m.AuthURL)
	copy(dAtA[i:], m.AuthURL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AuthURL)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Domain)
	copy(dAtA[i:], m.Domain)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Domain)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KubeApiserverOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeApiserverOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeApiserverOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ExtraArgs)
	copy(dAtA[i:], m.ExtraArgs)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExtraArgs)))
	i--
	dAtA[i] = 0x32
	i -= len(m.RuntimeConfig)
	copy(dAtA[i:], m.RuntimeConfig)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RuntimeConfig)))
	i--
	dAtA[i] = 0x2a
	i--
	if m.Authz {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x18
	i--
	if m.Privileged {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i -= len(m.StorageBackend)
	copy(dAtA[i:], m.StorageBackend)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.StorageBackend)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KubeClusterOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeClusterOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeClusterOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.KubernetesVersion)
	copy(dAtA[i:], m.KubernetesVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubernetesVersion)))
	i--
	dAtA[i] = 0x4a
	i--
	if m.UseHostname {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x40
	{
		size, err := m.MetalLB.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.KubeProxy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Addons.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.CNI.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Apiserver.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ControllerManager.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Scheduler.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KubeControllerManagerOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeControllerManagerOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeControllerManagerOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ExtraArgs)
	copy(dAtA[i:], m.ExtraArgs)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExtraArgs)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KubeProxyOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeProxyOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeProxyOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Mode)
	copy(dAtA[i:], m.Mode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mode)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KubeSchedulerOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeSchedulerOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeSchedulerOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ExtraArgs)
	copy(dAtA[i:], m.ExtraArgs)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExtraArgs)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KubeVirtOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeVirtOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeVirtOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KubeletOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeletOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeTaints) > 0 {
		keysForNodeTaints := make([]string, 0, len(m.NodeTaints))
		for k := range m.NodeTaints {
			keysForNodeTaints = append(keysForNodeTaints, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForNodeTaints)
		for iNdEx := len(keysForNodeTaints) - 1; iNdEx >= 0; iNdEx-- {
			v := m.NodeTaints[string(keysForNodeTaints[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForNodeTaints[iNdEx])
			copy(dAtA[i:], keysForNodeTaints[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForNodeTaints[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.NodeLabels) > 0 {
		keysForNodeLabels := make([]string, 0, len(m.NodeLabels))
		for k := range m.NodeLabels {
			keysForNodeLabels = append(keysForNodeLabels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForNodeLabels)
		for iNdEx := len(keysForNodeLabels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.NodeLabels[string(keysForNodeLabels[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForNodeLabels[iNdEx])
			copy(dAtA[i:], keysForNodeLabels[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForNodeLabels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.ExtraArgs)
	copy(dAtA[i:], m.ExtraArgs)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExtraArgs)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.ProviderID)
	copy(dAtA[i:], m.ProviderID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProviderID)))
	i--
	dAtA[i] = 0x12
	i -= len(m.CloudCfg)
	copy(dAtA[i:], m.CloudCfg)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CloudCfg)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LuigiOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LuigiOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LuigiOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MetalLBOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetalLBOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetalLBOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i -= len(m.CIDR)
	copy(dAtA[i:], m.CIDR)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CIDR)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NetworkInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.IsDefault {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i -= len(m.MACAddr)
	copy(dAtA[i:], m.MACAddr)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MACAddr)))
	i--
	dAtA[i] = 0x1a
	if len(m.IPAddrs) > 0 {
		for iNdEx := len(m.IPAddrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IPAddrs[iNdEx])
			copy(dAtA[i:], m.IPAddrs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPAddrs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeletStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeletStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeletStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PF9Opts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PF9Opts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PF9Opts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.IsAirgapped {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	{
		size, err := m.CatapultMonitoring.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	i -= len(m.ClusterName)
	copy(dAtA[i:], m.ClusterName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterName)))
	i--
	dAtA[i] = 0x72
	i -= len(m.MasterIP)
	copy(dAtA[i:], m.MasterIP)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterIP)))
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.Keystone.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.Keepalived.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	i -= len(m.ClusterRole)
	copy(dAtA[i:], m.ClusterRole)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterRole)))
	i--
	dAtA[i] = 0x52
	i -= len(m.ExternalDNSName)
	copy(dAtA[i:], m.ExternalDNSName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExternalDNSName)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.KubeServiceState)
	copy(dAtA[i:], m.KubeServiceState)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubeServiceState)))
	i--
	dAtA[i] = 0x42
	i--
	if m.Debug {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i -= len(m.ClusterProjectID)
	copy(dAtA[i:], m.ClusterProjectID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterProjectID)))
	i--
	dAtA[i] = 0x32
	i -= len(m.ClusterID)
	copy(dAtA[i:], m.ClusterID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterID)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.CloudProviderType)
	copy(dAtA[i:], m.CloudProviderType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CloudProviderType)))
	i--
	dAtA[i] = 0x22
	i -= len(m.BouncerSlowReqWebhook)
	copy(dAtA[i:], m.BouncerSlowReqWebhook)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BouncerSlowReqWebhook)))
	i--
	dAtA[i] = 0x1a
	i--
	if m.Masterless {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i -= len(m.VaultToken)
	copy(dAtA[i:], m.VaultToken)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VaultToken)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProfileAgentOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileAgentOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfileAgentOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AWSOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *AddonOperatorOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImageTag)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AddonsOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AppCatalog.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.CAS.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Luigi.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Kubevirt.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.CPUManager.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ProfileAgent.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.AddonOperator.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AppCatalogOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *CNIOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bridge)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MTUSize))
	n += 2
	l = len(m.NetworkPlugin)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Calico.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Flannel.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.AWS.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *CPUManagerOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CPUManagerPolicy)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TopologyManagerPolicy)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ReservedCPUs)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *CalicoOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IPIPMode)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.IPv4BlkSize))
	n += 2
	l = len(m.IPv4Mode)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.IPv4DetectionMethod)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.IPv6Mode)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.IPv6BlkSize))
	l = len(m.IPv6PoolCIDR)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.IPv6DetectionMethod)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.RouterID)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.NodeCpuLimit)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.NodeMemoryLimit)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TyphaCpuLimit)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TyphaMemoryLimit)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ControllerCpuLimit)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ControllerMemoryLimit)
	n += 2 + l + sovGenerated(uint64(l))
	return n
}

func (m *CatapultMonitoringOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *ClusterAutoScalerOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 1 + sovGenerated(uint64(m.MinWorkers))
	n += 1 + sovGenerated(uint64(m.MaxWorkers))
	return n
}

func (m *DockerOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.RootDir)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DockerhubID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DockerhubPassword)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.RegistryMirrors)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DockerCentosPackageRepoUrl)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DockerUbuntuPackageRepoUrl)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *EtcdOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataDir)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DiscoveryURL)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.ElectionTimeout))
	l = len(m.Env)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.HeartbeatIntervalMs))
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *FlannelOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InterfaceLabel)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PublicInterfaceLabel)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *Host) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *HostList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.TypeMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *HostPhase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Order))
	l = m.StartedAt.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Operation)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *HostSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtraCfg) > 0 {
		for k, v := range m.ExtraCfg {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = m.PF9Cfg.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ClusterCfg.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Etcd.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ExtraOpts)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ServicesCIDR)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ContainersCIDR)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = m.Kubelet.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Docker.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DockerPrivateRegistry)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.QuayPrivateRegistry)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.GCRPrivateRegistry)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.K8SPrivateRegistry)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ContainerRuntime)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *HostStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostState)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClusterRole)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClusterID)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.Hostname)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Nodelet.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Phases) > 0 {
		for _, e := range m.Phases {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 1 + sovGenerated(uint64(m.PhaseCompleted))
	n += 1 + sovGenerated(uint64(m.LastFailedPhase))
	n += 1 + sovGenerated(uint64(m.StartAttempts))
	n += 1 + sovGenerated(uint64(m.CurrentPhase))
	if len(m.AllStatusChecks) > 0 {
		for _, e := range m.AllStatusChecks {
			n += 2 + sovGenerated(uint64(e))
		}
	}
	n += 2 + sovGenerated(uint64(m.LastFailedCheck))
	n += 2 + sovGenerated(uint64(m.LastFailedCheckTime))
	n += 2 + sovGenerated(uint64(m.CurrentStatusCheck))
	n += 2 + sovGenerated(uint64(m.CurrentStatusCheckTime))
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.AddonOperatorVersion)
	n += 2 + l + sovGenerated(uint64(l))
	return n
}

func (m *KeepalivedOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.MasterVIPInterface)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.MasterVIPPriority)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.MasterVIPRouterID)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KeystoneOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Domain)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AuthURL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Password)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Username)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ProjectDomainName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ProjectName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Region)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.UserDomainName)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeApiserverOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StorageBackend)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	n += 1 + sovGenerated(uint64(m.Port))
	n += 2
	l = len(m.RuntimeConfig)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ExtraArgs)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeClusterOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Scheduler.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ControllerManager.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Apiserver.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.CNI.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Addons.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.KubeProxy.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.MetalLB.Size()
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.KubernetesVersion)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeControllerManagerOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExtraArgs)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeProxyOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mode)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeSchedulerOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExtraArgs)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeVirtOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *KubeletOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CloudCfg)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ProviderID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ExtraArgs)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.NodeLabels) > 0 {
		for k, v := range m.NodeLabels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.NodeTaints) > 0 {
		for k, v := range m.NodeTaints {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *LuigiOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *MetalLBOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CIDR)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	return n
}

func (m *NetworkInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.IPAddrs) > 0 {
		for _, s := range m.IPAddrs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.MACAddr)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	return n
}

func (m *NodeletStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PF9Opts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VaultToken)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.BouncerSlowReqWebhook)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CloudProviderType)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClusterID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClusterProjectID)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.KubeServiceState)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ExternalDNSName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClusterRole)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Keepalived.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Keystone.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.MasterIP)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClusterName)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.CatapultMonitoring.Size()
	n += 1 + l + sovGenerated(uint64(l))
	n += 3
	return n
}

func (m *ProfileAgentOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AWSOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSOpts{`,
		`ExternalSNAT:` + fmt.Sprintf("%v", this.ExternalSNAT) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddonOperatorOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddonOperatorOpts{`,
		`ImageTag:` + fmt.Sprintf("%v", this.ImageTag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddonsOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddonsOpts{`,
		`AppCatalog:` + strings.Replace(strings.Replace(this.AppCatalog.String(), "AppCatalogOpts", "AppCatalogOpts", 1), `&`, ``, 1) + `,`,
		`CAS:` + strings.Replace(strings.Replace(this.CAS.String(), "ClusterAutoScalerOpts", "ClusterAutoScalerOpts", 1), `&`, ``, 1) + `,`,
		`Luigi:` + strings.Replace(strings.Replace(this.Luigi.String(), "LuigiOpts", "LuigiOpts", 1), `&`, ``, 1) + `,`,
		`Kubevirt:` + strings.Replace(strings.Replace(this.Kubevirt.String(), "KubeVirtOpts", "KubeVirtOpts", 1), `&`, ``, 1) + `,`,
		`CPUManager:` + strings.Replace(strings.Replace(this.CPUManager.String(), "CPUManagerOpts", "CPUManagerOpts", 1), `&`, ``, 1) + `,`,
		`ProfileAgent:` + strings.Replace(strings.Replace(this.ProfileAgent.String(), "ProfileAgentOpts", "ProfileAgentOpts", 1), `&`, ``, 1) + `,`,
		`AddonOperator:` + strings.Replace(strings.Replace(this.AddonOperator.String(), "AddonOperatorOpts", "AddonOperatorOpts", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppCatalogOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppCatalogOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CNIOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CNIOpts{`,
		`Bridge:` + fmt.Sprintf("%v", this.Bridge) + `,`,
		`MTUSize:` + fmt.Sprintf("%v", this.MTUSize) + `,`,
		`IPv6:` + fmt.Sprintf("%v", this.IPv6) + `,`,
		`NetworkPlugin:` + fmt.Sprintf("%v", this.NetworkPlugin) + `,`,
		`Calico:` + strings.Replace(strings.Replace(this.Calico.String(), "CalicoOpts", "CalicoOpts", 1), `&`, ``, 1) + `,`,
		`Flannel:` + strings.Replace(strings.Replace(this.Flannel.String(), "FlannelOpts", "FlannelOpts", 1), `&`, ``, 1) + `,`,
		`AWS:` + strings.Replace(strings.Replace(this.AWS.String(), "AWSOpts", "AWSOpts", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CPUManagerOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPUManagerOpts{`,
		`CPUManagerPolicy:` + fmt.Sprintf("%v", this.CPUManagerPolicy) + `,`,
		`TopologyManagerPolicy:` + fmt.Sprintf("%v", this.TopologyManagerPolicy) + `,`,
		`ReservedCPUs:` + fmt.Sprintf("%v", this.ReservedCPUs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CalicoOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CalicoOpts{`,
		`IPIPMode:` + fmt.Sprintf("%v", this.IPIPMode) + `,`,
		`IPv4BlkSize:` + fmt.Sprintf("%v", this.IPv4BlkSize) + `,`,
		`NatOutgoing:` + fmt.Sprintf("%v", this.NatOutgoing) + `,`,
		`IPv4Mode:` + fmt.Sprintf("%v", this.IPv4Mode) + `,`,
		`IPv4DetectionMethod:` + fmt.Sprintf("%v", this.IPv4DetectionMethod) + `,`,
		`IPv6Mode:` + fmt.Sprintf("%v", this.IPv6Mode) + `,`,
		`IPv6BlkSize:` + fmt.Sprintf("%v", this.IPv6BlkSize) + `,`,
		`IPv6PoolCIDR:` + fmt.Sprintf("%v", this.IPv6PoolCIDR) + `,`,
		`IPv6PoolNAT:` + fmt.Sprintf("%v", this.IPv6PoolNAT) + `,`,
		`IPv6DetectionMethod:` + fmt.Sprintf("%v", this.IPv6DetectionMethod) + `,`,
		`RouterID:` + fmt.Sprintf("%v", this.RouterID) + `,`,
		`FelixIPv6Support:` + fmt.Sprintf("%v", this.FelixIPv6Support) + `,`,
		`NodeCpuLimit:` + fmt.Sprintf("%v", this.NodeCpuLimit) + `,`,
		`NodeMemoryLimit:` + fmt.Sprintf("%v", this.NodeMemoryLimit) + `,`,
		`TyphaCpuLimit:` + fmt.Sprintf("%v", this.TyphaCpuLimit) + `,`,
		`TyphaMemoryLimit:` + fmt.Sprintf("%v", this.TyphaMemoryLimit) + `,`,
		`ControllerCpuLimit:` + fmt.Sprintf("%v", this.ControllerCpuLimit) + `,`,
		`ControllerMemoryLimit:` + fmt.Sprintf("%v", this.ControllerMemoryLimit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CatapultMonitoringOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CatapultMonitoringOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterAutoScalerOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterAutoScalerOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`MinWorkers:` + fmt.Sprintf("%v", this.MinWorkers) + `,`,
		`MaxWorkers:` + fmt.Sprintf("%v", this.MaxWorkers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DockerOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DockerOpts{`,
		`LiveRestore:` + fmt.Sprintf("%v", this.LiveRestore) + `,`,
		`RootDir:` + fmt.Sprintf("%v", this.RootDir) + `,`,
		`DockerhubID:` + fmt.Sprintf("%v", this.DockerhubID) + `,`,
		`DockerhubPassword:` + fmt.Sprintf("%v", this.DockerhubPassword) + `,`,
		`RegistryMirrors:` + fmt.Sprintf("%v", this.RegistryMirrors) + `,`,
		`DockerCentosPackageRepoUrl:` + fmt.Sprintf("%v", this.DockerCentosPackageRepoUrl) + `,`,
		`DockerUbuntuPackageRepoUrl:` + fmt.Sprintf("%v", this.DockerUbuntuPackageRepoUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EtcdOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EtcdOpts{`,
		`DataDir:` + fmt.Sprintf("%v", this.DataDir) + `,`,
		`DiscoveryURL:` + fmt.Sprintf("%v", this.DiscoveryURL) + `,`,
		`ElectionTimeout:` + fmt.Sprintf("%v", this.ElectionTimeout) + `,`,
		`Env:` + fmt.Sprintf("%v", this.Env) + `,`,
		`HeartbeatIntervalMs:` + fmt.Sprintf("%v", this.HeartbeatIntervalMs) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlannelOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlannelOpts{`,
		`InterfaceLabel:` + fmt.Sprintf("%v", this.InterfaceLabel) + `,`,
		`PublicInterfaceLabel:` + fmt.Sprintf("%v", this.PublicInterfaceLabel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Host) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Host{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "HostSpec", "HostSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "HostStatus", "HostStatus", 1), `&`, ``, 1) + `,`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]Host{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "Host", "Host", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&HostList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`TypeMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMeta), "TypeMeta", "v1.TypeMeta", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostPhase) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostPhase{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`StartedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.StartedAt), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`Operation:` + fmt.Sprintf("%v", this.Operation) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForExtraCfg := make([]string, 0, len(this.ExtraCfg))
	for k := range this.ExtraCfg {
		keysForExtraCfg = append(keysForExtraCfg, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForExtraCfg)
	mapStringForExtraCfg := "map[string]string{"
	for _, k := range keysForExtraCfg {
		mapStringForExtraCfg += fmt.Sprintf("%v: %v,", k, this.ExtraCfg[k])
	}
	mapStringForExtraCfg += "}"
	s := strings.Join([]string{`&HostSpec{`,
		`ExtraCfg:` + mapStringForExtraCfg + `,`,
		`PF9Cfg:` + strings.Replace(strings.Replace(this.PF9Cfg.String(), "PF9Opts", "PF9Opts", 1), `&`, ``, 1) + `,`,
		`ClusterCfg:` + strings.Replace(strings.Replace(this.ClusterCfg.String(), "KubeClusterOpts", "KubeClusterOpts", 1), `&`, ``, 1) + `,`,
		`Etcd:` + strings.Replace(strings.Replace(this.Etcd.String(), "EtcdOpts", "EtcdOpts", 1), `&`, ``, 1) + `,`,
		`ExtraOpts:` + fmt.Sprintf("%v", this.ExtraOpts) + `,`,
		`ServicesCIDR:` + fmt.Sprintf("%v", this.ServicesCIDR) + `,`,
		`ContainersCIDR:` + fmt.Sprintf("%v", this.ContainersCIDR) + `,`,
		`AllowWorkloadsOnMaster:` + fmt.Sprintf("%v", this.AllowWorkloadsOnMaster) + `,`,
		`Kubelet:` + strings.Replace(strings.Replace(this.Kubelet.String(), "KubeletOpts", "KubeletOpts", 1), `&`, ``, 1) + `,`,
		`Docker:` + strings.Replace(strings.Replace(this.Docker.String(), "DockerOpts", "DockerOpts", 1), `&`, ``, 1) + `,`,
		`DockerPrivateRegistry:` + fmt.Sprintf("%v", this.DockerPrivateRegistry) + `,`,
		`QuayPrivateRegistry:` + fmt.Sprintf("%v", this.QuayPrivateRegistry) + `,`,
		`GCRPrivateRegistry:` + fmt.Sprintf("%v", this.GCRPrivateRegistry) + `,`,
		`K8SPrivateRegistry:` + fmt.Sprintf("%v", this.K8SPrivateRegistry) + `,`,
		`ContainerRuntime:` + fmt.Sprintf("%v", this.ContainerRuntime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPhases := "[]HostPhase{"
	for _, f := range this.Phases {
		repeatedStringForPhases += strings.Replace(strings.Replace(f.String(), "HostPhase", "HostPhase", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPhases += "}"
	repeatedStringForInterfaces := "[]NetworkInterface{"
	for _, f := range this.Interfaces {
		repeatedStringForInterfaces += strings.Replace(strings.Replace(f.String(), "NetworkInterface", "NetworkInterface", 1), `&`, ``, 1) + ","
	}
	repeatedStringForInterfaces += "}"
	s := strings.Join([]string{`&HostStatus{`,
		`HostState:` + fmt.Sprintf("%v", this.HostState) + `,`,
		`ClusterRole:` + fmt.Sprintf("%v", this.ClusterRole) + `,`,
		`ClusterID:` + fmt.Sprintf("%v", this.ClusterID) + `,`,
		`ServiceState:` + fmt.Sprintf("%v", this.ServiceState) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`Nodelet:` + strings.Replace(strings.Replace(this.Nodelet.String(), "NodeletStatus", "NodeletStatus", 1), `&`, ``, 1) + `,`,
		`Phases:` + repeatedStringForPhases + `,`,
		`PhaseCompleted:` + fmt.Sprintf("%v", this.PhaseCompleted) + `,`,
		`LastFailedPhase:` + fmt.Sprintf("%v", this.LastFailedPhase) + `,`,
		`StartAttempts:` + fmt.Sprintf("%v", this.StartAttempts) + `,`,
		`CurrentPhase:` + fmt.Sprintf("%v", this.CurrentPhase) + `,`,
		`AllStatusChecks:` + fmt.Sprintf("%v", this.AllStatusChecks) + `,`,
		`LastFailedCheck:` + fmt.Sprintf("%v", this.LastFailedCheck) + `,`,
		`LastFailedCheckTime:` + fmt.Sprintf("%v", this.LastFailedCheckTime) + `,`,
		`CurrentStatusCheck:` + fmt.Sprintf("%v", this.CurrentStatusCheck) + `,`,
		`CurrentStatusCheckTime:` + fmt.Sprintf("%v", this.CurrentStatusCheckTime) + `,`,
		`Interfaces:` + repeatedStringForInterfaces + `,`,
		`AddonOperatorVersion:` + fmt.Sprintf("%v", this.AddonOperatorVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeepalivedOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeepalivedOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`MasterVIPInterface:` + fmt.Sprintf("%v", this.MasterVIPInterface) + `,`,
		`MasterVIPPriority:` + fmt.Sprintf("%v", this.MasterVIPPriority) + `,`,
		`MasterVIPRouterID:` + fmt.Sprintf("%v", this.MasterVIPRouterID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeystoneOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeystoneOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`AuthURL:` + fmt.Sprintf("%v", this.AuthURL) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`ProjectDomainName:` + fmt.Sprintf("%v", this.ProjectDomainName) + `,`,
		`ProjectName:` + fmt.Sprintf("%v", this.ProjectName) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`UserDomainName:` + fmt.Sprintf("%v", this.UserDomainName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeApiserverOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeApiserverOpts{`,
		`StorageBackend:` + fmt.Sprintf("%v", this.StorageBackend) + `,`,
		`Privileged:` + fmt.Sprintf("%v", this.Privileged) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Authz:` + fmt.Sprintf("%v", this.Authz) + `,`,
		`RuntimeConfig:` + fmt.Sprintf("%v", this.RuntimeConfig) + `,`,
		`ExtraArgs:` + fmt.Sprintf("%v", this.ExtraArgs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeClusterOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeClusterOpts{`,
		`Scheduler:` + strings.Replace(strings.Replace(this.Scheduler.String(), "KubeSchedulerOpts", "KubeSchedulerOpts", 1), `&`, ``, 1) + `,`,
		`ControllerManager:` + strings.Replace(strings.Replace(this.ControllerManager.String(), "KubeControllerManagerOpts", "KubeControllerManagerOpts", 1), `&`, ``, 1) + `,`,
		`Apiserver:` + strings.Replace(strings.Replace(this.Apiserver.String(), "KubeApiserverOpts", "KubeApiserverOpts", 1), `&`, ``, 1) + `,`,
		`CNI:` + strings.Replace(strings.Replace(this.CNI.String(), "CNIOpts", "CNIOpts", 1), `&`, ``, 1) + `,`,
		`Addons:` + strings.Replace(strings.Replace(this.Addons.String(), "AddonsOpts", "AddonsOpts", 1), `&`, ``, 1) + `,`,
		`KubeProxy:` + strings.Replace(strings.Replace(this.KubeProxy.String(), "KubeProxyOpts", "KubeProxyOpts", 1), `&`, ``, 1) + `,`,
		`MetalLB:` + strings.Replace(strings.Replace(this.MetalLB.String(), "MetalLBOpts", "MetalLBOpts", 1), `&`, ``, 1) + `,`,
		`UseHostname:` + fmt.Sprintf("%v", this.UseHostname) + `,`,
		`KubernetesVersion:` + fmt.Sprintf("%v", this.KubernetesVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeControllerManagerOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeControllerManagerOpts{`,
		`ExtraArgs:` + fmt.Sprintf("%v", this.ExtraArgs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeProxyOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeProxyOpts{`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeSchedulerOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeSchedulerOpts{`,
		`ExtraArgs:` + fmt.Sprintf("%v", this.ExtraArgs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeVirtOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeVirtOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletOpts) String() string {
	if this == nil {
		return "nil"
	}
	keysForNodeLabels := make([]string, 0, len(this.NodeLabels))
	for k := range this.NodeLabels {
		keysForNodeLabels = append(keysForNodeLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNodeLabels)
	mapStringForNodeLabels := "map[string]string{"
	for _, k := range keysForNodeLabels {
		mapStringForNodeLabels += fmt.Sprintf("%v: %v,", k, this.NodeLabels[k])
	}
	mapStringForNodeLabels += "}"
	keysForNodeTaints := make([]string, 0, len(this.NodeTaints))
	for k := range this.NodeTaints {
		keysForNodeTaints = append(keysForNodeTaints, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNodeTaints)
	mapStringForNodeTaints := "map[string]string{"
	for _, k := range keysForNodeTaints {
		mapStringForNodeTaints += fmt.Sprintf("%v: %v,", k, this.NodeTaints[k])
	}
	mapStringForNodeTaints += "}"
	s := strings.Join([]string{`&KubeletOpts{`,
		`CloudCfg:` + fmt.Sprintf("%v", this.CloudCfg) + `,`,
		`ProviderID:` + fmt.Sprintf("%v", this.ProviderID) + `,`,
		`ExtraArgs:` + fmt.Sprintf("%v", this.ExtraArgs) + `,`,
		`NodeLabels:` + mapStringForNodeLabels + `,`,
		`NodeTaints:` + mapStringForNodeTaints + `,`,
		`}`,
	}, "")
	return s
}
func (this *LuigiOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LuigiOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetalLBOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetalLBOpts{`,
		`CIDR:` + fmt.Sprintf("%v", this.CIDR) + `,`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkInterface{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`IPAddrs:` + fmt.Sprintf("%v", this.IPAddrs) + `,`,
		`MACAddr:` + fmt.Sprintf("%v", this.MACAddr) + `,`,
		`IsDefault:` + fmt.Sprintf("%v", this.IsDefault) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeletStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeletStatus{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PF9Opts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PF9Opts{`,
		`VaultToken:` + fmt.Sprintf("%v", this.VaultToken) + `,`,
		`Masterless:` + fmt.Sprintf("%v", this.Masterless) + `,`,
		`BouncerSlowReqWebhook:` + fmt.Sprintf("%v", this.BouncerSlowReqWebhook) + `,`,
		`CloudProviderType:` + fmt.Sprintf("%v", this.CloudProviderType) + `,`,
		`ClusterID:` + fmt.Sprintf("%v", this.ClusterID) + `,`,
		`ClusterProjectID:` + fmt.Sprintf("%v", this.ClusterProjectID) + `,`,
		`Debug:` + fmt.Sprintf("%v", this.Debug) + `,`,
		`KubeServiceState:` + fmt.Sprintf("%v", this.KubeServiceState) + `,`,
		`ExternalDNSName:` + fmt.Sprintf("%v", this.ExternalDNSName) + `,`,
		`ClusterRole:` + fmt.Sprintf("%v", this.ClusterRole) + `,`,
		`Keepalived:` + strings.Replace(strings.Replace(this.Keepalived.String(), "KeepalivedOpts", "KeepalivedOpts", 1), `&`, ``, 1) + `,`,
		`Keystone:` + strings.Replace(strings.Replace(this.Keystone.String(), "KeystoneOpts", "KeystoneOpts", 1), `&`, ``, 1) + `,`,
		`MasterIP:` + fmt.Sprintf("%v", this.MasterIP) + `,`,
		`ClusterName:` + fmt.Sprintf("%v", this.ClusterName) + `,`,
		`CatapultMonitoring:` + strings.Replace(strings.Replace(this.CatapultMonitoring.String(), "CatapultMonitoringOpts", "CatapultMonitoringOpts", 1), `&`, ``, 1) + `,`,
		`IsAirgapped:` + fmt.Sprintf("%v", this.IsAirgapped) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProfileAgentOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfileAgentOpts{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AWSOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalSNAT", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExternalSNAT = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddonOperatorOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddonOperatorOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddonOperatorOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddonsOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddonsOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddonsOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppCatalog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppCatalog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CAS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Luigi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Luigi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubevirt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Kubevirt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUManager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CPUManager.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileAgent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProfileAgent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddonOperator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AddonOperator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppCatalogOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppCatalogOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppCatalogOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CNIOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNIOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNIOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bridge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bridge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTUSize", wireType)
			}
			m.MTUSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTUSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IPv6 = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPlugin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkPlugin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calico", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Calico.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Flannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AWS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AWS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPUManagerOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPUManagerOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPUManagerOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUManagerPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPUManagerPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopologyManagerPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopologyManagerPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedCPUs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedCPUs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalicoOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalicoOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalicoOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPIPMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPIPMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4BlkSize", wireType)
			}
			m.IPv4BlkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IPv4BlkSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatOutgoing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NatOutgoing = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4DetectionMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4DetectionMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6BlkSize", wireType)
			}
			m.IPv6BlkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IPv6BlkSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6PoolCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6PoolCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6PoolNAT", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IPv6PoolNAT = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6DetectionMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6DetectionMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FelixIPv6Support", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FelixIPv6Support = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeCpuLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeCpuLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeMemoryLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeMemoryLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TyphaCpuLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TyphaCpuLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TyphaMemoryLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TyphaMemoryLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerCpuLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerCpuLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerMemoryLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerMemoryLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CatapultMonitoringOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatapultMonitoringOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatapultMonitoringOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterAutoScalerOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterAutoScalerOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterAutoScalerOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinWorkers", wireType)
			}
			m.MinWorkers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinWorkers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWorkers", wireType)
			}
			m.MaxWorkers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxWorkers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveRestore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LiveRestore = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerhubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerhubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerhubPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerhubPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryMirrors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryMirrors = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerCentosPackageRepoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerCentosPackageRepoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerUbuntuPackageRepoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerUbuntuPackageRepoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EtcdOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EtcdOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EtcdOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoveryURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionTimeout", wireType)
			}
			m.ElectionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElectionTimeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatIntervalMs", wireType)
			}
			m.HeartbeatIntervalMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatIntervalMs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlannelOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlannelOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlannelOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicInterfaceLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicInterfaceLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Host) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Host: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Host: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, Host{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostPhase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostPhase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostPhase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraCfg == nil {
				m.ExtraCfg = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraCfg[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PF9Cfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PF9Cfg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterCfg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etcd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Etcd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraOpts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraOpts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicesCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicesCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainersCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainersCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowWorkloadsOnMaster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowWorkloadsOnMaster = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubelet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Kubelet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Docker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerPrivateRegistry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerPrivateRegistry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuayPrivateRegistry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuayPrivateRegistry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCRPrivateRegistry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GCRPrivateRegistry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SPrivateRegistry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K8SPrivateRegistry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerRuntime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerRuntime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostState = HostState(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceState = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodelet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nodelet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phases = append(m.Phases, HostPhase{})
			if err := m.Phases[len(m.Phases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhaseCompleted", wireType)
			}
			m.PhaseCompleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhaseCompleted |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailedPhase", wireType)
			}
			m.LastFailedPhase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastFailedPhase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAttempts", wireType)
			}
			m.StartAttempts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAttempts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPhase", wireType)
			}
			m.CurrentPhase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPhase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllStatusChecks = append(m.AllStatusChecks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenerated
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenerated
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AllStatusChecks) == 0 {
					m.AllStatusChecks = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllStatusChecks = append(m.AllStatusChecks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllStatusChecks", wireType)
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailedCheck", wireType)
			}
			m.LastFailedCheck = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastFailedCheck |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailedCheckTime", wireType)
			}
			m.LastFailedCheckTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastFailedCheckTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentStatusCheck", wireType)
			}
			m.CurrentStatusCheck = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentStatusCheck |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentStatusCheckTime", wireType)
			}
			m.CurrentStatusCheckTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentStatusCheckTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, NetworkInterface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddonOperatorVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddonOperatorVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeepalivedOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeepalivedOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeepalivedOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterVIPInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterVIPInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterVIPPriority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterVIPPriority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterVIPRouterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterVIPRouterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeystoneOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeystoneOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeystoneOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectDomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectDomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserDomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeApiserverOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeApiserverOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeApiserverOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageBackend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageBackend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Privileged = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authz", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Authz = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeClusterOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeClusterOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeClusterOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheduler", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Scheduler.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerManager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ControllerManager.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apiserver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Apiserver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CNI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Addons.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KubeProxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetalLB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MetalLB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseHostname", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseHostname = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeControllerManagerOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeControllerManagerOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeControllerManagerOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeProxyOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeProxyOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeProxyOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeSchedulerOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeSchedulerOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeSchedulerOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeVirtOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeVirtOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeVirtOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCfg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudCfg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeLabels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeLabels == nil {
				m.NodeLabels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeLabels[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeTaints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeTaints == nil {
				m.NodeTaints = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeTaints[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LuigiOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LuigiOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LuigiOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetalLBOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetalLBOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetalLBOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkInterface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkInterface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddrs = append(m.IPAddrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MACAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeletStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeletStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeletStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PF9Opts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PF9Opts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PF9Opts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masterless", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masterless = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BouncerSlowReqWebhook", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BouncerSlowReqWebhook = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudProviderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudProviderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterProjectID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterProjectID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Debug = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeServiceState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeServiceState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalDNSName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalDNSName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keepalived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Keepalived.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keystone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Keystone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatapultMonitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CatapultMonitoring.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAirgapped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAirgapped = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileAgentOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileAgentOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileAgentOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
